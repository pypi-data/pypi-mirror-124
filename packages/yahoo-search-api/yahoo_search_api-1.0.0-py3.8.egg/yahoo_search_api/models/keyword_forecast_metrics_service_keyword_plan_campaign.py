# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api.configuration import Configuration


class KeywordForecastMetricsServiceKeywordPlanCampaign(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'keyword_plan_network': 'KeywordForecastMetricsServiceKeywordPlanNetwork',
        'max_cpc': 'int',
        'geo_targets': 'list[str]',
        'keyword_plan_ad_group': 'KeywordForecastMetricsServiceKeywordPlanAdGroup'
    }

    attribute_map = {
        'keyword_plan_network': 'keywordPlanNetwork',
        'max_cpc': 'maxCpc',
        'geo_targets': 'geoTargets',
        'keyword_plan_ad_group': 'keywordPlanAdGroup'
    }

    def __init__(self, keyword_plan_network=None, max_cpc=None, geo_targets=None, keyword_plan_ad_group=None, local_vars_configuration=None):  # noqa: E501
        """KeywordForecastMetricsServiceKeywordPlanCampaign - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._keyword_plan_network = None
        self._max_cpc = None
        self._geo_targets = None
        self._keyword_plan_ad_group = None
        self.discriminator = None

        self.keyword_plan_network = keyword_plan_network
        self.max_cpc = max_cpc
        self.geo_targets = geo_targets
        self.keyword_plan_ad_group = keyword_plan_ad_group

    @property
    def keyword_plan_network(self):
        """Gets the keyword_plan_network of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501


        :return: The keyword_plan_network of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501
        :rtype: KeywordForecastMetricsServiceKeywordPlanNetwork
        """
        return self._keyword_plan_network

    @keyword_plan_network.setter
    def keyword_plan_network(self, keyword_plan_network):
        """Sets the keyword_plan_network of this KeywordForecastMetricsServiceKeywordPlanCampaign.


        :param keyword_plan_network: The keyword_plan_network of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501
        :type: KeywordForecastMetricsServiceKeywordPlanNetwork
        """

        self._keyword_plan_network = keyword_plan_network

    @property
    def max_cpc(self):
        """Gets the max_cpc of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501

        <div lang=\"ja\">最大クリック単価です。</div> <div lang=\"en\">Maximum CPC.</div>   # noqa: E501

        :return: The max_cpc of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501
        :rtype: int
        """
        return self._max_cpc

    @max_cpc.setter
    def max_cpc(self, max_cpc):
        """Sets the max_cpc of this KeywordForecastMetricsServiceKeywordPlanCampaign.

        <div lang=\"ja\">最大クリック単価です。</div> <div lang=\"en\">Maximum CPC.</div>   # noqa: E501

        :param max_cpc: The max_cpc of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501
        :type: int
        """

        self._max_cpc = max_cpc

    @property
    def geo_targets(self):
        """Gets the geo_targets of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501

        <div lang=\"ja\">地域情報です。</div> <div lang=\"en\">Area information.</div>   # noqa: E501

        :return: The geo_targets of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501
        :rtype: list[str]
        """
        return self._geo_targets

    @geo_targets.setter
    def geo_targets(self, geo_targets):
        """Sets the geo_targets of this KeywordForecastMetricsServiceKeywordPlanCampaign.

        <div lang=\"ja\">地域情報です。</div> <div lang=\"en\">Area information.</div>   # noqa: E501

        :param geo_targets: The geo_targets of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501
        :type: list[str]
        """

        self._geo_targets = geo_targets

    @property
    def keyword_plan_ad_group(self):
        """Gets the keyword_plan_ad_group of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501


        :return: The keyword_plan_ad_group of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501
        :rtype: KeywordForecastMetricsServiceKeywordPlanAdGroup
        """
        return self._keyword_plan_ad_group

    @keyword_plan_ad_group.setter
    def keyword_plan_ad_group(self, keyword_plan_ad_group):
        """Sets the keyword_plan_ad_group of this KeywordForecastMetricsServiceKeywordPlanCampaign.


        :param keyword_plan_ad_group: The keyword_plan_ad_group of this KeywordForecastMetricsServiceKeywordPlanCampaign.  # noqa: E501
        :type: KeywordForecastMetricsServiceKeywordPlanAdGroup
        """

        self._keyword_plan_ad_group = keyword_plan_ad_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KeywordForecastMetricsServiceKeywordPlanCampaign):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KeywordForecastMetricsServiceKeywordPlanCampaign):
            return True

        return self.to_dict() != other.to_dict()
