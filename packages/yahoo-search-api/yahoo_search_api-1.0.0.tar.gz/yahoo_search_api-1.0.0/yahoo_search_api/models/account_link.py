# coding: utf-8

"""
    Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference

    <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_search_api.configuration import Configuration


class AccountLink(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'manager_account_id': 'int',
        'account_id': 'int',
        'link_access_permission': 'AccountLinkServiceLinkAccessPermission',
        'owner_ship_type': 'AccountLinkServiceOwnerShipType'
    }

    attribute_map = {
        'manager_account_id': 'managerAccountId',
        'account_id': 'accountId',
        'link_access_permission': 'linkAccessPermission',
        'owner_ship_type': 'ownerShipType'
    }

    def __init__(self, manager_account_id=None, account_id=None, link_access_permission=None, owner_ship_type=None, local_vars_configuration=None):  # noqa: E501
        """AccountLink - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._manager_account_id = None
        self._account_id = None
        self._link_access_permission = None
        self._owner_ship_type = None
        self.discriminator = None

        if manager_account_id is not None:
            self.manager_account_id = manager_account_id
        if account_id is not None:
            self.account_id = account_id
        self.link_access_permission = link_access_permission
        self.owner_ship_type = owner_ship_type

    @property
    def manager_account_id(self):
        """Gets the manager_account_id of this AccountLink.  # noqa: E501

        <div lang=\"ja\">MCCアカウントIDです。</div> <div lang=\"en\">MCC Account ID.</div>   # noqa: E501

        :return: The manager_account_id of this AccountLink.  # noqa: E501
        :rtype: int
        """
        return self._manager_account_id

    @manager_account_id.setter
    def manager_account_id(self, manager_account_id):
        """Sets the manager_account_id of this AccountLink.

        <div lang=\"ja\">MCCアカウントIDです。</div> <div lang=\"en\">MCC Account ID.</div>   # noqa: E501

        :param manager_account_id: The manager_account_id of this AccountLink.  # noqa: E501
        :type: int
        """

        self._manager_account_id = manager_account_id

    @property
    def account_id(self):
        """Gets the account_id of this AccountLink.  # noqa: E501

        <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID.</div>   # noqa: E501

        :return: The account_id of this AccountLink.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountLink.

        <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID.</div>   # noqa: E501

        :param account_id: The account_id of this AccountLink.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def link_access_permission(self):
        """Gets the link_access_permission of this AccountLink.  # noqa: E501


        :return: The link_access_permission of this AccountLink.  # noqa: E501
        :rtype: AccountLinkServiceLinkAccessPermission
        """
        return self._link_access_permission

    @link_access_permission.setter
    def link_access_permission(self, link_access_permission):
        """Sets the link_access_permission of this AccountLink.


        :param link_access_permission: The link_access_permission of this AccountLink.  # noqa: E501
        :type: AccountLinkServiceLinkAccessPermission
        """

        self._link_access_permission = link_access_permission

    @property
    def owner_ship_type(self):
        """Gets the owner_ship_type of this AccountLink.  # noqa: E501


        :return: The owner_ship_type of this AccountLink.  # noqa: E501
        :rtype: AccountLinkServiceOwnerShipType
        """
        return self._owner_ship_type

    @owner_ship_type.setter
    def owner_ship_type(self, owner_ship_type):
        """Sets the owner_ship_type of this AccountLink.


        :param owner_ship_type: The owner_ship_type of this AccountLink.  # noqa: E501
        :type: AccountLinkServiceOwnerShipType
        """

        self._owner_ship_type = owner_ship_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountLink):
            return True

        return self.to_dict() != other.to_dict()
