
# python wrapper for package gosnmp_python/gosnmp_python_go within overall package gosnmp_python_go
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=gosnmp_python/py2 -symbols=true -vm=/Users/edwardbeech/.venv/gosnmp-python/bin/python gosnmp_python/gosnmp_python_go

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
import _gosnmp_python_go
os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from gosnmp_python_go import gosnmp_python_go
# and then refer to everything using gosnmp_python_go. prefix
# packages imported by this package listed below:

import go



# ---- Types ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def GetPyPy():
	"""GetPyPy() bool
	
	GetPyPy returns true if we're running under PyPy
	"""
	return _gosnmp_python_go.gosnmp_python_go_GetPyPy()
def RPCClose(sessionID):
	"""RPCClose(long sessionID) str
	
	RPCClose calls .close on the Session identified by the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_RPCClose(sessionID)
def RPCGet(sessionID, oid):
	"""RPCGet(long sessionID, str oid) str, str
	
	RPCGet calls .get on the Session identified by the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_RPCGet(sessionID, oid)
def RPCGetNext(sessionID, oid):
	"""RPCGetNext(long sessionID, str oid) str, str
	
	RPCGetNext calls .getNext on the Session identified by the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_RPCGetNext(sessionID, oid)
def RPCSetIPAddress(sessionID, oid, value):
	"""RPCSetIPAddress(long sessionID, str oid, str value) str, str
	
	RPCSetIPAddress calls .setIPAddress on the Session identified by the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_RPCSetIPAddress(sessionID, oid, value)
def NewRPCSessionV1(hostname, port, community, timeout, retries):
	"""NewRPCSessionV1(str hostname, int port, str community, int timeout, int retries) long
	
	NewRPCSessionV1 creates a new Session for SNMPv1 and returns the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_NewRPCSessionV1(hostname, port, community, timeout, retries)
def NewRPCSessionV2c(hostname, port, community, timeout, retries):
	"""NewRPCSessionV2c(str hostname, int port, str community, int timeout, int retries) long
	
	NewRPCSessionV2c creates a new Session for SNMPv2c and returns the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_NewRPCSessionV2c(hostname, port, community, timeout, retries)
def NewRPCSessionV3(hostname, port, contextName, securityUsername, privacyPassword, authPassword, securityLevel, authProtocol, privacyProtocol, timeout, retries):
	"""NewRPCSessionV3(str hostname, int port, str contextName, str securityUsername, str privacyPassword, str authPassword, str securityLevel, str authProtocol, str privacyProtocol, int timeout, int retries) long
	
	NewRPCSessionV3 creates a new Session for SNMPv3 and returns the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_NewRPCSessionV3(hostname, port, contextName, securityUsername, privacyPassword, authPassword, securityLevel, authProtocol, privacyProtocol, timeout, retries)
def RPCConnect(sessionID):
	"""RPCConnect(long sessionID) str
	
	RPCConnect calls .connect on the Session identified by the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_RPCConnect(sessionID)
def RPCSetInteger(sessionID, oid, value):
	"""RPCSetInteger(long sessionID, str oid, int value) str, str
	
	RPCSetInteger calls .SetInteger on the Session identified by the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_RPCSetInteger(sessionID, oid, value)
def RPCSetString(sessionID, oid, value):
	"""RPCSetString(long sessionID, str oid, str value) str, str
	
	RPCSetString calls .setString on the Session identified by the sessionID
	"""
	return _gosnmp_python_go.gosnmp_python_go_RPCSetString(sessionID, oid, value)
def SetPyPy(goRun=False):
	"""SetPyPy() 
	
	SetPyPy is used by the Python side to declare whether or not we're running under PyPy (can't be discovered on the Go side)
	"""
	_gosnmp_python_go.gosnmp_python_go_SetPyPy(goRun)


