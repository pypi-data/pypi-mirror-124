# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['nxtools', 'nxtools.caspar', 'nxtools.media']

package_data = \
{'': ['*']}

install_requires = \
['Unidecode>=1.2.0,<2.0.0', 'colorama>=0.4.4,<0.5.0']

entry_points = \
{'console_scripts': ['docs = scripts:docs', 'test = scripts:test']}

setup_kwargs = {
    'name': 'nxtools',
    'version': '1.6',
    'description': 'nxtools is a set of various tools and helpers used by Nebula broadcast automation system and other software by imm studios, z.s.',
    'long_description': 'nxtools\n=======\n\nnxtools is a set of various tools and helpers used by [Nebula](https://github.com/nebulabroadcast/nebula) and other software.\n\nInstallation\n------------\n\n`pip install nxtools`\n\n### Optional dependencies\n\n - `unidecode` for full unicode transliteration\n - `colorama` for colored log output even on Windows\n\n\nExamples\n-------\n\n - [Podcasts downloader](https://pastebin.com/5Fya2kep)\n\nReference\n---------\n\n\n### CasparCG\n\nCasparCG client object\n\n### CasparResponse\n\nCaspar query response object\n\n### FileObject\n\nAn object representing a file on the filesystem.\n\nThe class provides a number of utility methods and properties\nfor easy access to file metadata.\n### critical_error\n\nLog an error message and exit program.\n\n### datestr2ts\n\nConvert a `YYYY-MM-DD` string to an unix timestamp.\n\nBy default, start of the day (midnight) is returned.\n\n```\nArgs:\n    datestr (str):\n        `YYYY-MM-DD` string\n\n    hh (int):\n        Hour (default: 0)\n\n    mm (int):\n        Minute (default: 0)\n\n    ss (int):\n        Second (default: 0)\n\nReturns:\n    int:\n        Parsed unix timestamp\n```\n\n### f2tc\n\nConvert frames to an SMPTE timecode\n\n\n```\nArgs:\n    frames (int):\n        Frame count\n\n    base (float):\n        Frame rate (default: 25)\n\nReturns:\n    str:\n        SMPTE timecode (`HH:MM:SS:FF`)\n```\n\n### ffmpeg\n\nFFMpeg wrapper with progress and error handling\n\n\n```\nArgs:\n    *args (list[any]): \n        List of ffmpeg command line arguments.\n        Each argument is converted to a string.\n\n    progress_handler (function):\n        Function to be called with the current position (seconds) as argument.\n\n    stdin (file):\n        File object to be used as stdin.\n        Default is subprocess.PIPE\n\n    stdout (file):\n        File object to be used as stdout.\n        Default is None\n\n    stderr (file):\n        File object to be used as stderr.\n        Default is subprocess.PIPE (used to compute progress).\n\n    debug (bool):\n        Enable debug mode (write ffmpeg output to stderr).\n\nReturns:\n    boolean: indicate if the process was successful\n```\n\n### ffprobe\n\nExtract metadata from a media file using ffprobe\nand returns a dictionary object with the result\n\n```\nArgs:\n    input_file (str): \n        Path to the media file\n\n    verbose (bool): \n        Log the ffprobe command. Default is False\n\nReturns:\n    dict: metadata\n```\n\n### file_to_title\n\nAttempt to un-slugify a file name\n\n### filter_arc\n\nAspect ratio convertor. you must specify output size and source aspect ratio (as float)\n\n### filter_deinterlace\n\nYadif deinterlace\n\n### find_binary\n\nAttempt to find a given executable and return its path\n\n\n```\nArgs:\n    file_name (str): The name of the executable to find\n\nReturns:\n    str: The path to the executable\n```\n\n### format_filesize\n\nReturn a human readable filesize for a given byte count\n\n### format_time\n\nFormat an Unix timestamp as a local or GMT time\n\n\n```\nArgs:\n    timestamp (int):\n        input unix timestamp\n\n    time_format (str):\n        strftime specification\n        (default: "%Y-%m-%d %H:%M:%S" - the correct one)\n\n    never_placeholder (str):\n        text used when timestamp is not specified (default: "never")\n\n    gmt (bool):\n        Use GMT time instead of local time (default: False)\n\nReturns:\n    str:\n        Formatted time\n```\n\n### get_base_name\n\nStrip a directory and extension from a given path.\n\n`/etc/foo/bar.baz` becomes `bar`\n\n```\nArgs:\n    file_name (str): path-like object, string or FileObject\n\nReturns:\n    str\n```\n\n### get_files\n\nCrawl a given directory\n\nFor each file found in `base_path` yield a FileObject object.\n\n```\nArgs:\n    base_path (str):\n        Path to the directory to be crawled\n\n    recursive (bool):\n        Crawl recursively (default: False)\n\n    hidden (bool):\n        Yield hidden (dot)files too (default: False)\n\n    exts (list):\n        If specified, yields only files matching given extensions\n\n    case_sensitive_exts (bool):\n        Do not ignore cases when `exts` list is used (default: False)\n```\n\n### get_guid\n\nReturn a GUID\n\nReturns:\nstr: GUID\n### get_path_pairs\n\nFor each file found in `input_dir` and yield a tuple of (input_path, output_path)\n\nThis function is useful for batch conversion, when you need to process files\nfrom `input_dir` and output the result to `output_dir`.\n\nMost arguments are the same as for `get_files`. You can also specify a target extension,\nand use a slugifier for the output path.\n\n```\nArgs:\n    target_ext (str):\n    target_slugify (bool): (default: False)\n```\n\n### get_temp\n\nReturn a path to a temporary file\n\n\n```\nArgs:\n    extension (str)\n    root (str)\n```\n\n### indent\n\nIndent a multi-line text\n\n### join_filters\n\nJoins multiple filters\n\n### log_traceback\n\nLog the current exception traceback\n\n### s2tc\n\nConvert seconds to an SMPTE timecode\n\n\n```\nArgs:\n    secs (float):\n        Number of seconds\n\n    base (float):\n        Frame rate (default: 25)\n\nReturns:\n    str:\n        SMPTE timecode (`HH:MM:SS:FF`)\n```\n\n### s2time\n\nConvert seconds to time\n\n\n```\nArgs:\n    secs (float):\n\n    show_secs (bool):\n        Show seconds (default: True)\n\n    show_fracs (bool):\n        Show centiseconds (default: True)\n\nReturns:\n    str:\n        `HH:MM` / `HH:MM:SS` / `HH:MM:SS.CS` string\n```\n\n### s2words\n\nCreate a textual (english) representation of given number of seconds.\n\nThis function is useful for showing estimated time of a process.\n\n```\nArgs:\n    secs (int):\n        Number of seconds\n\nReturns:\n    str:\n        Textual information\n```\n\n### slugify\n\nSlugify a text string\n\nThis function removes transliterates input string to ASCII, removes special characters\nand use join resulting elemets using specified separator.\n\n```\nArgs:\n    input_string (str):\n        Input string to slugify\n\n    separator (str): \n        A string used to separate returned elements (default: "-")\n\n    lower (bool): \n        Convert to lower-case (default: True)\n\n    make_set (bool):\n        Return "set" object instead of string\n\n    min_length (int): \n        Minimal length of an element (word)\n\n    slug_whitelist (str): \n        Characters allowed in the output\n        (default: ascii letters, digits and the separator)\n\n    split_chars (str): \n        Set of characters used for word splitting (there is a sane default)\n```\n\n### string2color\n\nGenerate more or less unique color for a given string\n\n### tc2s\n\nConvert an SMPTE timecode (HH:MM:SS:FF) to number of seconds\n\n\n```\nArgs:\n    tc (str):\n        Source timecode\n\n    base (float):\n        Frame rate (default: 25)\n\nReturns:\n    float:\n        Resulting value in seconds\n```\n\n### unaccent\n\nRemove accents and/or transliterate non-ascii characters\n\n### xml\n\nParse an XML string using ElementTree\n\n\n```\nArgs:\n    data (str): The XML document to parse\n\nReturns:\n    ElementTree.Element: The root element of the parsed XML string\n```\n',
    'author': 'Martin Wacker',
    'author_email': 'martas@imm.cz',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/immstudios/nxtools',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
