# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_api.configuration import Configuration


class GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'target_permission': 'GuaranteedSimulationServicePackagePermissionType',
        'permitted_targets': 'list[GuaranteedSimulationServicePermittedPlacementCategoryTarget]',
        'placement_monopoly_flg': 'GuaranteedSimulationServicePlacementMonopolyFlg',
        'placement_category_detail_max': 'int'
    }

    attribute_map = {
        'target_permission': 'targetPermission',
        'permitted_targets': 'permittedTargets',
        'placement_monopoly_flg': 'placementMonopolyFlg',
        'placement_category_detail_max': 'placementCategoryDetailMax'
    }

    def __init__(self, target_permission=None, permitted_targets=None, placement_monopoly_flg=None, placement_category_detail_max=None, local_vars_configuration=None):  # noqa: E501
        """GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._target_permission = None
        self._permitted_targets = None
        self._placement_monopoly_flg = None
        self._placement_category_detail_max = None
        self.discriminator = None

        self.target_permission = target_permission
        if permitted_targets is not None:
            self.permitted_targets = permitted_targets
        self.placement_monopoly_flg = placement_monopoly_flg
        self.placement_category_detail_max = placement_category_detail_max

    @property
    def target_permission(self):
        """Gets the target_permission of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501


        :return: The target_permission of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501
        :rtype: GuaranteedSimulationServicePackagePermissionType
        """
        return self._target_permission

    @target_permission.setter
    def target_permission(self, target_permission):
        """Sets the target_permission of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.


        :param target_permission: The target_permission of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501
        :type: GuaranteedSimulationServicePackagePermissionType
        """

        self._target_permission = target_permission

    @property
    def permitted_targets(self):
        """Gets the permitted_targets of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501


        :return: The permitted_targets of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501
        :rtype: list[GuaranteedSimulationServicePermittedPlacementCategoryTarget]
        """
        return self._permitted_targets

    @permitted_targets.setter
    def permitted_targets(self, permitted_targets):
        """Sets the permitted_targets of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.


        :param permitted_targets: The permitted_targets of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501
        :type: list[GuaranteedSimulationServicePermittedPlacementCategoryTarget]
        """

        self._permitted_targets = permitted_targets

    @property
    def placement_monopoly_flg(self):
        """Gets the placement_monopoly_flg of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501


        :return: The placement_monopoly_flg of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501
        :rtype: GuaranteedSimulationServicePlacementMonopolyFlg
        """
        return self._placement_monopoly_flg

    @placement_monopoly_flg.setter
    def placement_monopoly_flg(self, placement_monopoly_flg):
        """Sets the placement_monopoly_flg of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.


        :param placement_monopoly_flg: The placement_monopoly_flg of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501
        :type: GuaranteedSimulationServicePlacementMonopolyFlg
        """

        self._placement_monopoly_flg = placement_monopoly_flg

    @property
    def placement_category_detail_max(self):
        """Gets the placement_category_detail_max of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501

        <div lang=\"ja\">プレイスメントカテゴリ詳細の最大数です。</div> <div lang=\"en\">The maximum number of placement category details.</div>   # noqa: E501

        :return: The placement_category_detail_max of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501
        :rtype: int
        """
        return self._placement_category_detail_max

    @placement_category_detail_max.setter
    def placement_category_detail_max(self, placement_category_detail_max):
        """Sets the placement_category_detail_max of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.

        <div lang=\"ja\">プレイスメントカテゴリ詳細の最大数です。</div> <div lang=\"en\">The maximum number of placement category details.</div>   # noqa: E501

        :param placement_category_detail_max: The placement_category_detail_max of this GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget.  # noqa: E501
        :type: int
        """

        self._placement_category_detail_max = placement_category_detail_max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GuaranteedSimulationServicePackagePermittedPlacementCategoryTarget):
            return True

        return self.to_dict() != other.to_dict()
