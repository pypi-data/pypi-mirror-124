# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_api.configuration import Configuration


class GuaranteedSimulationServicePrediction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'results': 'list[GuaranteedSimulationServicePredictionResult]',
        'requested_condition_result': 'GuaranteedSimulationServicePredictionResult',
        'reserved_condition_result': 'GuaranteedSimulationServicePredictionResult'
    }

    attribute_map = {
        'results': 'results',
        'requested_condition_result': 'requestedConditionResult',
        'reserved_condition_result': 'reservedConditionResult'
    }

    def __init__(self, results=None, requested_condition_result=None, reserved_condition_result=None, local_vars_configuration=None):  # noqa: E501
        """GuaranteedSimulationServicePrediction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._results = None
        self._requested_condition_result = None
        self._reserved_condition_result = None
        self.discriminator = None

        self.results = results
        self.requested_condition_result = requested_condition_result
        self.reserved_condition_result = reserved_condition_result

    @property
    def results(self):
        """Gets the results of this GuaranteedSimulationServicePrediction.  # noqa: E501


        :return: The results of this GuaranteedSimulationServicePrediction.  # noqa: E501
        :rtype: list[GuaranteedSimulationServicePredictionResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this GuaranteedSimulationServicePrediction.


        :param results: The results of this GuaranteedSimulationServicePrediction.  # noqa: E501
        :type: list[GuaranteedSimulationServicePredictionResult]
        """

        self._results = results

    @property
    def requested_condition_result(self):
        """Gets the requested_condition_result of this GuaranteedSimulationServicePrediction.  # noqa: E501


        :return: The requested_condition_result of this GuaranteedSimulationServicePrediction.  # noqa: E501
        :rtype: GuaranteedSimulationServicePredictionResult
        """
        return self._requested_condition_result

    @requested_condition_result.setter
    def requested_condition_result(self, requested_condition_result):
        """Sets the requested_condition_result of this GuaranteedSimulationServicePrediction.


        :param requested_condition_result: The requested_condition_result of this GuaranteedSimulationServicePrediction.  # noqa: E501
        :type: GuaranteedSimulationServicePredictionResult
        """

        self._requested_condition_result = requested_condition_result

    @property
    def reserved_condition_result(self):
        """Gets the reserved_condition_result of this GuaranteedSimulationServicePrediction.  # noqa: E501


        :return: The reserved_condition_result of this GuaranteedSimulationServicePrediction.  # noqa: E501
        :rtype: GuaranteedSimulationServicePredictionResult
        """
        return self._reserved_condition_result

    @reserved_condition_result.setter
    def reserved_condition_result(self, reserved_condition_result):
        """Sets the reserved_condition_result of this GuaranteedSimulationServicePrediction.


        :param reserved_condition_result: The reserved_condition_result of this GuaranteedSimulationServicePrediction.  # noqa: E501
        :type: GuaranteedSimulationServicePredictionResult
        """

        self._reserved_condition_result = reserved_condition_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuaranteedSimulationServicePrediction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GuaranteedSimulationServicePrediction):
            return True

        return self.to_dict() != other.to_dict()
