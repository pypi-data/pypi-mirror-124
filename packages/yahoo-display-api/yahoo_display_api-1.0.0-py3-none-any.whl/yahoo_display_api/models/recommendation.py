# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_api.configuration import Configuration


class Recommendation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'RecommendationServiceType',
        'campaign_bidding_strategy_to_target_cpa': 'RecommendationServiceCampaignBiddingStrategyToTargetCpa',
        'daily_budget_over': 'RecommendationServiceDailyBudgetOver',
        'imps_share_budget_loss_over': 'RecommendationServiceImpsShareBudgetLossOver',
        'search_keyword_idea': 'RecommendationServiceSearchKeywordIdea',
        'campaigns_for_adding_ads': 'RecommendationServiceCampaignsForAddingAds'
    }

    attribute_map = {
        'type': 'type',
        'campaign_bidding_strategy_to_target_cpa': 'campaignBiddingStrategyToTargetCpa',
        'daily_budget_over': 'dailyBudgetOver',
        'imps_share_budget_loss_over': 'impsShareBudgetLossOver',
        'search_keyword_idea': 'searchKeywordIdea',
        'campaigns_for_adding_ads': 'campaignsForAddingAds'
    }

    def __init__(self, type=None, campaign_bidding_strategy_to_target_cpa=None, daily_budget_over=None, imps_share_budget_loss_over=None, search_keyword_idea=None, campaigns_for_adding_ads=None, local_vars_configuration=None):  # noqa: E501
        """Recommendation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._campaign_bidding_strategy_to_target_cpa = None
        self._daily_budget_over = None
        self._imps_share_budget_loss_over = None
        self._search_keyword_idea = None
        self._campaigns_for_adding_ads = None
        self.discriminator = None

        self.type = type
        self.campaign_bidding_strategy_to_target_cpa = campaign_bidding_strategy_to_target_cpa
        self.daily_budget_over = daily_budget_over
        self.imps_share_budget_loss_over = imps_share_budget_loss_over
        self.search_keyword_idea = search_keyword_idea
        self.campaigns_for_adding_ads = campaigns_for_adding_ads

    @property
    def type(self):
        """Gets the type of this Recommendation.  # noqa: E501


        :return: The type of this Recommendation.  # noqa: E501
        :rtype: RecommendationServiceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Recommendation.


        :param type: The type of this Recommendation.  # noqa: E501
        :type: RecommendationServiceType
        """

        self._type = type

    @property
    def campaign_bidding_strategy_to_target_cpa(self):
        """Gets the campaign_bidding_strategy_to_target_cpa of this Recommendation.  # noqa: E501


        :return: The campaign_bidding_strategy_to_target_cpa of this Recommendation.  # noqa: E501
        :rtype: RecommendationServiceCampaignBiddingStrategyToTargetCpa
        """
        return self._campaign_bidding_strategy_to_target_cpa

    @campaign_bidding_strategy_to_target_cpa.setter
    def campaign_bidding_strategy_to_target_cpa(self, campaign_bidding_strategy_to_target_cpa):
        """Sets the campaign_bidding_strategy_to_target_cpa of this Recommendation.


        :param campaign_bidding_strategy_to_target_cpa: The campaign_bidding_strategy_to_target_cpa of this Recommendation.  # noqa: E501
        :type: RecommendationServiceCampaignBiddingStrategyToTargetCpa
        """

        self._campaign_bidding_strategy_to_target_cpa = campaign_bidding_strategy_to_target_cpa

    @property
    def daily_budget_over(self):
        """Gets the daily_budget_over of this Recommendation.  # noqa: E501


        :return: The daily_budget_over of this Recommendation.  # noqa: E501
        :rtype: RecommendationServiceDailyBudgetOver
        """
        return self._daily_budget_over

    @daily_budget_over.setter
    def daily_budget_over(self, daily_budget_over):
        """Sets the daily_budget_over of this Recommendation.


        :param daily_budget_over: The daily_budget_over of this Recommendation.  # noqa: E501
        :type: RecommendationServiceDailyBudgetOver
        """

        self._daily_budget_over = daily_budget_over

    @property
    def imps_share_budget_loss_over(self):
        """Gets the imps_share_budget_loss_over of this Recommendation.  # noqa: E501


        :return: The imps_share_budget_loss_over of this Recommendation.  # noqa: E501
        :rtype: RecommendationServiceImpsShareBudgetLossOver
        """
        return self._imps_share_budget_loss_over

    @imps_share_budget_loss_over.setter
    def imps_share_budget_loss_over(self, imps_share_budget_loss_over):
        """Sets the imps_share_budget_loss_over of this Recommendation.


        :param imps_share_budget_loss_over: The imps_share_budget_loss_over of this Recommendation.  # noqa: E501
        :type: RecommendationServiceImpsShareBudgetLossOver
        """

        self._imps_share_budget_loss_over = imps_share_budget_loss_over

    @property
    def search_keyword_idea(self):
        """Gets the search_keyword_idea of this Recommendation.  # noqa: E501


        :return: The search_keyword_idea of this Recommendation.  # noqa: E501
        :rtype: RecommendationServiceSearchKeywordIdea
        """
        return self._search_keyword_idea

    @search_keyword_idea.setter
    def search_keyword_idea(self, search_keyword_idea):
        """Sets the search_keyword_idea of this Recommendation.


        :param search_keyword_idea: The search_keyword_idea of this Recommendation.  # noqa: E501
        :type: RecommendationServiceSearchKeywordIdea
        """

        self._search_keyword_idea = search_keyword_idea

    @property
    def campaigns_for_adding_ads(self):
        """Gets the campaigns_for_adding_ads of this Recommendation.  # noqa: E501


        :return: The campaigns_for_adding_ads of this Recommendation.  # noqa: E501
        :rtype: RecommendationServiceCampaignsForAddingAds
        """
        return self._campaigns_for_adding_ads

    @campaigns_for_adding_ads.setter
    def campaigns_for_adding_ads(self, campaigns_for_adding_ads):
        """Sets the campaigns_for_adding_ads of this Recommendation.


        :param campaigns_for_adding_ads: The campaigns_for_adding_ads of this Recommendation.  # noqa: E501
        :type: RecommendationServiceCampaignsForAddingAds
        """

        self._campaigns_for_adding_ads = campaigns_for_adding_ads

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Recommendation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Recommendation):
            return True

        return self.to_dict() != other.to_dict()
