# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_api.configuration import Configuration


class GuaranteedSimulationServicePricingPackage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'price_type': 'GuaranteedSimulationServicePriceType',
        'vimps_custom_pricing_package': 'GuaranteedSimulationServiceVimpsCustomPricingPackage',
        'vimps_sov_pricing_package': 'GuaranteedSimulationServiceVimpsSOVPricingPackage',
        'vimps_reach_pricing_package': 'GuaranteedSimulationServiceVimpsReachPricingPackage',
        'slots_pricing_package': 'GuaranteedSimulationServiceSlotsPricingPackage'
    }

    attribute_map = {
        'price_type': 'priceType',
        'vimps_custom_pricing_package': 'vimpsCustomPricingPackage',
        'vimps_sov_pricing_package': 'vimpsSOVPricingPackage',
        'vimps_reach_pricing_package': 'vimpsReachPricingPackage',
        'slots_pricing_package': 'slotsPricingPackage'
    }

    def __init__(self, price_type=None, vimps_custom_pricing_package=None, vimps_sov_pricing_package=None, vimps_reach_pricing_package=None, slots_pricing_package=None, local_vars_configuration=None):  # noqa: E501
        """GuaranteedSimulationServicePricingPackage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._price_type = None
        self._vimps_custom_pricing_package = None
        self._vimps_sov_pricing_package = None
        self._vimps_reach_pricing_package = None
        self._slots_pricing_package = None
        self.discriminator = None

        self.price_type = price_type
        self.vimps_custom_pricing_package = vimps_custom_pricing_package
        self.vimps_sov_pricing_package = vimps_sov_pricing_package
        self.vimps_reach_pricing_package = vimps_reach_pricing_package
        self.slots_pricing_package = slots_pricing_package

    @property
    def price_type(self):
        """Gets the price_type of this GuaranteedSimulationServicePricingPackage.  # noqa: E501


        :return: The price_type of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :rtype: GuaranteedSimulationServicePriceType
        """
        return self._price_type

    @price_type.setter
    def price_type(self, price_type):
        """Sets the price_type of this GuaranteedSimulationServicePricingPackage.


        :param price_type: The price_type of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :type: GuaranteedSimulationServicePriceType
        """

        self._price_type = price_type

    @property
    def vimps_custom_pricing_package(self):
        """Gets the vimps_custom_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501


        :return: The vimps_custom_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :rtype: GuaranteedSimulationServiceVimpsCustomPricingPackage
        """
        return self._vimps_custom_pricing_package

    @vimps_custom_pricing_package.setter
    def vimps_custom_pricing_package(self, vimps_custom_pricing_package):
        """Sets the vimps_custom_pricing_package of this GuaranteedSimulationServicePricingPackage.


        :param vimps_custom_pricing_package: The vimps_custom_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :type: GuaranteedSimulationServiceVimpsCustomPricingPackage
        """

        self._vimps_custom_pricing_package = vimps_custom_pricing_package

    @property
    def vimps_sov_pricing_package(self):
        """Gets the vimps_sov_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501


        :return: The vimps_sov_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :rtype: GuaranteedSimulationServiceVimpsSOVPricingPackage
        """
        return self._vimps_sov_pricing_package

    @vimps_sov_pricing_package.setter
    def vimps_sov_pricing_package(self, vimps_sov_pricing_package):
        """Sets the vimps_sov_pricing_package of this GuaranteedSimulationServicePricingPackage.


        :param vimps_sov_pricing_package: The vimps_sov_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :type: GuaranteedSimulationServiceVimpsSOVPricingPackage
        """

        self._vimps_sov_pricing_package = vimps_sov_pricing_package

    @property
    def vimps_reach_pricing_package(self):
        """Gets the vimps_reach_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501


        :return: The vimps_reach_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :rtype: GuaranteedSimulationServiceVimpsReachPricingPackage
        """
        return self._vimps_reach_pricing_package

    @vimps_reach_pricing_package.setter
    def vimps_reach_pricing_package(self, vimps_reach_pricing_package):
        """Sets the vimps_reach_pricing_package of this GuaranteedSimulationServicePricingPackage.


        :param vimps_reach_pricing_package: The vimps_reach_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :type: GuaranteedSimulationServiceVimpsReachPricingPackage
        """

        self._vimps_reach_pricing_package = vimps_reach_pricing_package

    @property
    def slots_pricing_package(self):
        """Gets the slots_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501


        :return: The slots_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :rtype: GuaranteedSimulationServiceSlotsPricingPackage
        """
        return self._slots_pricing_package

    @slots_pricing_package.setter
    def slots_pricing_package(self, slots_pricing_package):
        """Sets the slots_pricing_package of this GuaranteedSimulationServicePricingPackage.


        :param slots_pricing_package: The slots_pricing_package of this GuaranteedSimulationServicePricingPackage.  # noqa: E501
        :type: GuaranteedSimulationServiceSlotsPricingPackage
        """

        self._slots_pricing_package = slots_pricing_package

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuaranteedSimulationServicePricingPackage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GuaranteedSimulationServicePricingPackage):
            return True

        return self.to_dict() != other.to_dict()
