# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_api.configuration import Configuration


class GuaranteedSimulationServicePackageSelector(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'int',
        'package_name': 'str',
        'package_ids': 'list[int]',
        'ad_place_types': 'list[GuaranteedSimulationServiceAdPlaceType]',
        'device_types': 'list[GuaranteedSimulationServiceDeviceType]',
        'ad_types': 'list[GuaranteedSimulationServiceAdType]',
        'number_results': 'int',
        'start_index': 'int'
    }

    attribute_map = {
        'account_id': 'accountId',
        'package_name': 'packageName',
        'package_ids': 'packageIds',
        'ad_place_types': 'adPlaceTypes',
        'device_types': 'deviceTypes',
        'ad_types': 'adTypes',
        'number_results': 'numberResults',
        'start_index': 'startIndex'
    }

    def __init__(self, account_id=None, package_name=None, package_ids=None, ad_place_types=None, device_types=None, ad_types=None, number_results=10, start_index=1, local_vars_configuration=None):  # noqa: E501
        """GuaranteedSimulationServicePackageSelector - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._package_name = None
        self._package_ids = None
        self._ad_place_types = None
        self._device_types = None
        self._ad_types = None
        self._number_results = None
        self._start_index = None
        self.discriminator = None

        self.account_id = account_id
        self.package_name = package_name
        self.package_ids = package_ids
        self.ad_place_types = ad_place_types
        self.device_types = device_types
        self.ad_types = ad_types
        self.number_results = number_results
        self.start_index = start_index

    @property
    def account_id(self):
        """Gets the account_id of this GuaranteedSimulationServicePackageSelector.  # noqa: E501

        <div lang=\"ja\">検索条件 : アカウントID</div> <div lang=\"en\">Search Condition: Account ID</div>   # noqa: E501

        :return: The account_id of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GuaranteedSimulationServicePackageSelector.

        <div lang=\"ja\">検索条件 : アカウントID</div> <div lang=\"en\">Search Condition: Account ID</div>   # noqa: E501

        :param account_id: The account_id of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and account_id is None:  # noqa: E501
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def package_name(self):
        """Gets the package_name of this GuaranteedSimulationServicePackageSelector.  # noqa: E501

        <div lang=\"ja\">検索条件 : 商品名</div> <div lang=\"en\">Search Condition: Package name</div>   # noqa: E501

        :return: The package_name of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this GuaranteedSimulationServicePackageSelector.

        <div lang=\"ja\">検索条件 : 商品名</div> <div lang=\"en\">Search Condition: Package name</div>   # noqa: E501

        :param package_name: The package_name of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :type: str
        """

        self._package_name = package_name

    @property
    def package_ids(self):
        """Gets the package_ids of this GuaranteedSimulationServicePackageSelector.  # noqa: E501


        :return: The package_ids of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :rtype: list[int]
        """
        return self._package_ids

    @package_ids.setter
    def package_ids(self, package_ids):
        """Sets the package_ids of this GuaranteedSimulationServicePackageSelector.


        :param package_ids: The package_ids of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :type: list[int]
        """

        self._package_ids = package_ids

    @property
    def ad_place_types(self):
        """Gets the ad_place_types of this GuaranteedSimulationServicePackageSelector.  # noqa: E501

        <div lang=\"ja\">検索条件 : 掲載面</div> <div lang=\"en\">Search Condition: Ad placements</div>   # noqa: E501

        :return: The ad_place_types of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :rtype: list[GuaranteedSimulationServiceAdPlaceType]
        """
        return self._ad_place_types

    @ad_place_types.setter
    def ad_place_types(self, ad_place_types):
        """Sets the ad_place_types of this GuaranteedSimulationServicePackageSelector.

        <div lang=\"ja\">検索条件 : 掲載面</div> <div lang=\"en\">Search Condition: Ad placements</div>   # noqa: E501

        :param ad_place_types: The ad_place_types of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :type: list[GuaranteedSimulationServiceAdPlaceType]
        """

        self._ad_place_types = ad_place_types

    @property
    def device_types(self):
        """Gets the device_types of this GuaranteedSimulationServicePackageSelector.  # noqa: E501

        <div lang=\"ja\">検索条件 : 配信先デバイス</div> <div lang=\"en\">Search Condition: Devices</div>   # noqa: E501

        :return: The device_types of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :rtype: list[GuaranteedSimulationServiceDeviceType]
        """
        return self._device_types

    @device_types.setter
    def device_types(self, device_types):
        """Sets the device_types of this GuaranteedSimulationServicePackageSelector.

        <div lang=\"ja\">検索条件 : 配信先デバイス</div> <div lang=\"en\">Search Condition: Devices</div>   # noqa: E501

        :param device_types: The device_types of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :type: list[GuaranteedSimulationServiceDeviceType]
        """

        self._device_types = device_types

    @property
    def ad_types(self):
        """Gets the ad_types of this GuaranteedSimulationServicePackageSelector.  # noqa: E501

        <div lang=\"ja\">検索条件 : 広告タイプ</div> <div lang=\"en\">Search Condition: Ad Types</div>   # noqa: E501

        :return: The ad_types of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :rtype: list[GuaranteedSimulationServiceAdType]
        """
        return self._ad_types

    @ad_types.setter
    def ad_types(self, ad_types):
        """Sets the ad_types of this GuaranteedSimulationServicePackageSelector.

        <div lang=\"ja\">検索条件 : 広告タイプ</div> <div lang=\"en\">Search Condition: Ad Types</div>   # noqa: E501

        :param ad_types: The ad_types of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :type: list[GuaranteedSimulationServiceAdType]
        """

        self._ad_types = ad_types

    @property
    def number_results(self):
        """Gets the number_results of this GuaranteedSimulationServicePackageSelector.  # noqa: E501

        <div lang=\"ja\">ページの最大件数です。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Maximum number of results to return in this page. This field must be greater than or equal to 1. Also see Entity Limits per operation.</div>   # noqa: E501

        :return: The number_results of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :rtype: int
        """
        return self._number_results

    @number_results.setter
    def number_results(self, number_results):
        """Sets the number_results of this GuaranteedSimulationServicePackageSelector.

        <div lang=\"ja\">ページの最大件数です。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Maximum number of results to return in this page. This field must be greater than or equal to 1. Also see Entity Limits per operation.</div>   # noqa: E501

        :param number_results: The number_results of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                number_results is not None and number_results > 10):  # noqa: E501
            raise ValueError("Invalid value for `number_results`, must be a value less than or equal to `10`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                number_results is not None and number_results < 1):  # noqa: E501
            raise ValueError("Invalid value for `number_results`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number_results = number_results

    @property
    def start_index(self):
        """Gets the start_index of this GuaranteedSimulationServicePackageSelector.  # noqa: E501

        <div lang=\"ja\">ページの先頭のインデックスです。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Index of the first result to return in this page. This field must be greater than or equal to 1.</div>   # noqa: E501

        :return: The start_index of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :rtype: int
        """
        return self._start_index

    @start_index.setter
    def start_index(self, start_index):
        """Sets the start_index of this GuaranteedSimulationServicePackageSelector.

        <div lang=\"ja\">ページの先頭のインデックスです。このフィールドは、1以上を指定する必要があります。</div> <div lang=\"en\">Index of the first result to return in this page. This field must be greater than or equal to 1.</div>   # noqa: E501

        :param start_index: The start_index of this GuaranteedSimulationServicePackageSelector.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                start_index is not None and start_index < 1):  # noqa: E501
            raise ValueError("Invalid value for `start_index`, must be a value greater than or equal to `1`")  # noqa: E501

        self._start_index = start_index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuaranteedSimulationServicePackageSelector):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GuaranteedSimulationServicePackageSelector):
            return True

        return self.to_dict() != other.to_dict()
