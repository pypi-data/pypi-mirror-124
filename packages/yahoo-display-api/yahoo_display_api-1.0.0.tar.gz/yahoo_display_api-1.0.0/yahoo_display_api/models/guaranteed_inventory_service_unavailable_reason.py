# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from yahoo_display_api.configuration import Configuration


class GuaranteedInventoryServiceUnavailableReason(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'str',
        'hours': 'list[int]',
        'genders': 'list[GuaranteedInventoryServiceGender]',
        'ages': 'list[GuaranteedInventoryServiceAge]',
        'devices': 'list[GuaranteedInventoryServiceDeviceType]',
        'audience_categories': 'list[str]'
    }

    attribute_map = {
        'date': 'date',
        'hours': 'hours',
        'genders': 'genders',
        'ages': 'ages',
        'devices': 'devices',
        'audience_categories': 'audienceCategories'
    }

    def __init__(self, date=None, hours=None, genders=None, ages=None, devices=None, audience_categories=None, local_vars_configuration=None):  # noqa: E501
        """GuaranteedInventoryServiceUnavailableReason - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._hours = None
        self._genders = None
        self._ages = None
        self._devices = None
        self._audience_categories = None
        self.discriminator = None

        self.date = date
        self.hours = hours
        self.genders = genders
        self.ages = ages
        self.devices = devices
        self.audience_categories = audience_categories

    @property
    def date(self):
        """Gets the date of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501

        <div lang=\"ja\"> 在庫がない日を表します。 </div> <div lang=\"en\"> Indicates a day when it is out of inventory.  </div> Format: yyyyMMdd   # noqa: E501

        :return: The date of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this GuaranteedInventoryServiceUnavailableReason.

        <div lang=\"ja\"> 在庫がない日を表します。 </div> <div lang=\"en\"> Indicates a day when it is out of inventory.  </div> Format: yyyyMMdd   # noqa: E501

        :param date: The date of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :type: str
        """

        self._date = date

    @property
    def hours(self):
        """Gets the hours of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501

        <div lang=\"ja\"> 予約ができない時間帯のリストです。 </div> <div lang=\"en\"> List of time zones that cannot be reserved. </div>   # noqa: E501

        :return: The hours of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :rtype: list[int]
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this GuaranteedInventoryServiceUnavailableReason.

        <div lang=\"ja\"> 予約ができない時間帯のリストです。 </div> <div lang=\"en\"> List of time zones that cannot be reserved. </div>   # noqa: E501

        :param hours: The hours of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :type: list[int]
        """

        self._hours = hours

    @property
    def genders(self):
        """Gets the genders of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501


        :return: The genders of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :rtype: list[GuaranteedInventoryServiceGender]
        """
        return self._genders

    @genders.setter
    def genders(self, genders):
        """Sets the genders of this GuaranteedInventoryServiceUnavailableReason.


        :param genders: The genders of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :type: list[GuaranteedInventoryServiceGender]
        """

        self._genders = genders

    @property
    def ages(self):
        """Gets the ages of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501


        :return: The ages of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :rtype: list[GuaranteedInventoryServiceAge]
        """
        return self._ages

    @ages.setter
    def ages(self, ages):
        """Sets the ages of this GuaranteedInventoryServiceUnavailableReason.


        :param ages: The ages of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :type: list[GuaranteedInventoryServiceAge]
        """

        self._ages = ages

    @property
    def devices(self):
        """Gets the devices of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501


        :return: The devices of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :rtype: list[GuaranteedInventoryServiceDeviceType]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this GuaranteedInventoryServiceUnavailableReason.


        :param devices: The devices of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :type: list[GuaranteedInventoryServiceDeviceType]
        """

        self._devices = devices

    @property
    def audience_categories(self):
        """Gets the audience_categories of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501

        <div lang=\"ja\"> 在庫がないオーディエンスカテゴリーのターゲットID（カテゴリーコード）のリストです。 </div> <div lang=\"en\"> A list of Audience category target ID (category code) with no inventory. </div>   # noqa: E501

        :return: The audience_categories of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :rtype: list[str]
        """
        return self._audience_categories

    @audience_categories.setter
    def audience_categories(self, audience_categories):
        """Sets the audience_categories of this GuaranteedInventoryServiceUnavailableReason.

        <div lang=\"ja\"> 在庫がないオーディエンスカテゴリーのターゲットID（カテゴリーコード）のリストです。 </div> <div lang=\"en\"> A list of Audience category target ID (category code) with no inventory. </div>   # noqa: E501

        :param audience_categories: The audience_categories of this GuaranteedInventoryServiceUnavailableReason.  # noqa: E501
        :type: list[str]
        """

        self._audience_categories = audience_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GuaranteedInventoryServiceUnavailableReason):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GuaranteedInventoryServiceUnavailableReason):
            return True

        return self.to_dict() != other.to_dict()
