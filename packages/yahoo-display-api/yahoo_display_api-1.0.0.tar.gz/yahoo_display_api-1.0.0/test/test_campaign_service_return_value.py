# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import yahoo_display_api
from yahoo_display_api.models.campaign_service_return_value import CampaignServiceReturnValue  # noqa: E501
from yahoo_display_api.rest import ApiException

class TestCampaignServiceReturnValue(unittest.TestCase):
    """CampaignServiceReturnValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test CampaignServiceReturnValue
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = yahoo_display_api.models.campaign_service_return_value.CampaignServiceReturnValue()  # noqa: E501
        if include_optional :
            return CampaignServiceReturnValue(
                values = [
                    yahoo_display_api.models.campaign_service_value.CampaignServiceValue(
                        campaign = yahoo_display_api.models.campaign.Campaign(
                            account_id = 56, 
                            app_id = '0', 
                            app_name = '0', 
                            budget = yahoo_display_api.models.campaign_service_budget.CampaignServiceBudget(
                                amount = 56, ), 
                            campaign_bidding_strategy = yahoo_display_api.models.campaign_service_campaign_bidding_strategy.CampaignServiceCampaignBiddingStrategy(
                                campaign_bidding_strategy_type = 'AUTO', 
                                max_cpc_bid_value = 56, 
                                max_cpv_bid_value = 56, 
                                max_vcpm_bid_value = 56, 
                                target_cpa_bid_value = 56, ), 
                            campaign_goal = '0', 
                            campaign_id = 56, 
                            campaign_name = '0', 
                            conversion_optimizer = yahoo_display_api.models.campaign_service_conversion_optimizer.CampaignServiceConversionOptimizer(
                                conversion_optimizer_training_status = 'PROCESSING', ), 
                            custom_parameters = yahoo_display_api.models.campaign_service_custom_parameters.CampaignServiceCustomParameters(
                                is_remove = 'TRUE', 
                                parameters = [
                                    yahoo_display_api.models.campaign_service_custom_parameter.CampaignServiceCustomParameter(
                                        key = '0', 
                                        value = '0', )
                                    ], ), 
                            device_os_type = 'ANDROID', 
                            end_date = '0', 
                            feed_id = 56, 
                            is_remove_tracking_url = 'TRUE', 
                            labels = [
                                yahoo_display_api.models.campaign_service_label.CampaignServiceLabel(
                                    color = '0', 
                                    description = '0', 
                                    label_id = 56, 
                                    label_name = '0', )
                                ], 
                            serving_status = 'SERVING', 
                            start_date = '0', 
                            tracking_url = '0', 
                            user_status = 'ACTIVE', 
                            viewable_frequency_cap = yahoo_display_api.models.campaign_service_viewable_frequency_cap.CampaignServiceViewableFrequencyCap(
                                frequency_level = 'CAMPAIGN', 
                                frequency_time_unit = 'DAY', 
                                v_imps = 56, ), 
                            campaign_delivery_type = '0', 
                            created_date = '0', 
                            vendor_name = '0', 
                            conversion_tracker = yahoo_display_api.models.campaign_service_conversion_tracker.CampaignServiceConversionTracker(
                                conversion_group_id = 56, 
                                conversion_tracker_id = 56, 
                                is_remove_conversion_group_id = 'TRUE', 
                                is_remove_conversion_tracker_id = 'TRUE', ), ), 
                        errors = [
                            yahoo_display_api.models.error.Error(
                                code = '0', 
                                message = '0', 
                                details = [
                                    yahoo_display_api.models.error_detail.ErrorDetail(
                                        request_key = '0', 
                                        request_value = '0', )
                                    ], )
                            ], 
                        operation_succeeded = True, )
                    ]
            )
        else :
            return CampaignServiceReturnValue(
        )

    def testCampaignServiceReturnValue(self):
        """Test CampaignServiceReturnValue"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
