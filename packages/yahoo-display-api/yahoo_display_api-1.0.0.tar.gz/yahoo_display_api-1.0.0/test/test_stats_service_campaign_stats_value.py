# coding: utf-8

"""
    Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference

    <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v6/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>   # noqa: E501

    The version of the OpenAPI document: v6
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import yahoo_display_api
from yahoo_display_api.models.stats_service_campaign_stats_value import StatsServiceCampaignStatsValue  # noqa: E501
from yahoo_display_api.rest import ApiException

class TestStatsServiceCampaignStatsValue(unittest.TestCase):
    """StatsServiceCampaignStatsValue unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test StatsServiceCampaignStatsValue
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = yahoo_display_api.models.stats_service_campaign_stats_value.StatsServiceCampaignStatsValue()  # noqa: E501
        if include_optional :
            return StatsServiceCampaignStatsValue(
                campaign_id = 56, 
                campaign_name = '0', 
                stats = yahoo_display_api.models.stats.Stats(
                    imps = 56, 
                    imps_prev = 1.337, 
                    click_cnt = 56, 
                    click_rate = 1.337, 
                    click_rate_prev = 1.337, 
                    cost = 1.337, 
                    avg_cpc = 1.337, 
                    conversions = 56, 
                    conversion_rate = 1.337, 
                    conversions_via_ad_click = 56, 
                    conversion_rate_via_ad_click = 1.337, 
                    all_conversions = 56, 
                    all_conversion_rate = 1.337, 
                    cpa = '0', 
                    conversion_value = '0', 
                    value_per_conversions = '0', 
                    conv_value_per_cost = 1.337, 
                    all_conv_value_per_cost = 1.337, 
                    conv_value_via_ad_click_per_cost = 1.337, 
                    all_conversion_value = '0', 
                    value_per_all_conversions = '0', 
                    conversion_value_via_ad_click = '0', 
                    value_per_conversions_via_ad_click = '0', 
                    cpa_via_ad_click = '0', 
                    all_cpa = '0', 
                    cross_device_conversions = 56, 
                    avg_deliver_rank = 1.337, 
                    measured_imps = 1.337, 
                    total_vimps = 56, 
                    measured_imps_rate = 1.337, 
                    vimps = 56, 
                    viewable_imps_rate = 1.337, 
                    in_view_rate = 1.337, 
                    viewable_clicks = 1.337, 
                    in_view_click_cnt = 56, 
                    viewable_click_rate = 1.337, 
                    in_view_click_rate = 1.337, 
                    paid_video_views = 56, 
                    paid_video_view_rate = 1.337, 
                    average_cpv = 1.337, 
                    video_views = 56, 
                    video_views_to25 = 56, 
                    video_views_to50 = 56, 
                    video_views_to75 = 56, 
                    video_views_to95 = 56, 
                    video_views_to100 = 56, 
                    video_views_to3_sec = 56, 
                    video_views_to10_sec = 56, 
                    average_rate_video_viewed = 1.337, 
                    average_duration_video_viewed = 1.337, 
                    video_view_through_rate = 1.337, 
                    impression_share = 1.337, 
                    budget_impression_share_lost_rate = 1.337, 
                    rank_impression_share_lost_rate = 1.337, 
                    view_through_conversions = 56, 
                    avg_cpm = 1.337, 
                    avg_vcpm = 1.337, )
            )
        else :
            return StatsServiceCampaignStatsValue(
        )

    def testStatsServiceCampaignStatsValue(self):
        """Test StatsServiceCampaignStatsValue"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
