Metadata-Version: 2.1
Name: pycapacity
Version: 1.0.2
Summary: A Real-time capable robot capacity calculation module
Home-page: https://gitlab.inria.fr/askuric/pycapacity
Author: Antun Skuric
Author-email: antun.skuric@inria.fr
License: MIT
Platform: UNKNOWN
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: scipy


# Python real-time capable robot task-space capacity calculation module

![](https://gitlab.inria.fr/askuric/polytope_vertex_search/-/raw/master/images/rviz_screenshot_2020.png)

This module provides a framework for the generic robot capacity calculation called in a form of a python module `pycapacity`:

All you need to do to install it is:
```shell
pip install pycapacity
```
And include it to your python project
```python
import pycapacity
```

This module integrates several velocity, force and acceleration capacity calculation functions based on ellipsoids:
- Velocity (manipulability) ellipsoid 
- Acceleration (dynamic manipulability) ellipsoid 
- Force ellipsoid

And polytopes: 
- Velocity polytope 
- Acceleration polytope
- Force polytope 
- Force polytopes *Minkowski sum and intersection *

The force polytope functions have been implemented according to the paper:

[**On-line force capability evaluation based on efficient polytope vertex search**](https://arxiv.org/abs/2011.05226)<br> 
by Antun Skuric, Vincent Padois and David Daney<br> Published on ICRA2021

And the velocity and acceleration polytopes are resolved using the *Hyper-plane shifting method*:<br>
[**Characterization of Parallel Manipulator Available Wrench Set Facets**](http://www.lirmm.fr/krut/pdf/2010_gouttefarde_ark-0602650368/2010_gouttefarde_ark.pdf)<br>
by Gouttefarde M., Krut S. <br>In: Lenarcic J., Stanisic M. (eds) Advances in Robot Kinematics: Motion in Man and Machine. Springer, Dordrecht (2010)

## Module functions

- [`acceleration_ellipsoid`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-acceleration_ellipsoid): acceleration ellipsoid calculation (dynamic manipulability ellipsoid)
- [`acceleration_polytope`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-acceleration_polytope): Acceleration polytope calculating function
- [`acceleration_polytope_withfaces`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-acceleration_polytope_withfaces): Acceleration polytope calculating function
- [`force_ellipsoid`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-force_ellipsoid): force manipulability ellipsoid calculation
- [`force_polytope`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-force_polytope): Force polytope representing the capacities of the two robots in a certain configuration
- [`force_polytope_intersection`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-force_polytope_intersection): Force polytope representing the intersection of the capacities of the two robots in certain configurations.
- [`force_polytope_intersection_withfaces`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-force_polytope_intersection_withfaces): Force polytope representing the intersection of the capacities of the two robots in certain configurations.
- [`force_polytope_sum_withfaces`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-force_polytope_sum_withfaces): Force polytope representing the minkowski sum of the capacities of the two robots in certain configurations.
- [`force_polytope_withfaces`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-force_polytope_withfaces): Force polytope representing the capacities of the two robots in a certain configuration.
- [`hyper_plane_shift_method`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-hyper_plane_shift_method): Hyper plane shifting method implementation used to solve problems of a form:
- [`make_2d`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-make_2d): Take a list of 3D(cooplanar) points and make it 2D
- [`make_unique`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-make_unique): Remove repetitions of columns
- [`order_index`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-order_index): Order clockwise 2D points
- [`velocity_ellipsoid`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-velocity_ellipsoid): velocity manipulability ellipsoid calculation
- [`velocity_polytope`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-velocity_polytope): Velocity polytope calculating function
- [`velocity_polytope_withfaces`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-velocity_polytope_withfaces): Velocity polytope calculating function, with faces


Algorithms:
- [`hyper_plane_shift_method`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/docs/pycapacity.md#function-hyper_plane_shift_method): Hyper plane shifting method implementation used to solve problems of a form:
---

## Code examples


```python
"""
A simple example program 3d force polytope 
evaluation of a randomised 6dof robot 
"""
from pycapacity import force_polytope_withfaces as polytope


m = 3 # 3d forces
n = 6 # robot dof

J = np.array(np.random.rand(m,n)) # random jacobian matrix

t_min = np.ones((n,1))  # joint torque limits max and min
t_max = -np.ones((n,1))

vertices, faces = polytope(J,t_min, t_max) # calculate the polytope vertices and faces
```

See [`demo_notebook.ipynb`](https://gitlab.inria.fr/askuric/pycapacity/-/blob/master/demo_notebook.ipynb) for one example use case of the module.

