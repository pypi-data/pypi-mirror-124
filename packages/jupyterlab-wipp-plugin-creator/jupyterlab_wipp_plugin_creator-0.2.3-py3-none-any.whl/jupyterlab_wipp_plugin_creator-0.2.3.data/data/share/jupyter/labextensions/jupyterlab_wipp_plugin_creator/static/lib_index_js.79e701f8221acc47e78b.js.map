{"version":3,"file":"lib_index_js.79e701f8221acc47e78b.js","mappings":";;;;;;;;;;;;;;;;AAAyC;AACiB;AACnD,+BAA+B,mDAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,yEAAwB;AAClD;AACA;AACA;AACA,gCAAgC,iCAAiC;AACjE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9BO;AACP;AACA;;;;;;;;;;;;;;;;;;;ACF+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AClCoD;AACU;AACf;AACK;AACM;AACf;AACH;AACxC,qBAAqB,8DAAO;AAC5B;AACA,YAAY,uDAAO;AACnB,CAAC;AACD;AACA;AACA;AACA;AACA,eAAe,wEAAmB,EAAE,8DAAS,EAAE,yDAAQ;AACvD;AACA;AACA;AACA;AACA,6BAA6B,yEAAwB;AACrD,2BAA2B,yEAAwB;AACnD;AACA,SAAS;AACT;AACA,4BAA4B,oDAAc;AAC1C;AACA;AACA;AACA,wCAAwC,WAAW;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD;AACA,+BAA+B,yEAAwB;AACvD,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;AC3DgC;AACE;AACF;AACf;AACU;AAC1C,6BAA6B,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,wDAAW;AACnD,wBAAwB,mDAAM;AAC9B;AACA;AACA;AACA;AACA;AACA,uBAAuB,mDAAU;AACjC,kCAAkC,+DAAgB;AAClD;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,wBAAwB;AACxB;AACA,yBAAyB,kEAAU,WAAW,oBAAoB;AAClE;AACA,oCAAoC,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,oDAAU;AACtB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AClEA,iEAAe,8ZAA8Z","sources":["webpack://jupyterlab_wipp_plugin_creator/./lib/addedFilesWidget.js","webpack://jupyterlab_wipp_plugin_creator/./lib/extensionConstants.js","webpack://jupyterlab_wipp_plugin_creator/./lib/handler.js","webpack://jupyterlab_wipp_plugin_creator/./lib/index.js","webpack://jupyterlab_wipp_plugin_creator/./lib/sidebar.js","webpack://jupyterlab_wipp_plugin_creator/./style/logo.svg"],"sourcesContent":["import { Widget } from '@lumino/widgets';\nimport { ExtensionConstants } from './extensionConstants';\nexport class AddedFilesWidget extends Widget {\n    constructor(state) {\n        super();\n        this._addedFileNames = [];\n        this._state = state;\n        this._addedFileDiv = document.createElement('p');\n        this.node.appendChild(this._addedFileDiv);\n        let button = document.createElement('button');\n        button.innerHTML = 'Update list of files';\n        button.onclick = () => this.update();\n        this.node.appendChild(button);\n        this.update();\n    }\n    onUpdateRequest(msg) {\n        this._state.fetch(ExtensionConstants.dbkey).then(response => {\n            this._addedFileNames = response;\n            let text = 'Added Files: <br>';\n            if (this._addedFileNames) {\n                for (let i = 0; i < this._addedFileNames.length; i++) {\n                    text += this._addedFileNames[i] + \"<br>\";\n                }\n            }\n            this._addedFileDiv.innerHTML = text;\n        });\n    }\n    getValue() {\n        return this._addedFileNames;\n    }\n}\n","export class ExtensionConstants {\n}\nExtensionConstants.dbkey = 'wipp-plugin-creator:data';\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab_wipp_plugin_creator', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ILabShell } from '@jupyterlab/application';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { ExtensionConstants } from './extensionConstants';\nimport { CreatorSidebar } from './sidebar';\nimport logoSvg from '../style/logo.svg';\nconst logoIcon = new LabIcon({\n    name: 'wipp-plugin-builder:logo',\n    svgstr: logoSvg\n});\nlet filepaths = [];\nconst plugin = {\n    id: 'jupyterlab_wipp_plugin_creator:plugin',\n    autoStart: true,\n    requires: [IFileBrowserFactory, ILabShell, IStateDB],\n    activate: (app, factory, labShell, state) => {\n        // Initialzie dbkey if not in IStateDB\n        state.list().then(response => {\n            let keys = response.ids;\n            if (keys.indexOf(ExtensionConstants.dbkey) === -1) {\n                state.save(ExtensionConstants.dbkey, filepaths);\n            }\n        });\n        // Create the WIPP sidebar panel\n        const sidebar = new CreatorSidebar(state);\n        sidebar.id = 'wipp-labextension:plugin';\n        sidebar.title.icon = logoIcon;\n        sidebar.title.caption = 'WIPP Plugin Creator';\n        labShell.add(sidebar, 'left', { rank: 200 });\n        // Add context menu command, right click file browser to register marked files to be converted to plugin\n        var filepath = '';\n        const addFileToPluginContextMenuCommandID = 'wipp-plugin-creator-add-context-menu';\n        app.commands.addCommand(addFileToPluginContextMenuCommandID, {\n            label: 'Add to the new WIPP plugin',\n            iconClass: 'jp-MaterialIcon jp-AddIcon',\n            isVisible: () => ['notebook', 'file'].includes(factory.tracker.currentWidget.selectedItems().next().type),\n            execute: () => {\n                filepath = factory.tracker.currentWidget.selectedItems().next().path;\n                state.fetch(ExtensionConstants.dbkey).then(response => {\n                    filepaths = response;\n                    if (filepaths.indexOf(filepath) === -1) {\n                        filepaths.push(filepath);\n                    }\n                    else {\n                        console.log(`${filepath} was already added`);\n                    }\n                    state.save(ExtensionConstants.dbkey, filepaths);\n                });\n            }\n        });\n        // Add command to context menu\n        const selectorItem = '.jp-DirListing-item[data-isdir]';\n        app.contextMenu.addItem({\n            command: addFileToPluginContextMenuCommandID,\n            selector: selectorItem\n        });\n    }\n};\nexport default plugin;\n","import { Widget, PanelLayout } from '@lumino/widgets';\nimport { SchemaForm } from '@deathbeds/jupyterlab-rjsf';\nimport { AddedFilesWidget } from './addedFilesWidget';\nimport { requestAPI } from './handler';\nimport schemaForm from \"./WippPluginSchema.json\";\nexport class CreatorSidebar extends Widget {\n    /**\n     * Create a new WIPP plugin creator sidebar.\n     */\n    constructor(state) {\n        super();\n        this.addClass('wipp-pluginCreatorSidebar');\n        // Define Widget layout\n        let layout = (this.layout = new PanelLayout());\n        let title = new Widget();\n        let h1 = document.createElement('h1');\n        h1.innerText = \"Create New Plugin\";\n        title.node.appendChild(h1);\n        layout.addWidget(title);\n        //necessary or plugin will not activate\n        const schema = schemaForm;\n        this._addFileWidget = new AddedFilesWidget(state);\n        layout.addWidget(this._addFileWidget);\n        const formData = {\n            name: \"My Plugin\",\n            version: \"0.1.0\",\n            requirements: [''],\n            inputs: [{}],\n            outputs: [{}],\n        };\n        this._form = new SchemaForm(schema, { formData: formData });\n        layout.addWidget(this._form);\n        const runButtonWidget = new Widget();\n        const runButton = document.createElement('button');\n        runButton.className = 'run';\n        runButton.onclick = () => {\n            this.submit();\n        };\n        runButton.innerText = \"Create Plugin\";\n        runButtonWidget.node.appendChild(runButton);\n        layout.addWidget(runButtonWidget);\n    }\n    //Sidebar constructor ends\n    submit() {\n        //Create API request on submit\n        let formValue = this._form.getValue();\n        let request = {\n            formdata: formValue.formData,\n            addedfilepaths: this._addFileWidget.getValue()\n        };\n        if (formValue.errors !== null) {\n            var fullRequest = {\n                method: 'POST',\n                body: JSON.stringify(request)\n            };\n            requestAPI('createplugin', fullRequest)\n                .then(response => {\n                console.log('POST request sent.');\n            })\n                .catch(() => console.log('There is an error making POST CreatePlugin API request.'));\n        }\n        else {\n            console.log(`Schema form data returns with an error`);\n            console.log(formValue.errors);\n        }\n    }\n}\n","export default \"<svg width=\\\"1792\\\" height=\\\"1792\\\" viewBox=\\\"0 0 1792 1792\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n    <path class=\\\"jp-icon3 jp-icon-selectable\\\" fill=\\\"#616161\\\" d=\\\"M896 1629l640-349v-636l-640 233v752zm-64-865l698-254-698-254-698 254zm832-252v768q0 35-18 65t-49 47l-704 384q-28 16-61 16t-61-16l-704-384q-31-17-49-47t-18-65v-768q0-40 23-73t61-47l704-256q22-8 44-8t44 8l704 256q38 14 61 47t23 73z\\\"/>\\n</svg> \";"],"names":[],"sourceRoot":""}