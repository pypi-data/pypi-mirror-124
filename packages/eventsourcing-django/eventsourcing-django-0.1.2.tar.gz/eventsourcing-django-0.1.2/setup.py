# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['eventsourcing_django', 'eventsourcing_django.migrations']

package_data = \
{'': ['*']}

install_requires = \
['Django>=3.0.0,<4.0.0', 'eventsourcing>=9.1.0,<10.0.0']

setup_kwargs = {
    'name': 'eventsourcing-django',
    'version': '0.1.2',
    'description': 'Python package for eventsourcing with Django.',
    'long_description': '# Event Sourcing with Django\n\nThis package is a Django app that uses the\n[Django ORM](https://www.djangoproject.com/)\nas persistence infrastructure for the\n[Python eventsourcing library](https://github.com/johnbywater/eventsourcing).\n\n\n## Installation\n\nInstall using `pip`. It is recommended to install Python\npackages into a Python virtual environment.\n\n    $ pip install eventsourcing_django\n\n\nAdd `\'eventsourcing_django\'` to your Django project\'s `INSTALLED_APPS` setting.\n\n    INSTALLED_APPS = [\n        ...\n        \'eventsourcing_django\',\n    ]\n\n\nRun Django\'s `manage.py migrate` command.\n\n    $ python manage.py migrate eventsourcing_django\n\n\n## Aggregates and application\n\nYou can develop event-sourced aggregates and applications\nindependently of persistence infrastructure. Please refer\nto the [core library docs](https://eventsourcing.readthedocs.io/)\nfor more information.\n\nThe example below defines an event-sourced aggregate `World`. It\nwill be created with a `history` attribute. The command method\n`make_it_so()` triggers an event `SomethingHappened`\nthat appends the command argument `what` to the `history`.\n\n```python\nfrom eventsourcing.domain import Aggregate, event\n\n\nclass World(Aggregate):\n    def __init__(self):\n        self.history = []\n\n    @event("SomethingHappened")\n    def make_it_so(self, what):\n        self.history.append(what)\n```\n\nThe application class `Universe` has three methods. The method `create_world()`\ncreates a new `World` aggregate. The method `make_it_so()` calls `make_it_so()`\non an existing `World` aggregate. The method `get_world_history()`\nreturns the current `history` value of an existing `World` aggregate.\n\nAutomatic snapshotting is enabled by using the `snapshotting_intervals`\nattribute of the application class.\n\n```python\nfrom eventsourcing.application import Application\n\nclass Universe(Application):\n    snapshotting_intervals = {\n        World: 5,  # automatic snapshotting\n    }\n\n    def create_world(self):\n        world = World()\n        self.save(world)\n        return world.id\n\n    def make_it_so(self, world_id, what):\n        world = self.repository.get(world_id)\n        world.make_it_so(what)\n        self.save(world)\n\n    def get_world_history(self, world_id):\n        world = self.repository.get(world_id)\n        return world.history\n```\n\n\n## Initialize application object\n\nTo use the Django ORM as the application\'s persistence infrastructure,\nyou must set the application\'s environment variable\n`INFRASTRUCTURE_FACTORY` to `eventsourcing_django.factory:Factory`.\nEnvironment variables can be set in the environment, or set on the\napplication class, or passed in when constructing the application\nobject as seen below.\n\n```python\n# Construct the application.\napp = Universe(env={\n    "INFRASTRUCTURE_FACTORY": "eventsourcing_django.factory:Factory",\n    "COMPRESSOR_TOPIC": "zlib",\n})\n```\n\nThe application object brings together the domain model and the\npersistence infrastructure, and provides an interface for views and forms.\n\nYou may wish to construct the application object on a signal\nwhen the Django project is "ready". You can use the `ready()`\nmethod of the `AppConfig` class in the `apps.py` module of a\nDjango app.\n\nThe application can use other environment variables supported by\nthe library, for example to enable application-level compression\nof stored events, set `COMPRESSOR_TOPIC`. You may wish to\narrange for settings to be defined in and used from your Django\nproject\'s `settings.py`.\n\n\n## Views and forms\n\nAfter migrating the database and constructing the application object,\nthe application object\'s methods can be called. The application object\'s\nmethods may be called from Django view and form classes.\n\n```python\n# Call application command methods.\nworld_id = app.create_world()\n\napp.make_it_so(world_id, "dinosaurs")\napp.make_it_so(world_id, "trucks")\napp.make_it_so(world_id, "internet")\napp.make_it_so(world_id, "covid")\n\n# Call application query methods.\nhistory = app.get_world_history(world_id)\nassert history == ["dinosaurs", "trucks", "internet", "covid"]\n```\n\nWe can see the application is using the Django ORM infrastructure,\nand that snapshotting and compression are enabled, by checking the\nattributes of the application object.\n\n```python\nfrom eventsourcing_django.factory import Factory\nfrom eventsourcing_django.recorders import DjangoAggregateRecorder\nfrom eventsourcing_django.recorders import DjangoApplicationRecorder\nfrom eventsourcing_django.models import StoredEventRecord\nfrom eventsourcing_django.models import SnapshotRecord\nimport zlib\n\nassert isinstance(app.factory, Factory)\nassert isinstance(app.events.recorder, DjangoApplicationRecorder)\nassert isinstance(app.snapshots.recorder, DjangoAggregateRecorder)\nassert issubclass(app.events.recorder.model, StoredEventRecord)\nassert issubclass(app.snapshots.recorder.model, SnapshotRecord)\nassert app.mapper.compressor == zlib\n```\n\nWe can see automatic snapshotting is working, by looking\nin the snapshots store.\n\n```python\nsnapshots = list(app.snapshots.get(world_id))\nassert len(snapshots) == 1\n```\n\nFor more information, please refer to the Python\n[eventsourcing](https://github.com/johnbywater/eventsourcing) library\nand the [Django](https://www.djangoproject.com/) project.\n',
    'author': 'John Bywater',
    'author_email': 'john.bywater@appropriatesoftware.net',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://eventsourcing.readthedocs.io/',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
