{"version":3,"file":"744.index.js","mappings":"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","sources":["webpack://nbvv/webpack/universalModuleDefinition","webpack://nbvv/./node_modules/@aics/volume-viewer/es/FuseWorker.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, function() {\nreturn ","var channels = [];\nvar npx = 0; // sum over [{chIndex, rgbColor}]\n// fusionType = \"m\" for maximum, \"a\" for average\n\nfunction fuseWorker(combination, fusionType) {\n  //console.log(\"BEGIN WORK\");\n  // explore some faster ways to fuse here...\n  var ar, ag, ab, aa, c, lr, lg, lb, la, opacity, channeldata, lut, idx;\n  var x, i, cx, fx;\n  var cl = combination.length;\n  var npx4 = npx * 4; // init the rgba image\n  // var fused4 = new Uint32Array(this.fused.buffer);\n  // for (x = 0; x < npx; x+=1) {\n  //   fused4[x] = 0xff000000;\n  // }\n\n  for (x = 0; x < npx4; x += 4) {\n    self.fused[x + 0] = 0;\n    self.fused[x + 1] = 0;\n    self.fused[x + 2] = 0;\n    self.fused[x + 3] = 255;\n  }\n\n  var value = 0;\n\n  if (fusionType === \"m\") {\n    for (i = 0; i < cl; ++i) {\n      c = combination[i];\n      idx = c.chIndex;\n\n      if (!channels[idx]) {\n        continue;\n      }\n\n      if (c.rgbColor) {\n        channeldata = channels[idx];\n        lut = c.lut;\n\n        for (cx = 0, fx = 0; cx < npx; cx += 1, fx += 4) {\n          value = channeldata[cx];\n          lr = lut[value * 4 + 0]; // 0..255\n\n          lg = lut[value * 4 + 1]; // 0..255\n\n          lb = lut[value * 4 + 2]; // 0..255\n\n          la = lut[value * 4 + 3]; // 0..255\n\n          opacity = la / 255.0; // what if rgb*opacity > 255?\n\n          ar = self.fused[fx + 0];\n          self.fused[fx + 0] = Math.max(ar, lr * opacity);\n          ag = self.fused[fx + 1];\n          self.fused[fx + 1] = Math.max(ag, lg * opacity);\n          ab = self.fused[fx + 2];\n          self.fused[fx + 2] = Math.max(ab, lb * opacity);\n          aa = self.fused[fx + 3];\n          self.fused[fx + 3] = Math.max(aa, la);\n        }\n      }\n    }\n  } else if (fusionType === \"a\") {\n    // count\n    var nchans = 0;\n\n    for (i = 0; i < cl; ++i) {\n      c = combination[i];\n      idx = c.chIndex;\n\n      if (!channels[idx] || !c.rgbColor) {\n        continue;\n      }\n\n      nchans++;\n    }\n\n    for (i = 0; i < cl; ++i) {\n      c = combination[i];\n      idx = c.chIndex;\n\n      if (!channels[idx] || !c.rgbColor) {\n        continue;\n      }\n\n      if (c.rgbColor) {\n        channeldata = channels[idx];\n        lut = c.lut;\n\n        for (cx = 0, fx = 0; cx < npx; cx += 1, fx += 4) {\n          value = channeldata[cx];\n          lr = lut[value * 4 + 0];\n          lg = lut[value * 4 + 1];\n          lb = lut[value * 4 + 2];\n          la = lut[value * 4 + 3];\n          opacity = la / 255.0; // what if rgb*opacity > 255?\n\n          self.fused[fx + 0] += lr * opacity / nchans;\n          self.fused[fx + 1] += lg * opacity / nchans;\n          self.fused[fx + 2] += lb * opacity / nchans;\n          self.fused[fx + 3] += la / nchans;\n        }\n      }\n    }\n  } //console.log(\"END WORK\");\n\n}\n\nself.onmessage = function (e) {\n  if (e.data.msgtype === \"channeldata\") {\n    channels[e.data.channelindex] = new Uint8Array(e.data.data);\n\n    if (npx === 0) {\n      npx = channels[e.data.channelindex].length;\n    }\n\n    if (!self.fused) {\n      self.fused = new Uint8Array(npx * 4);\n      self.workerindex = e.data.workerindex;\n    }\n  } else if (e.data.msgtype === \"fuse\") {\n    // we got the starting message!\n    fuseWorker(e.data.combination, e.data.fuseMethod); // transfer result data back to caller, and tell caller who is reporting back\n\n    var results = {\n      data: self.fused,\n      workerindex: self.workerindex\n    };\n    postMessage(results, [results.data.buffer]); // reallocate self.fused, now that ownership of the underlying array has been passed back\n\n    self.fused = new Uint8Array(npx * 4);\n  }\n};"],"names":["root","factory","exports","module","define","amd","a","i","self","channels","npx","onmessage","e","data","msgtype","channelindex","Uint8Array","length","fused","workerindex","combination","fusionType","ar","ag","ab","aa","c","lr","lg","lb","la","opacity","channeldata","lut","idx","x","cx","fx","cl","npx4","value","chIndex","rgbColor","Math","max","nchans","fuseWorker","fuseMethod","results","postMessage","buffer"],"sourceRoot":""}