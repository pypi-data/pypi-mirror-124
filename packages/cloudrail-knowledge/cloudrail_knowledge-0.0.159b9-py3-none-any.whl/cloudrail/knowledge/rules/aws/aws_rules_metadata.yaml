templates:
- public_access_security_groups_port_rule_name_template: Ensure no used security groups
    allow ingress from 0.0.0.0/0 or ::/0 to port {} ({})
- public_access_security_groups_port_rule_description_template: Exposing resources
    to the Internet is generally inadvisable, especially on a known port like {} ({}).
- public_access_security_groups_port_rule_logic_template: Cloudrail will identify
    all security groups in use. For each one, it will determine if it has {} ({})
    exposed to 0.0.0.0/0. Then, it will identify where the security group is in use.
    If it's not in use, the security group will be ignored. For each resource the
    security group is used with, Cloudrail will determine the subnet it is located
    in. It will then review the routing table to verify that the subnet is accessible
    from the Internet, and that the NACL associated with the subnet has the aforementioned
    port open. This ensures the security group is only flagged if there's a real exposure.
- public_access_security_groups_port_rule_console_remediation_steps: Follow the guide
    at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules>
    to update the security group inbound rule. Set the Source parameter to a value
    other than 0.0.0.0/0 or ::/0 for the {} port.
- public_access_security_groups_port_rule_iac_remediation_steps: For the resource
    aws_security_group, update in-line ingress rules or resource aws_security_group_rule
    to set cidr_blocks argument to a value other than 0.0.0.0/0 or ::/0 for the {}
    port.
- vpc_endpoint_gateway_is_not_used_rule_name_template: Ensure VPC Endpoint for {}
    is enabled in all VPCs
- vpc_endpoint_gateway_is_not_used_rule_description_template: A best practice is to
    enforce the use of VPC Endpoints to avoid the need of sending data destined to
    {} through the internet.
- vpc_endpoint_gateway_is_not_used_rule_human_readable_logic_template: Cloudrail will
    identify all {0} and the regions where they exist. For each region, it will check
    that there is a VPC Endpoint for {1} created and which VPC it's associated to,
    it will then check all VPCs to identify which ones are not associated to a VPC
    Endpoint for {1} and will flag it as non-compliant, also if there were no VPC
    Endpoints in the region but there was a {2} it will flag all VPCs as non-compliant.
    It will check that there is at least one resource using an ENI to avoid alerting
    on unused VPCs.
- vpc_endpoint_gateway_is_not_used_rule_console_remediation_steps: Follow the guide
    at <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-s3.html> to
    configure {} endpoint for the VPC.
- vpc_endpoint_gateway_is_not_used_rule_iac_remediation_steps: Create the aws_vpc_endpoint
    resource for the corresponding VPC to associate the {} endpoint. Create the aws_vpc_endpoint_route_table_association
    resource in order to populate the route table with routes to the {} service.
- vpc_endpoint_route_table_exposure_rule_name_template: Ensure VPC Endpoint for {}
    is enabled in all route tables in use in a VPC
- vpc_endpoint_route_table_exposure_rule_description_template: A best practice is
    to enforce the use of VPC Endpoints to avoid the need of sending data destined
    to {} through the internet. Cloudrail will identify misconfigurations and exposure
    by checking if VPC Endpoint Gateways are in use or not, by reviewing VPC Endpoint
    and route tables in all regions.
- vpc_endpoint_route_table_exposure_rule_human_readable_logic_template: Cloudrail
    will identify all {0} and the regions where they exist. For each region, it will
    check that there is a VPC Endpoint for {1} created, if so it will check which
    route tables it's associated to, it will then check all route tables to identify
    which ones are not associated to a VPC Endpoint for {1} and will flag them as
    non-compliant. It will check the routing tables in each VPC to avoid alerting
    on subnets that don't have internet access.
- vpc_endpoint_route_table_exposure_rule_console_remediation_steps: Follow the guide
    at <https://docs.aws.amazon.com/vpc/latest/userguide/vpce-gateway.html#vpc-endpoints-routing>
    to configure the route tables to route {} service traffic via the endpoint.
- vpc_endpoint_route_table_exposure_rule_iac_remediation_steps: For the aws_vpc_endpoint_route_table_association
    resource, set the route_table_id and vpc_endpoint_id arguments for the {} service.
- policy_wildcard_violation_rule_name_template: Ensure use of {} policy, and no action
    wildcards are being used
- policy_wildcard_violation_rule_description_template: Using wildcard actions may
    inadvertently allow users to take actions you do not want to allow them to do.
    In addition, using a resource policy will provide an additional layer of security.
    It is a best practice to use a resource policy and give specific permissions only.
- policy_wildcard_violation_rule_human_readable_logic_template: Cloudrail will review
    the {} policies being created in your environment or currently in use. If a policy
    is using wildcard actions, or no resource policy configured, Cloudrail will highlight
    it as a violation.
- policy_wildcard_violation_rule_console_remediation_steps: Follow the guide at {}
    to modify {} policy in order to avoid using wildcard actions.
- policy_wildcard_violation_rule_iac_remediation_steps: For the {} resource, modify
    policy argument in order to avoid using wildcard actions.
- iam_account_password_policy_rule_human_readable_logic_template: Cloudrail will review
    your AWS account password policy. {} This rule will only run if there is at least
    one user defined with direct console access (not via SSO).
- vpc_endpoint_exposure_name_template: Ensure VPC Endpoint for {} is enabled in all
    VPCs in use
- vpc_endpoint_exposure_description_template: A best practice is to enforce the use
    of VPC Endpoints to avoid sending data destined to {0} through the internet. Cloudrail
    will identify misconfigurations by checking if VPC Endpoint Interfaces are in
    use or not, by reviewing that an endpoint exists in the VPC. VPC Interface Endpoints
    might not be available in all regions, so the rule checks that if the service
    is running it's configured in all possible VPCs. This rule has potential false
    positives given that not all VPCs require communication with {0}.
- vpc_endpoint_exposure_human_readable_logic_template: For each region, Cloudrail
    will verify if at least one {0} {1} exists, then will also verify that the service
    VPC Endpoint for {0} is available in the region, if so it will check that it's
    configured in all possible VPCs and will flag any non-compliant VPC.
- vpc_endpoint_exposure_console_remediation_steps_template: Create a VPC Endpoint
    for {}, follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html#create-interface-endpoint>.
- vpc_endpoint_exposure_iac_remediation_steps_template: Create a resource aws_vpc_endpoint
    for {} interface, and associate it to the VPC.
- vpc_endpoint_subnet_exposure_name_template: Ensure VPC Endpoint for {} is enabled
    in all Availability Zones in use a VPC
- vpc_endpoint_subnet_exposure_description_template: A best practice is to enforce
    the use of VPC Endpoints to avoid sending data destined to {0} through the internet.
    Cloudrail will identify misconfigurations by checking if VPC Endpoint Interfaces
    are in use or not, by reviewing that an endpoint exists in the VPC. VPC Interface
    Endpoints are not available in all availability zones, also they can be configured
    in just one subnet per availability zone, so the rule checks that if the service
    is running it's configured in at least two availability zones in use and leaves
    the traffic architecture decision to the customer. Additionally, make sure that
    if the application is using the custom hostnames for the service, and if it's
    using default hostnames (I.e. {1}.us-east-2.amazonaws.com) that the application
    is using Amazon DNS and not an internal DNS.
- vpc_endpoint_subnet_exposure_human_readable_logic_template: For each region, Cloudrail
    will verify if at least one {0} {1} exists, then will also verify that the service
    VPC Endpoint for {0} is available in the region and in which availability zones.
    It will also check all subnets in use, and check all subnets that may have an
    endpoint configured. It will then check to see that at least two of the availability
    zones in use have an interface endpoint in them.
- vpc_endpoint_subnet_exposure_console_remediation_steps_template: "For each VPC that\
    \ is currently using VPC endpoints for {}, make sure it\u2019s enabled in one\
    \ subnet for each Availability Zone in use. Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpce-interface.html#create-interface-endpoint>.\
    \ Interface endpoints do have their costs, so if that\u2019s an issue, consider\
    \ using at least two interface endpoints in different availability zones, and\
    \ not just one."
- vpc_endpoint_subnet_exposure_iac_remediation_steps_template: "Locate resource aws_vpc_endpoint\
    \ for {} interface, and make sure that argument subnet_ids contains at least one\
    \ subnet in each Availability Zone in use. Interface endpoints do have their costs,\
    \ so if that\u2019s an issue, consider using at least two interface endpoints\
    \ in different availability zones, and not just one."
- not_car_access_analyzer_validation_name_template: Ensure IAM policies pass Access
    Analyzer policy validation without {0} and {1} issues
- not_car_access_analyzer_validation_description_template: Cloudrail will send all
    of your IAM policies to the AWS Access Analyzer for Policy Validation. Any issues
    found by Access Analyzer at the {0} and {1} severities will be highlighted as
    issues by Cloudrail under this rule.
- not_car_access_analyzer_validation_human_readable_logic_template: Cloudrail will
    identify all IAM policies in your Terraform plan and send them to the Access Analyzer
    policy validation API. Any policies which are found to have "findings" rated {0}
    and {1} will be considered violating.
- not_car_access_analyzer_validation_remediation_steps_template: Review the findings
    and correct them within the policy.

rules_metadata:
- cloud_provider: amazon_web_services
  description: Having the same IAM role for both public and private instances may
    be dangerous. Someone may expand the permissions for the role in order to use
    it in a private workload, not realizing a public workload has the same privileges.
  human_readable_logic: Cloudrail will iterate over all EC2 resources that use IAM
    roles. It will classify them between "public" (those that are accessible from
    the Internet) and "private" (those that are not). If an IAM role is determined
    to be associated with at least one public instance and at least one private instance,
    it will be considered in violation.
  name: EC2(s) within the public and private subnets should not share identical IAM
    roles
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create.html>
      to create an additional IAM role with an IAM role policy attached. Associate
      this role to the public EC2 instances.
    terraform: Create an additional aws_iam_role resource with an aws_iam_role_policy
      attached. Associate this role to the public EC2 instances using an aws_iam_instance_profile
      resource.
  resource_type:
  - compute
  rule_id: ec2_role_share_rule
  rule_type: context_aware
  security_layer: iam
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: It is important that VPCs utilizing a Transit Gateway should not have
    overlapping CIDR. This becomes problematic overtime as the VPCs will likely experience
    routing issues.
  human_readable_logic: Cloudrail will look at all of your Transit Gateways. For each
    one, it will determine which VPCs are in use. It will iterate over all VPCs in
    pairs and compare their CIDR blocks. If there's an intersection in the CIDR blocks
    (one contains an IP that is contained in the other) a violation will be flagged.
  name: VPC's in Transit Gateway should not have common CIDR's
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/working-with-vpcs.html>
      to specify a VPC CIDR block that is not overlapping with other VPC CIDRs using
      the Transit Gateway.
    terraform: For the aws_vpc resource, set cidr_block argument to use a CIDR block
      that is not overlapping with other VPC CIDRs using the Transit Gateway.
  resource_type:
  - network
  rule_id: vpcs_in_transit_gateway_no_overlapping_cidr_rule
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
  description: Using default security groups in general is inadvisable. By locking
    security groups down, you are validating that if anyone uses them by accident,
    they will realize before any security issues occur.
  human_readable_logic: Cloudrail will review all of the default security groups configured
    in your environment. It will then cross reference these security groups with the
    resources they are used with, to determine they are used at all. For each of those
    default security groups that are used, Cloudrail will determine if they allow
    any ingress or egress traffic. By doing this context-based analysis, Cloudrail
    ensures that only default security groups who pose a true security risk are highlighted.
  name: Ensure all used default security groups of every VPC restrict all traffic
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#deleting-security-group-rule>
      to update the security group rules.
    terraform: For the resource aws_default_security_group, update the inline ingress
      and egress rules.
  resource_type:
  - network
  rule_id: ensure_all_used_default_security_groups_restrict_all_traffic_rule
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 22
    - SSH
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 22
    - SSH
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 22
    - SSH
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - SSH
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - SSH
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_ssh_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 3389
    - RDP
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 3389
    - RDP
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 3389
    - RDP
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - RDP
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - RDP
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_rdp_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 1521
    - ORACLE DB DEFAULT
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 1521
    - ORACLE DB DEFAULT
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 1521
    - ORACLE DB DEFAULT
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - ORACLE DB DEFAULT
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - ORACLE DB DEFAULT
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_oracle_db_default_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 2483
    - ORACLE DB
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 2483
    - ORACLE DB
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 2483
    - ORACLE DB
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - ORACLE DB
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - ORACLE DB
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_oracle_db_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 2484
    - ORACLE DB SSL
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 2484
    - ORACLE DB SSL
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 2484
    - ORACLE DB SSL
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - ORACLE DB SSL
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - ORACLE DB SSL
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_oracle_db_ssl_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 3306
    - MYSQL
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 3306
    - MYSQL
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 3306
    - MYSQL
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - MYSQL
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - MYSQL
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_mysql_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 5432
    - POSTGRES
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 5432
    - POSTGRES
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 5432
    - POSTGRES
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - POSTGRES
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - POSTGRES
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_postgres_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 6379
    - REDIS
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 6379
    - REDIS
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 6379
    - REDIS
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - REDIS
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - REDIS
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_redis_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 27017
    - MONGODB
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 27017
    - MONGODB
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 27017
    - MONGODB
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - MONGODB
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - MONGODB
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_mongodb_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 27018
    - MONGODB SHARD CLUSTER
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 27018
    - MONGODB SHARD CLUSTER
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 27018
    - MONGODB SHARD CLUSTER
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - MONGODB SHARD CLUSTER
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - MONGODB SHARD CLUSTER
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_mongodb_shard_cluster_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 7199
    - CASSANDRA
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 7199
    - CASSANDRA
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 7199
    - CASSANDRA
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - CASSANDRA
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - CASSANDRA
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_cassandra_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 9160
    - CASSANDRA THRIFT
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 9160
    - CASSANDRA THRIFT
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 9160
    - CASSANDRA THRIFT
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - CASSANDRA THRIFT
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - CASSANDRA THRIFT
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_cassandra_thrift_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 8888
    - CASSANDRA MNG
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 8888
    - CASSANDRA MNG
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 8888
    - CASSANDRA MNG
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - CASSANDRA MNG
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - CASSANDRA MNG
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_cassandra_mng_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 11211
    - MEMCACHED
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 11211
    - MEMCACHED
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 11211
    - MEMCACHED
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - MEMCACHED
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - MEMCACHED
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_memcached_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 9300
    - ELASTICSEARCH NODES
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 9300
    - ELASTICSEARCH NODES
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 9300
    - ELASTICSEARCH NODES
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - ELASTICSEARCH NODES
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - ELASTICSEARCH NODES
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_elasticsearch_nodes_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 9200
    - ELASTICSEARCH
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 9200
    - ELASTICSEARCH
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 9200
    - ELASTICSEARCH
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - ELASTICSEARCH
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - ELASTICSEARCH
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_elasticsearch_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - 5601
    - KIBANA
    template: public_access_security_groups_port_rule_description_template
  human_readable_logic:
    params:
    - 5601
    - KIBANA
    template: public_access_security_groups_port_rule_logic_template
  name:
    params:
    - 5601
    - KIBANA
    template: public_access_security_groups_port_rule_name_template
  remediation_steps:
    console:
      params:
      - KIBANA
      template: public_access_security_groups_port_rule_console_remediation_steps
    terraform:
      params:
      - KIBANA
      template: public_access_security_groups_port_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: public_access_security_groups_kibana_port_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.2'
    PCI DSS:
      3.2.1:
      - '1.2'
  description: Exposing resources to the Internet is generally inadvisable, especially
    to all ports range
  human_readable_logic: Cloudrail will identify all security groups in use. For each
    one, it will determine if all ports range are exposed to 0.0.0.0/0. Then, it will
    identify where the security group is in use. If it's not in use, the security
    group will be ignored. For each resource the security group is used with, Cloudrail
    will determine the subnet it is located in. It will then review the routing table
    to verify that the subnet is accessible from the Internet, and that the NACL associated
    with the subnet has all ports opened. This ensures the security group is only
    flagged if there's a real exposure.
  name: Ensure no used security groups allow ingress from 0.0.0.0/0 or ::/0 to all
    ports
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/working-with-security-groups.html#updating-security-group-rules>
      to update security groups rules and restrict traffic to specific ports. Additionally,
      follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/vpc-network-acls.html#Rules>
      to update NACLs rules to restrict traffic to specific ports also.
    terraform: For the aws_security_group resource, modify in-line rules or the associated
      aws_security_group_rule resources to restrict traffic to specific ports. Additionally,
      for the aws_network_acl resource, modify in-line rules or the associated aws_network_acl_rule
      resources to restrict traffic to specific ports.
  resource_type:
  - network
  rule_id: public_access_security_groups_all_ports_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: AWS accounts created until late 2013 supported EC2 Classic mode. This
    allowed for an easier configuration of some resources, while having less control
    over their VPC placement and security. It is not a good practice to continue using
    EC2 Classic mode.
  human_readable_logic: Cloudrail will determine if a resource has been configured
    to use EC2 Classic mode by verifying that the account supports it and the resource
    does not have a specific VPC set.
  name: Ensure EC2-Classic mode is not used
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html>
      to migrate from EC2 Classic mode to VPC mode.
    terraform: Modify those resources using specific arguments for EC2 Classic only
      and use VPC mode arguments.
  resource_type:
  - compute
  rule_id: disallow_ec2_classic_mode_rule
  rule_type: context_aware
  security_layer: networking
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
  description: Databases should not be publicly accessible. If a database is serving
    content to be consumed by external users, it's best to go through an API gateway
    or some other control point.
  human_readable_logic: Cloudrail will review all of the Redshift databases configured
    in your environment. For each database, it will review the security groups in
    use (where VPC or not), the subnets in use, the public IP configured (on or off)
    and other aspects. It will then attempt to determine if the database can be accessed
    from the Internet. This determination will take into account the security groups,
    subnet information, routing and other information, instead of relying solely on
    the existence of a public IP address. By doing this context-based analysis, Cloudrail
    ensures that only databases which can truly be accessed from the Internet are
    highlighted.
  name: Ensure Redshift database is not publicly accessible
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/redshift/latest/mgmt/managing-clusters-console.html#modify-cluster>
      to change Publicly accesible to "No". Modify also the associated security groups
      and NACLs to block inbound traffic to the database instance.
    terraform: For the aws_redshift_cluster resource, set publicly_accessible argument
      to false. Update the rules of security groups and NACLs to block inbound traffic
      from Internet to the database instance.
  resource_type:
  - database
  rule_id: public_access_db_redshift_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: "Many organizations would like to protect their databases by multiple\
    \ layers. For instance, they would want to avoid a situation where a publicly-accessible\
    \ EC2 instance can directly access a database. The reason behind this is to avoid\
    \ having \u201Ctwo hops\u201D into the database from the Internet."
  human_readable_logic: Cloudrail will review all of the Redshift databases configured
    in your environment. For each database, it will review the security groups in
    use (where VPC or not), the subnets in use, the public IP configured (on or off)
    and other aspects. It will then attempt to determine if the database can be accessed
    from any of the compute resources you have on a public subnet (EC2, ECS, etc.).
    This determination will take into account the security groups, subnet information,
    routing and other information, instead of relying solely on the existence of a
    public IP address. By doing this context-based analysis, Cloudrail ensures that
    only databases which can truly be accessed by a publicly-accessible compute resource
    are highlighted.
  name: Ensure Redshift database is not accessible indirectly via a publicly accessible
    resource
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/redshift/latest/mgmt/managing-security-groups-console.html>
      to modify Redshift Security Groups to block traffic from publicly-accessible
      AWS resources.
    terraform: For the aws_redshift_cluster resource, set vpc_security_group_ids or
      cluster_security_groups arguments to use a Security Group that blocks traffic
      from publicly-accessible AWS resources.
  resource_type:
  - database
  rule_id: indirect_public_access_db_redshift
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
  description: Databases should not be publicly accessible. If a database is serving
    content to be consumed by external users, it's best to go through an API gateway
    or some other control point.
  human_readable_logic: Cloudrail will review all of the RDS databases configured
    in your environment. For each database, it will review the security groups in
    use (where VPC or not), the subnets in use, the public IP configured (on or off)
    and other aspects. It will then attempt to determine if the database can be accessed
    from the Internet. This determination will take into account the security groups,
    subnet information, routing and other information, instead of relying solely on
    the existence of a public IP address. By doing this context-based analysis, Cloudrail
    ensures that only databases which can truly be accessed from the Internet are
    highlighted.
  name: Ensure RDS database is not publicly accessible
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Hiding>
      to hide a DB instance in a VPC from the Internet.
    terraform: For the aws_db_instance resource, set publicly_accesible argument to
      false. Update the rules of security groups and NACLs to block inbound traffic
      from Internet to the database instance.
  resource_type:
  - database
  rule_id: public_access_db_rds_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the RDS instances, clusters and global clusters
    being created in your environment. If an instance, cluster or global cluster is
    not set to be encrypted at rest, Cloudrail will highlight it as a violation. This
    rule will only flag a violation for resources that are not yet created.
  human_readable_logic: Cloudrail will identify all RDS instances, clusters and global
    clusters in the Terraform plan that are going to be created and are not configured
    to be encrypted at rest.
  name: Ensure RDS instances/clusters being created are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html>
      to enable encryption for RDS instances. Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.CreateInstance.html>
      to enable encryption for RDS clusters. Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-getting-started.html>
      to enable encryption for RDS global clusters.
    terraform: For the aws_db_instance, aws_rds_global_cluster, and aws_rds_cluster
      resources, set the storage_encrypted argument to true.
  resource_type:
  - database
  rule_id: not_car_rds_instances_encrypted_at_rest
  rule_type: non_context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '2.1'
  description: "Many AWS resources can be configured to reside in a specific VPC.\
    \ If parameters are left to their default values, AWS may place the resource in\
    \ the default VPC. This isn\u2019t a good practice, as it\u2019s best to specifically\
    \ configure such parameters. Cloudrail will determine if resources are placed\
    \ in the default VPC."
  human_readable_logic: Cloudrail will review all resources configured to determine
    if any of them is set to use the default VPC. This includes resources that may
    have no VPC ID set and would be assigned the default VPC upon creation.
  name: Ensure the default VPC is not used
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html>
      to create specific Security Groups for those resources.
    terraform: Create aws_security_group resources for those AWS resources using default
      VPC security group.
  resource_type:
  - compute
  rule_id: disallow_default_vpc
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: "Many organizations would like to protect their databases by multiple\
    \ layers. For instance, they would want to avoid a situation where a publicly-accessible\
    \ EC2 instance can directly access a database. The reason behind this is to avoid\
    \ having \u201Ctwo hops\u201D into the database from the Internet."
  human_readable_logic: Cloudrail will review all of the RDS databases configured
    in your environment. For each database, it will review the security groups in
    use (where VPC or not), the subnets in use, the public IP configured (on or off)
    and other aspects. It will then attempt to determine if the database can be accessed
    from any of the compute resources you have on a public subnet (EC2, ECS, etc.).
    This determination will take into account the security groups, subnet information,
    routing and other information, instead of relying solely on the existence of a
    public IP address. By doing this context-based analysis, Cloudrail ensures that
    only databases which can truly be accessed by a publicly-accessible compute resource
    are highlighted.
  name: Ensure RDS database is not accessible indirectly via a publicly accessible
    resource
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.RDSSecurityGroups.html>
      to reference a Security Group that blocks access from publicly-accessible EC2
      instances.
    terraform: For the aws_db_instance resource, set vpc_security_group_ids argument
      to reference a Security Group that blocks access from publicly-accessible EC2
      instances.
  resource_type:
  - database
  rule_id: indirect_public_access_db_rds
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review all of the Elasticsearch domains configured in
    your environment. For each domain it will review if it is set to be publicly accessible.
  human_readable_logic: Cloudrail will review all of the Elasticsearch domains configured
    in your environment. For each domain it will review if it is set to be publicly
    accessible.
  name: Ensure Elasticsearch Domain is not publicly accessible
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html>
      to configure VPC access instead of Public access in Network configuration section.
    terraform: For the aws_elasticsearch_domain resource, in vpc_options block, set
      subnet_ids and security_group_ids arguments.
  resource_type:
  - database
  rule_id: public_access_elasticsearch_rule
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: "Many organizations would like to protect their Elasticsearch domains\
    \ by multiple layers. For instance, they would want to avoid a situation where\
    \ a publicly-accessible EC2 instance can directly access an ES domain. The reason\
    \ behind this is to avoid having \u201Ctwo hops\u201D into the ES domain from\
    \ the Internet."
  human_readable_logic: Cloudrail will review all of the ES domains configured in
    your environment. For each database, it will review the security groups in use
    (whether VPC or not), the subnets in use, the public IP configured (on or off)
    and other aspects. It will then attempt to determine if the ES domain can be accessed
    from any of the compute resources you have on a public subnet (EC2, ECS, etc.).
    This determination will take into account the security groups, subnet information,
    routing and other information, instead of relying solely on the existence of a
    public IP address. By doing this context-based analysis, Cloudrail ensures that
    only domains which can truly be accessed by a publicly-accessible compute resource
    are highlighted.
  name: Ensure Elasticsearch Domain is not accessible indirectly via a publicly accessible
    resource
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html>
      to configure the Security Groups to block access from compute resources in public
      subnets.
    terraform: For the aws_elasticsearch_domain resource, in vpc_options block, set
      security_group_ids argument to reference a Security Group that blocks access
      from compute resources in public subnets.
  resource_type:
  - database
  rule_id: indirect_public_access_elastic_search_rule
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '5.4'
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
  description: It's important to ensure that only specific networks are exposed through
    a VPC peering connection. Exposing an entire VPC through the connection may create
    the risk of exposing resources that were not intended.
  human_readable_logic: "Cloudrail will review all of the routing tables configured\
    \ in your environment that have routes pointing to a VPC peer. It will then cross\
    \ reference these routing tables with the subnets they are attached to, and with\
    \ the resources they are used with, to determine they are used at all. For those\
    \ routing tables that are used, Cloudrail will review the routes defined and cross-reference\
    \ them with the VPC\u2019s CIDR block. If a route is found to exactly match the\
    \ CIDR block, it will be highlighted by Cloudrail. By doing this context-based\
    \ analysis, Cloudrail ensures that only routing tables who pose a true security\
    \ risk are highlighted. NOTE: If a VPC Peering Connection is created through Terraform,\
    \ to a VPC in a different account, Cloudrail will only be able to evaluate this\
    \ rule after the connection has been established. This is due to the lack of knowledge\
    \ of the peer VPC\u2019s CIDR block."
  name: Ensure used routing tables for VPC peering are "least access"
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/vpc/latest/peering/peering-configurations-partial-access.html>
      to configure specific routes for VPC peering.
    terraform: For the aws_route resource, set destination_cidr_block argument to
      use specific routes for VPC peering.
  resource_type:
  - network
  rule_id: vpc_peering_least_access
  rule_type: context_aware
  security_layer: networking
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Elasticsearch Domains should be encrypted whenever possible. Because
    it is easy to do upon resource creation, Cloudrail will flag a violation if a
    domain that is set to be created does not have encryption at rest turn on.
  human_readable_logic: Cloudrail will review the Elasticsearch domains being created
    in your environment. If a domain is not set to encrypt at rest, Cloudrail will
    highlight it as a violation. This rule will only flag a violation for resources
    that are not yet created.
  name: Ensure Elasticsearch Domains being created are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/encryption-at-rest.html>
      to enable encryption at rest for Elasticsearch domain.
    terraform: For the resource aws_elasticsearch_domain resource, configure encrypt_at_rest
      block with argument enabled = true.
  resource_type:
  - database
  rule_id: non_car_es_domain_encrypt_at_rest_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '4.1'
  description: Cloudrail will review the Elasticsearch domains being created in your
    environment. If a domain is not set to encrypt node-to-node communication, Cloudrail
    will highlight it as a violation. This rule will only flag a violation for resources
    that are not yet created.
  human_readable_logic: Cloudrail will identify all Elasticsearch domains in the Terraform
    plan that are going to be created and are not configured to encrypt node-to-node
    communication.
  name: Ensure Elasticsearch domains being created are set to be encrypted node-to-node
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/ntn.html>
      to enable node-to-node encryption for Elasticsearch domain.
    terraform: For the resource aws_elasticsearch_domain resource, configure node_to_node_encryption
      block with argument enabled = true.
  resource_type:
  - database
  rule_id: not_car_elasticsearch_domains_encrypted_note_to_node
  rule_type: non_context_aware
  security_layer: encryption
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '7.1'
      - '10.1'
  description: The EKS cluster's management API is a sensitive endpoint to expose
    publicly. Cloudrail will determine if such an exposure occurred.
  human_readable_logic: "Cloudrail will review all of the EKS clusters configured\
    \ in your environment. For each cluster, it will review the whether the API has\
    \ a public IP and whether it is Internet-accessible on the subnets it\u2019s attached\
    \ to. This determination will take into account the security groups, subnet information,\
    \ routing and other information, instead of relying solely on the existence of\
    \ a public IP address. By doing this context-based analysis, Cloudrail ensures\
    \ that only EKS clusters whose API can truly be accessed from the Internet are\
    \ highlighted."
  name: Ensure EKS API is not publicly accessible
  remediation_steps:
    console: Follow the guide at <https://aws.amazon.com/premiumsupport/knowledge-center/eks-public-private-access-api-server/>
      to configure private access to the EKS API.
    terraform: For the aws_eks_cluster resource, in vpc_config block, set endpoint_public_access
      argument to false.
  resource_type:
  - kubernetes
  rule_id: public_access_eks_api
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Best practices encourage encryption of communication between each two
    entities in your environment. This includes between a load balancer and the servers
    it is connected to.
  human_readable_logic: Cloudrail will review the load balancers and target groups
    configured in your environment. If a target group is in use and is communicating
    with its targets in HTTP, Cloudrail will flag a violation.
  name: Ensure target groups are not using HTTP
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-target-group.html>
      to configure HTTPS Protocol.
    terraform: For the aws_lb_target_group resource, set the protocol argument to
      use HTTPS.
  resource_type:
  - compute
  rule_id: non_car_alb_target_group_no_http
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '7.1'
      - '10.1'
  description: Generally, all S3 buckets, with specific exceptions, should not be
    publicly accessible. Access should be permitted only to specific entities and
    services, through tightly controlled policies.
  human_readable_logic: Cloudrail will review the S3 buckets being created in your
    environment. For each bucket, it will analyze its ACLs and bucket policies. If
    an S3 bucket is allowing public access through an ACL (whether canned or user
    provided), or it is allowing cross-account access through ACL, or is allowing
    either of the above through a bucket policy, Cloudrail will highlight it as a
    violation.
  name: Ensure S3 buckets are not made widely accessible through ACLs and bucket policies
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/user-guide/set-bucket-permissions.html>
      to modify the S3 bucket ACL, and <https://docs.aws.amazon.com/AmazonS3/latest/user-guide/add-bucket-policy.html>
      to modify the S3 bucket policy.
    terraform: For the aws_s3_bucket resource, set the acl or grant arguments to restrict
      public access using an ACL, and set the policy argument to use a bucket policy
      that restricts public access. Additionally, if aws_s3_bucket_policy resource
      is being used, set policy argument to use a policy that restricts public access.
  resource_type:
  - storage
  rule_id: s3_acl_disallow_public_and_cross_account
  rule_type: context_aware
  security_layer: iam
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '4.1'
  description: The CloudFront protocol used is an important piece of securing the
    content flowing between your users and your infrastructure. It's important to
    use protocol versions that are considered more secure.
  human_readable_logic: Cloudrail will review the CloudFront distributions in your
    environment. If a CloudFront distribution is using an insecure protocol version
    (pre TLSv1.2_2019), Cloudrail will highlight it as a violation.
  name: Ensure CloudFront protocol version is a good one
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValues-security-policy>
      to configure the Security Policy to use a secure protocol version.
    terraform: For the aws_cloudfront_distribution resource, in viewer_certificate
      block, set minimum_protocol_version argument to use a secure protocol version.
  resource_type:
  - content_delivery
  rule_id: non_car_cloudfront_protocol_version
  rule_type: non_context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '1.15'
    PCI DSS:
      3.2.1:
      - '7.1'
  description: Best practices dictate that IAM permissions are given to roles, groups,
    etc., and never directly to users.
  human_readable_logic: Cloudrail will review the IAM settings in your environment,
    and specifically the users being created. If a user is assigned a permission policy
    directly, Cloudrail will highlight it as a violation.
  name: Ensure IAM permissions are not given directly to users
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_create.html>
      to create an IAM group with the permission policy. Remove the permission policy
      from the user and follow the guide at to add the IAM user to an IAM group.
    terraform: Remove the permission policy attached to the user. Create a new aws_iam_group
      resource and attach the permission policy. Use the resource aws_iam_user_group_membership
      for adding the user to the group.
  resource_type:
  - iam
  rule_id: non_car_iam_no_permissions_directly_to_user
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: "There have been hacks in the past caused by the use of IMDSv1. It\
    \ is now best practice to disable IMDSv1 and use IMDSv2. It\u2019s important to\
    \ test the disablement of IMDSv1 carefully, as it may cause issues in an application\u2019\
    s execution (if it using an old SDK, for example)."
  human_readable_logic: Cloudrail will review configurations of EC2 instances, launch
    configurations, and launch templates used in the environment. If they are set
    to allow IMDSv1, Cloudrail will highlight it as a violation.
  name: Ensure IMDSv2 is used and IMDSv1 is disabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html>
      to change the instance metadata for existing instances. Follow the guide at
      <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html>
      to configure instance metadata for new instances.
    terraform: For the aws_instance resource, in metadata_options block, set http_tokens
      argument to required.
  resource_type:
  - compute
  rule_id: non_car_ensure_imdsv2
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '4.1'
  description: Cloudrail will review the CloudFront Distributions in your environment.
    If it is not using HTTPS, Cloudrail will highlight it as a violation.
  human_readable_logic: "Look for CloudFront Distributions, then look inside default_cache_behavior\
    \ block and ordered_cache_behavior block (can exist several ordered blocks) in\
    \ order to check the values of: viewer_protocol_policy to ensure it is set to\
    \ either \u201Chttps-only\u201D or \u201Credirect-to-https\u201D"
  name: Ensure CloudFront Distribution being created are set to encrypt in transit
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-https-viewers-to-cloudfront.html>
      to enable HTTPS Protocol.
    terraform: For the aws_cloudfront_distribution resource, in default_cache_behavior/ordered_cache_behavior
      blocks, set the viewer_protocol_policy argument to https-only or redirect-to-https.
  resource_type:
  - content_delivery
  rule_id: non_car_cloudfront_distribution_encrypt_in_transit
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the SNS topics in your environment. If a topic
    is not set to encrypt at rest, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all SNS topics within your AWS account
    and Terraform plan that are not configured to encrypt data at rest.
  name: Ensure SNS topics are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html>
      to enable encryption at rest for SNS topic.
    terraform: For the resource aws_sns_topic, set kms_master_key_id argument to specify
      a key ID.
  resource_type:
  - notification
  rule_id: non_car_sns_topic_encrypt_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the SNS topics in your environment. If a topic
    is not set to be encrypted at rest using a customer-managed CMK, Cloudrail will
    highlight it as a violation.
  human_readable_logic: Cloudrail will review the SNS topics in your environment.
    If a topic is not set to be encrypted at rest using a customer-managed CMK, Cloudrail
    will highlight it as a violation.
  name: Ensure SNS topics are encrypted at rest with customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html>
      to enable SNS topic encryption at rest using a customer-managed CMK.
    terraform: For the aws_sns_topic resource, set kms_master_key_id argument to use
      a customer-managed CMK ARN.
  resource_type:
  - notification
  rule_id: non_car_sns_topics_encrypted_at_rest_with_customer_managed_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the SQS queues in your environment. If a queue
    is not set to encrypt at rest, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all SQS queues within your AWS account
    and Terraform plan that are not configured to encrypt data at rest.
  name: Ensure SQS queues are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html>
      to enable encryption at rest for SQS queue.
    terraform: For the resource aws_sqs_queue, set kms_master_key_id argument to specify
      a key ID.
  resource_type:
  - queuing
  rule_id: non_car_sqs_queue_encrypt_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Athena Workgroups in your environment. If
    a Workgroup is not set to encrypt at rest the query results, or has it set, but
    not enforced on the clients, Cloudrail will highlight it as a violation.
  human_readable_logic: "Cloudrail will identify all Athena workgroups within your\
    \ AWS account and Terraform plan. If the workgroup does not enforce the use of\
    \ the workgroup config, a violation will be highlighted. If it does, and the config\
    \ doesn\u2019t have encryption enabled, a violation will be highlighted as well."
  name: Ensure Athena Workgroup query results are set to be encrypted at rest and
    enforced on clients
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/athena/latest/ug/encrypting-query-results-stored-in-s3.html>
      to encrypt query results.
    terraform: For the aws_athena_workgroup resource, in configuration, result_configuration,
      encryption_configuration block, set the encryption_option argument. Additionally,
      in configuration, set enforce_workgroup_configuration to true.
  resource_type:
  - database
  rule_id: non_car_athena_workgroup_query_results_encrypt_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '4.1'
  description: "In most cases, it is inadvisable to be using HTTP, as confidential\
    \ or sensitive data may be transported over it, and it\u2019s best to use HTTPS."
  human_readable_logic: Cloudrail will review the load balancers configured in your
    environment. If a load balancer is using HTTP, instead of HTTPS, Cloudrail will
    highlight it as a violation.
  name: Ensure ALB is using HTTPS and not HTTP
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-application-load-balancer.html#configure-security-settings>
      to create a listener that uses HTTPS Protocol.
    terraform: For the aws_lb_listener resource, set protocol argument to HTTPS. Also
      set ssl_policy and certificate_arn arguments.
  resource_type:
  - network
  rule_id: non_car_alb_https
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.3'
  description:
    params:
    - S3
    template: vpc_endpoint_gateway_is_not_used_rule_description_template
  human_readable_logic:
    params:
    - buckets
    - S3
    - bucket
    template: vpc_endpoint_gateway_is_not_used_rule_human_readable_logic_template
  name:
    params:
    - S3
    template: vpc_endpoint_gateway_is_not_used_rule_name_template
  remediation_steps:
    console:
      params:
      - S3
      template: vpc_endpoint_gateway_is_not_used_rule_console_remediation_steps
    terraform:
      params:
      - S3
      - S3
      template: vpc_endpoint_gateway_is_not_used_rule_iac_remediation_steps
  resource_type:
  - storage
  rule_id: vpc_endpoint_s3_exposure
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.3'
  description:
    params:
    - DynamoDB
    template: vpc_endpoint_gateway_is_not_used_rule_description_template
  human_readable_logic:
    params:
    - tables
    - DynamoDB
    - table
    template: vpc_endpoint_gateway_is_not_used_rule_human_readable_logic_template
  name:
    params:
    - DynamoDB
    template: vpc_endpoint_gateway_is_not_used_rule_name_template
  remediation_steps:
    console:
      params:
      - DynamoDB
      template: vpc_endpoint_gateway_is_not_used_rule_console_remediation_steps
    terraform:
      params:
      - DynamoDB
      - DynamoDB
      template: vpc_endpoint_gateway_is_not_used_rule_iac_remediation_steps
  resource_type:
  - storage
  rule_id: vpc_endpoint_dynamodb_exposure
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the API Gateways in your environment. If it has
    caching enabled but not encrypted in any stage and in any method, Cloudrail will
    highlight it as a violation.
  human_readable_logic: Cloudrail will identify all API Gateways within your AWS account
    and Terraform plan that have caching enabled and are not configured to be encrypted
    at rest.
  name: Ensure API Gateway with caching enabled is set to be encrypted
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html>
      to encrypt cache data.
    terraform: For the aws_api_gateway_method_settings resource with caching enabled,
      in settings block, set cache_data_encrypted argument to true.
  resource_type:
  - content_delivery
  rule_id: non_car_api_gateway_caching_encrypted
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Best practices recommend the use of SSO instead of defining specific
    users at the account-level.
  human_readable_logic: Cloudrail will look at all existing users, and those about
    to be created, and determine if they are set to be used by humans. This determination
    is done by looking to see if the user has console access.
  name: Ensure no human IAM users defined
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting>
      to remove identified IAM users.
    terraform: Remove the aws_iam_user resource for those identified IAM users.
  resource_type:
  - iam
  rule_id: non_car_iam_no_human_users
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Some organizations may only allow the use of private AMIs. If this
    rule is enabled, any EC2 instance attempting to use a public AMI will be flagged.
  human_readable_logic: "Cloudrail will look for all EC2 instances in your Terraform\
    \ plan and live account. For those, it will inspect the AMI ID they are set to\
    \ use. It will cross reference the ID with the list of AMI IDs that are privately\
    \ defined in the account or shared with it privately. If it\u2019s not on that\
    \ list, and it\u2019s not an AMI currently being created by the TF plan, the EC2\
    \ resource will be flagged."
  name: Allow only private AMIs to be used
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instances-and-amis.html>
      in order to terminate flagged EC2 instances and create new EC2 instance with
      an approved AMI.
    terraform: For the aws_instance resource, update the ami argument to set an approved
      AMI. Terraform will destroy and create new resources.
  resource_type:
  - compute
  rule_id: non_car_ec2_amis_private_only
  rule_type: non_context_aware
  security_layer: code
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Redshift clusters being created in your environment.
    If a cluster is not set to encrypt at rest, Cloudrail will highlight it as a violation.
    This rule will only flag a violation for resources that are not yet created.
  human_readable_logic: Cloudrail will identify all Redshift clusters in the Terraform
    plan that are going to be created and are not configured to encrypt data at rest.
  name: Ensure Redshift clusters being created are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/redshift/latest/mgmt/changing-cluster-encryption.html>
      to enable encryption at rest.
    terraform: For the aws_redshift_cluster resource, set encrypted argument to true.
  resource_type:
  - database
  rule_id: non_car_redshift_cluster_encrypt_at_rest_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the DocDB clusters being created in your environment.
    If a cluster is not set to encrypt at rest, Cloudrail will highlight it as a violation.
    This rule will only flag a violation for resources that are not yet created.
  human_readable_logic: Cloudrail will identify all DocumentDB clusters in the Terraform
    plan that are going to be created and are not configured to encrypt data at rest.
  name: Ensure DocDB clusters being created are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/documentdb/latest/developerguide/encryption-at-rest.html>
      to enable encryption at rest.
    terraform: For the aws_docdb_cluster resource, set storage_encrypted argument
      to true.
  resource_type:
  - database
  rule_id: not_car_docdb_cluster_encrypted_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.3'
  description:
    params:
    - S3
    template: vpc_endpoint_route_table_exposure_rule_description_template
  human_readable_logic:
    params:
    - buckets
    - S3
    template: vpc_endpoint_route_table_exposure_rule_human_readable_logic_template
  name:
    params:
    - S3
    template: vpc_endpoint_route_table_exposure_rule_name_template
  remediation_steps:
    console:
      params:
      - S3
      template: vpc_endpoint_route_table_exposure_rule_console_remediation_steps
    terraform:
      params:
      - S3
      template: vpc_endpoint_route_table_exposure_rule_iac_remediation_steps
  resource_type:
  - storage
  rule_id: endpoint_s3_route_table_exposure
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.3'
  description:
    params:
    - DynamoDB
    template: vpc_endpoint_route_table_exposure_rule_description_template
  human_readable_logic:
    params:
    - tables
    - DynamoDB
    template: vpc_endpoint_route_table_exposure_rule_human_readable_logic_template
  name:
    params:
    - DynamoDB
    template: vpc_endpoint_route_table_exposure_rule_name_template
  remediation_steps:
    console:
      params:
      - DynamoDB
      template: vpc_endpoint_route_table_exposure_rule_console_remediation_steps
    terraform:
      params:
      - DynamoDB
      template: vpc_endpoint_route_table_exposure_rule_iac_remediation_steps
  resource_type:
  - storage
  rule_id: endpoint_dynamodb_route_table_exposure
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the DynamoDB DAX clusters being created in your
    environment. If a cluster is not set to encrypt at rest, Cloudrail will highlight
    it as a violation. This rule will only flag a violation for resources that are
    not yet created.
  human_readable_logic: Cloudrail will identify all DynamoDB Accelerator (DAX) clusters
    in the Terraform plan that are going to be created and are not configured to encrypt
    data at rest.
  name: Ensure DynamoDB DAX clusters being created are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DAXEncryptionAtRest.html>
      to enable encryption at rest.
    terraform: For the aws_dax_cluster resource, in server_side_encryption block,
      set enabled argument to true.
  resource_type:
  - database
  rule_id: not_car_dynamodb_dax_clusters_encrypted_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: "In an environment where VPC Endpoints are used for S3, and private\
    \ S3 buckets are created, it\u2019s important to consider the use of a source\
    \ VPCE condition in the bucket policy. Often times, this will be missed, which\
    \ means that an attacker can use stolen credentials outside of your VPCs."
  human_readable_logic: First check if there is a bucket in the region, if so check
    that at least one VPC Endpoint for S3 exists. Then, for each private bucket in
    the region get the policy and check if a condition which contains the string "aws:SourceVpce"
    which would indicate that the policy is limiting the source of the requests.
  name: Ensure that the private bucket's policy reference a VPC Endpoint as source
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies-vpc-endpoint.html>
      to modify S3 bucket policy and restrict access to a specific VPC endpoint.
    terraform: For the aws_s3_bucket_policy resource, modify policy argument to include
      a condition "aws:SourceVpce" in order to restrict access to a specific VPC endpoint.
  resource_type:
  - service_endpoint
  - iam
  rule_id: s3_bucket_policy_vpce
  rule_type: context_aware
  security_layer: storage
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the Athena Workgroups being created in your environment.
    If a Workgroup is not set to encrypt at rest the query results using customer-managed
    CMK, Cloudrail will highlight it as a violation. This rule will only flag a violation
    for resources that are not yet created.
  human_readable_logic: Cloudrail will identify all Athena workgroups within your
    Terraform plan that are going to be created and are encrypting at rest the query
    results without using customer-managed CMKs.
  name: Ensure Athena Workgroup query results being created are set to be encrypted
    at rest using customer-managed CMKs
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/athena/latest/ug/encrypting-query-results-stored-in-s3.html>
      to encrypt query results using a customer-managed CMK.
    terraform: For the aws_athena_workgroup resource, in configuration, result_configuration,
      encryption_configuration block, set the encryption_option argument to "SSE_KMS"
      and set kms_key_arn argument to use a customer-managed CMK. Additionally, in
      configuration, set enforce_workgroup_configuration to true.
  resource_type:
  - database
  rule_id: non_car_athena_workgroup_query_results_encrypt_at_rest_using_customer_managed_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - 2.1.1
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the S3 buckets in your environment. If an S3
    bucket is not set to be encrypted at rest, and the bucket is not public, Cloudrail
    will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all S3 buckets within your AWS account
    and Terraform plan that are not configured to encrypt data at rest and are not
    public.
  name: Ensure S3 buckets are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/userguide/serv-side-encryption.html>
      to enable S3 bucket encryption at rest.
    terraform: For the aws_s3_bucket resource, in server_side_encryption_configuration,
      rule, apply_server_side_encryption_by_default block, set sse_algorithm argument.
  resource_type:
  - storage
  rule_id: not_car_s3_buckets_encrypted_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Using versioning is a good practice to deal with accidental deletion
    or modifications. Cloudrail will review your buckets to ensure versioning is enabled.
    This rule is not context aware
  human_readable_logic: Cloudrail will review all S3 buckets within your AWS account
    and Terraform plan. If versioning is not enabled, this rule will trigger.
  name: Ensure S3 buckets have versioning enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/userguide/manage-versioning-examples.html>
      to enable S3 bucket versioning.
    terraform: For the aws_s3_bucket resource, in versioning block, set enabled argument
      to true.
  resource_type:
  - storage
  rule_id: not_car_s3_buckets_versioning_enabled
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
  - cloudformation
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the S3 bucket objects being created in your Terraform
    plan. If a bucket object is not set to encrypt at rest, within a bucket that is
    not public, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all S3 objects in the Terraform plan
    that are going to be created, are not configured to encrypt data at rest and are
    created in a non-public bucket. Cloudrail will NOT access the S3 objects you already
    have in your cloud environment. Cloudrail also will not access the contents of
    the objects in your Terraform plan.
  name: Ensure S3 bucket objects are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/user-guide/add-object-encryption.html>
      to enable S3 bucket object encryption at rest.
    terraform: For the aws_s3_bucket_object resource, set server_side_encryption argument
      to "AES256".
  resource_type:
  - storage
  rule_id: not_car_s3_bucket_object_encrypt_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the Cloudwatch Log Groups being created in your
    environment. If a Log Group is not set to encrypt at rest using KMS CMK, Cloudrail
    will highlight it as a violation. This rule will only flag a violation for resources
    that are not yet created.
  human_readable_logic: Cloudrail will identify all Cloudwatch Log Groups in the Terraform
    plan that are going to be created and are not configured to encrypt data at rest.
  name: Ensure Cloudwatch Log Groups being created are set to be encrypted at rest
    using KMS CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html>
      to set encryption at rest using a customer-managed CMK.
    terraform: For the aws_cloudwatch_log_group resource, set kms_key_id argument
      to use a customer-managed CMK ARN.
  resource_type:
  - logging
  rule_id: not_car_cloudwatch_log_group_encrypted_at_rest_using_kms_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the CodeBuild projects in your environment. If
    a project is not set to encrypt at rest using customer-managed CMK, Cloudrail
    will highlight it as a violation.
  human_readable_logic: Cloudrail will identify CodeBuild projects within your AWS
    account and Terraform plan that are not configured to encrypt at rest using a
    customer-managed CMK.
  name: Ensure CodeBuild projects are set to be encrypted at rest with customer-managed
    CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/codebuild/latest/userguide/security-encryption.html>
      to set encryption at rest using a customer-managed CMK.
    terraform: For the aws_codebuild_project resource, set encryption_key argument
      to use a customer-managed CMK ARN.
  resource_type:
  - code
  rule_id: not_car_codebuild_projects_encrypted_at_rest_with_customer_managed_CMK
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the CloudTrail trails in your environment. If
    a trail is not set to encrypt at rest using SSE-KMS, Cloudrail will highlight
    it as a violation. This rule will only flag a violation for resources that are
    not yet created.
  human_readable_logic: Cloudrail will identify CloudTrail trails within your AWS
    account and Terraform plan that are not configured to encrypt at rest using SSE-KMS.
  name: Ensure CloudTrail trails are set to be encrypted at rest using SSE-KMS
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/awscloudtrail/latest/userguide/encrypting-cloudtrail-log-files-with-aws-kms.html>
      to set encryption at rest using a customer-managed CMK.
    terraform: For the aws_cloudtrail resource, set kms_key_id argument to use a customer-managed
      CMK ARN.
  resource_type:
  - logging
  rule_id: not_car_cloudtrail_trails_encrypt_at_rest_with_sse_kms
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Elasticache replication groups being created
    in your environment. If a replication group is not set to encrypt at rest, Cloudrail
    will highlight it as a violation. This rule will only flag a violation for resources
    that are not yet created.
  human_readable_logic: Cloudrail will identify all Elasticache replication groups
    in the Terraform plan that are going to be created and are not configured to be
    encrypted at rest.
  name: Ensure Elasticache replication groups being created are set to be encrypted
    at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/at-rest-encryption.html>
      to enable encryption at rest.
    terraform: For the aws_elasticache_replication_group resource, set at_rest_encryption_enabled
      argument to true.
  resource_type:
  - database
  rule_id: non_car_elasticache_replication_group_encrypt_at_rest_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '7.2'
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - SQS queue
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - SQS queue
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-overview-of-managing-access.html>
      - SQS queue
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_sqs_queue_policy
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - queuing
  rule_id: non_car_aws_sqs_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '4.1'
  description: Cloudrail will review the Elasticache replication groups being created
    in your environment. If a replication group is not set to encrypt in transit,
    Cloudrail will highlight it as a violation. This rule will only flag a violation
    for resources that are not yet created.
  human_readable_logic: Cloudrail will identify all Elasticache replication groups
    in the Terraform plan that are going to be created and are not configured to be
    encrypted in transit.
  name: Ensure Elasticache replication groups being created are set to be encrypted
    in transit
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/in-transit-encryption.html>
      to enable encryption in transit.
    terraform: For the aws_elasticache_replication_group resource, set the transit_encryption_enabled
      argument to true.
  resource_type:
  - database
  rule_id: non_car_elasticache_replication_group_encrypt_in_transit_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Neptune clusters being created in your environment.
    If a cluster is not set to encrypt at rest, Cloudrail will highlight it as a violation.
    This rule will only flag a violation for resources that are not yet created.
  human_readable_logic: Cloudrail will identify all Neptune clusters in the Terraform
    plan that are going to be created and are not configured to be encrypted at rest.
  name: Ensure Neptune clusters being created are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/neptune/latest/userguide/encrypt.html>
      to enable encryption at rest.
    terraform: For the aws_neptune_cluster resource, set storage_encrypted argument
      to true.
  resource_type:
  - database
  rule_id: non_car_neptune_cluster_encrypt_at_rest_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the Neptune clusters being created in your environment.
    If a cluster is not set to encrypt data at rest with a customer-managed CMK, Cloudrail
    will highlight it as a violation. This rule will only flag a violation for resources
    that are not yet created.
  human_readable_logic: Cloudrail will identify all Neptune clusters in the Terraform
    plan that are going to be created and are not configured to encrypt data at rest
    using a customer-managed CMK.
  name: Ensure Neptune clusters being created are set to be encrypted at rest with
    customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/neptune/latest/userguide/encrypt.html>
      to enable encryption at rest.
    terraform: For the aws_neptune_cluster resource, set storage_encrypted argument
      to true.
  resource_type:
  - database
  rule_id: non_car_neptune_cluster_encrypt_at_rest_with_customer_managed_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - ECR repository
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - ECR repository
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-policies.html>
      - ECR repository
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_ecr_repository_policy
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - code
  rule_id: non_car_aws_ecr_repo_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - S3 bucket
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - S3 bucket
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-policy-language-overview.html>
      - S3 bucket
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_s3_bucket_policy
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - storage
  rule_id: non_car_aws_s3_bucket_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - KMS keys
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - KMS key
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html>
      - key policy
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_kms_key
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - key_mgmt
  rule_id: non_car_aws_kms_key_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - API Gateway endpoint
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - API Gateway endpoint
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-resource-policies-examples.html>
      - API Gateway
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_api_gateway_rest_api_policy
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - content_delivery
  rule_id: non_car_aws_api_gateway_endpoint_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - CloudWatch Logs destination
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - CloudWatch Logs destination
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#resource-based-policies-cwl>
      - CloudWatch Logs destination
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_cloudwatch_log_destination_policy
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - logging
  rule_id: non_car_aws_cloudwatch_logs_destination_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - Elasticsearch Service domain
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - Elasticsearch Service domain
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-ac.html#es-ac-types-resource>
      - Elasticsearch Service domain
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_elasticsearch_domain_policy
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - database
  rule_id: non_car_aws_es_service_domain_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - EFS file system
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - EFS file system
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies>
      - EFS file system
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_efs_file_system_policy
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - storage
  rule_id: non_car_aws_efs_fs_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - S3 Glacier vault
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - S3 Glacier vault
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html>
      - S3 Glacier vault
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_glacier_vault
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - storage
  rule_id: non_car_aws_glacier_vault_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description:
    template: policy_wildcard_violation_rule_description_template
  human_readable_logic:
    params:
    - Secrets Manager secret
    template: policy_wildcard_violation_rule_human_readable_logic_template
  name:
    params:
    - Secrets Manager secret
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/secretsmanager/latest/userguide/auth-and-access_policy-types.html>
      - Secrets Manager secret
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_secretsmanager_secret_policy
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - key_mgmt
  rule_id: non_car_aws_secrets_manager_secret_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the Secrets Manager secrets config in your environment.
    If secrets are not set to be encrypted at rest using a customer-managed CMK, Cloudrail
    will highlight it as a violation. Cloudrail does not access the contents of the
    secrets themselves.
  human_readable_logic: Cloudrail will identify Secrets Manager secrets within your
    AWS account and Terraform plan that are not configured to be encrypted at rest
    using a customer-managed CMK. Cloudrail does not access the secrets contents themselves.
  name: Ensure Secrets Manager secrets are encrypted at rest with customer-managed
    CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/secretsmanager/latest/userguide/tutorials_basic.html>
      to set encryption at rest using a customer-managed CMK.
    terraform: For the aws_secretsmanager_secret resource, set kms_key_id argument
      to use a customer-managed CMK ARN.
  resource_type:
  - key_mgmt
  rule_id: non_car_secrets_manager_secrets_encrypted_at_rest_with_customer_managed_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '7.2'
  description: Using wildcard actions may inadvertently allow users to take actions
    you do not want to allow them to do. It is a best practice to give specific permissions
    only.
  human_readable_logic: Cloudrail will review the Glue data catalog policies being
    created in your environment or currently in use. If a policy is using wildcard
    actions, Cloudrail will highlight it as a violation.
  name:
    params:
    - Glue data catalog
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/glue/latest/dg/glue-resource-policies.html>
      to modify the policy and ensure it is not using wildcard actions.
    terraform: For the aws_glue_resource_policy resource, ensure the attached policy
      does not contain wildcard actions.
  resource_type:
  - storage
  rule_id: non_car_aws_glue_data_catalog_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '4.1'
  description: Cloudrail will review the DocDB clusters in your environment. If a
    cluster is not set to encrypt in transit, Cloudrail will highlight it as a violation.
    This rule will only flag a violation for resources that are not yet created.
  human_readable_logic: Cloudrail will identify all DocumentDB clusters within your
    AWS account and Terraform plan that are not configured to perform encryption in
    transit.
  name: Ensure DocDB clusters are set to encrypt the connection with applications
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/documentdb/latest/developerguide/security.encryption.ssl.html>
      to enable encryption in transit.
    terraform: For the aws_docdb_cluster_parameter_group resource, in parameter block,
      ensure parameter "name" is equal to "tls" and "value" is equal to "enabled",
      or just remove those two parameter to create the DocDB cluster with encryption
      in transit enabled by default.
  resource_type:
  - database
  rule_id: not_car_docdb_cluster_encrypted_in_transit
  rule_type: non_context_aware
  security_layer: encryption
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the SQS queues in your environment. If a queue
    is not set to be encrypted at rest using a customer-managed CMK, Cloudrail will
    highlight it as a violation.
  human_readable_logic: Cloudrail will identify SQS queues within your AWS account
    and Terraform plan that are not configured to be encrypted at rest using a customer-managed
    CMK.
  name: Ensure SQS queues are encrypted at rest with customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-configure-sse-existing-queue.html>
      to enable encryption at rest using a customer-managed CMK.
    terraform: For the aws_sqs_queue resource, set the argument kms_master_key_id
      to use a customer-managed CMK ARN.
  resource_type:
  - database
  rule_id: non_car_sqs_queues_encrypted_at_rest_with_customer_managed_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the DocDB clusters being created in your environment.
    If a cluster is not set to encrypt at rest using a customer-managed CMK, Cloudrail
    will highlight it as a violation. This rule will only flag a violation for resources
    that are not yet created.
  human_readable_logic: Cloudrail will identify all DocumentDB clusters in the Terraform
    plan that are going to be created and are not configured to encrypt data at rest
    using a customer-managed CMK.
  name: Ensure DocDB clusters being created are set to be encrypted at rest using
    customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/documentdb/latest/developerguide/encryption-at-rest.html>
      to enable encryption at rest using a customer-managed CMK.
    terraform: For the aws_docdb_cluster resource, set the argument storage_encrypted
      to true and set the argument kms_key_id to use a customer-managed CMK ARN.
  resource_type:
  - database
  rule_id: not_car_docdb_cluster_encrypted_at_rest_using_customer_managed_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '7.1'
  description: When setting an IAM policy, one may inadvertently grant a permission
    which can later be used for privilege escalation. For example, by letting a user
    attach a policy to IAM entities, they can attach the policy to themselves, and
    escalate their permissions in the process. Cloudrail will look for policies in
    use that can create this loophole unintentionally and flag them. Cloudrail will
    only look at policies that are actually in use.
  human_readable_logic: Cloudrail will inspect all of the permissions given to IAM
    entities and look for permissions that may result in privilege escalation. For
    example, if an IAM role has iam:AttachRolePolicy, that role can escalate its own
    permissions by attaching a policy to itself. There are various permissions which
    can be used to achieve privilege escalation, and Cloudrail will look for them.
    If any are found, a violation will be flagged with specific information about
    the problematic permissions.
  name: Disallow IAM permissions which can lead to privilege escalation
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create-console.html>
      to update the IAM policy permissions.
    terraform: For the aws_iam_policy resource, set policy argument to use a policy
      with proper permissions.
  resource_type:
  - iam
  rule_id: iam_priv_escalation_policy
  rule_type: context_aware
  security_layer: iam
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the EFS filesystems being created in your environment.
    If a filesystem is not set to encrypt at rest, Cloudrail will highlight it as
    a violation. This rule will only flag a violation for resources that are not yet
    created.
  human_readable_logic: Cloudrail will identify all EFS filesystems in the Terraform
    plan that are going to be created and are not configured to be encrypted at rest.
  name: Ensure EFS filesystems being created are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/efs/latest/ug/encryption-at-rest.html>
      to enable encryption at rest for EFS filesystems.
    terraform: For the aws_efs_file_system resource, set encrypted argument to true.
  resource_type:
  - storage
  rule_id: non_car_efs_filesystem_encrypt_at_rest_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '4.1'
  description: It is best to use TLS v1.2 in all encrypted HTTP communications. By
    default, the API gateway will support TLS v1.0 and v1.1, which should be disabled.
    If an API Gateway is not set to allow only TLS v1.2, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will identify all API Gateways within your AWS account
    and Terraform plan that have a domain configured and allowing TLS v1.0 or v1.1.
  name: Ensure API Gateway uses modern TLS
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html>
      to set a security policy that uses TLS v1.2.
    terraform: For the aws_api_gateway_domain_name resource, set the argument security_policy
      argument to "TLS_1_2".
  resource_type:
  - content_delivery
  rule_id: non_car_api_gateway_tls
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the CloudFront Distribution being created in
    your environment. If it is not using Field Level Encryption, Cloudrail will highlight
    it as a violation. This rule will only flag a violation for resources that are
    not yet created.
  human_readable_logic: Cloudrail will identify all CloudFront distributions in the
    Terraform plan with cache behavior blocks not configured to perform field-level
    encryption.
  name: Ensure CloudFront Distribution being created are set to perform field-level
    encryption
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/field-level-encryption.html>
      to enable field-level encryption.
    terraform: For the aws_cloudfront_distribution resource, in default_cache_behavior
      (and/or ordered_cache_behavior) block, set the field_level_encryption_id argument
      to the Field Level encryption configuration ID.
  resource_type:
  - content_delivery
  rule_id: non_car_cloudfront_distribution_field_level_encryption_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Kinesis streams in your environment. If a
    stream is not set to encrypt at rest, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all Kinesis streams within your AWS
    account and Terraform plan that are not configured to be encrypted at rest.
  name: Ensure Kinesis streams are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/streams/latest/dev/getting-started-with-sse.html>
      to enable encryption for Kinesis streams.
    terraform: For the aws_kinesis_stream resource, set the encryption_type argument
      to "KMS" and set kms_key_id argument.
  resource_type:
  - streaming
  rule_id: non_car_kinesis_stream_encrypt_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the X-Ray encryption config in your environment.
    If the encryption config is not set to encrypt at rest using a customer-managed
    CMK, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify X-Ray encryption config within your
    AWS account and Terraform plan that is not configured to encrypt at rest using
    a customer-managed CMK.
  name: Ensure X-Ray encryption config is set to encrypt at rest with customer-managed
    CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/xray/latest/devguide/xray-console-encryption.html>
      to enable encryption using a customer-managed CMK.
    terraform: For the aws_xray_encryption_config resource, set the argument type
      to "KMS" and set key_id argument to a customer-managed CMK ARN.
  resource_type:
  - logging
  rule_id: non_car_xray_encryption_config_encrypt_at_rest_with_customer_managed_CMK
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Kinesis firehose delivery stream in your
    environment. If a stream is not set to encrypt at rest, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will identify all Kinesis Firehose delivery streams
    within your AWS account and Terraform plan that are not configured to be encrypted
    at rest.
  name: Ensure Kinesis Firehose delivery stream are set to be encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/firehose/latest/dev/create-configure.html>
      to enable encryption for Kinesis Data Firehose.
    terraform: For the aws_kinesis_firehose_delivery_stream resource, in server_side_encryption
      block, set the enable argument to true.
  resource_type:
  - streaming
  rule_id: non_car_kinesis_firehose_delivery_stream_encrypt_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '8.2'
  description: Cloudrail will review your AWS account password policy. If your policy
    password expire setting is greater than 90 days this rule will trigger. This rule
    will only flag a violation for resources that are not yet created.
  human_readable_logic:
    params:
    - This rule checks to ensure your password policy has a maximum age set
    - then checks password maximum age is 90 days or less.
    template: iam_account_password_policy_rule_human_readable_logic_template
  name: Ensure your account password policy expires passwords within 90 days or less
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy>
      to require a password expiration of 90 days or less.
    terraform: For the aws_iam_account_password_policy resource, set the max_password_age
      argument to 90.
  resource_type:
  - iam
  rule_id: non_car_aws_iam_password_policy_expiry
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '1.8'
    PCI DSS:
      3.2.1:
      - '8.2'
  description: Cloudrail will review your AWS account password policy. If your accounts
    password policy allows for passwords under 14 characters, this rule will trigger.
    This rule will only flag a violation for resources that are not yet created.
  human_readable_logic:
    params:
    - This rule checks to ensure your password policy is at least 14 characters in
      length (longer preferred).
    template: iam_account_password_policy_rule_human_readable_logic_template
  name: Ensure the IAM password password policy requires a password of at least 14
    characters in length
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy>
      to require a Password minimum length of at least 14 characters.
    terraform: For the aws_iam_account_password_policy resource, set the minimum_password_length
      argument to at least 14.
  resource_type:
  - iam
  rule_id: non_car_aws_iam_password_policy_min_length
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '8.2'
  description: Cloudrail will review your AWS account password policy. If your account
    password policy does not enforce at least one lowercase letter this violation
    will trigger.
  human_readable_logic:
    params:
    - If you do not require lowercase characters this rule will trigger.
    template: iam_account_password_policy_rule_human_readable_logic_template
  name: Ensure the IAM password policy requires at least one lowercase letter
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy>
      to require at least one lowercase letter.
    terraform: For the aws_iam_account_password_policy resource, set the require_lowercase_characters
      argument to true.
  resource_type:
  - iam
  rule_id: non_car_aws_iam_password_policy_lower_required
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '8.2'
  description: Cloudrail will review your AWS account password policy. If your account
    password policy does not enforce at least one number this violation will trigger.
  human_readable_logic:
    params:
    - If you do not require numbers in this password policy
    - the rule will trigger.
    template: iam_account_password_policy_rule_human_readable_logic_template
  name: Ensure IAM password policy requires at least one number
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy>
      to require at least one number.
    terraform: For the aws_iam_account_password_policy resource, set the require_numbers
      argument to true.
  resource_type:
  - iam
  rule_id: non_car_aws_iam_password_policy_num_required
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '1.9'
    PCI DSS:
      3.2.1:
      - '8.2'
  description: Cloudrail will review your AWS account password policy. If your account
    password policy allows users to re-use their previous password this rule will
    trigger.
  human_readable_logic:
    params:
    - AWS allows you to set a password reuse prevention between 1-24
    - this means users can not reuse the same password when the MaxPasswordAge expires.
      Setting this to 24 enforces users cannot re-use their passwords.
    template: iam_account_password_policy_rule_human_readable_logic_template
  name: Ensure IAM password policy does not allow password re-use
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy>
      to set Prevent password reuse to 24.
    terraform: For the aws_iam_account_password_policy resource, set the password_reuse_prevention
      argument to 24.
  resource_type:
  - iam
  rule_id: non_car_aws_iam_password_policy_password_reuse
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '8.2'
  description: Cloudrail will review your AWS account password policy. If your account
    password policy does not enforce at least one symbol, violation will be triggered.
  human_readable_logic:
    params:
    - If the policy does not require the use of symbols this rule will trigger.
    template: iam_account_password_policy_rule_human_readable_logic_template
  name: Ensure the IAM password policy requires at least one symbol
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy>
      to set a proper password policy.
    terraform: For the aws_iam_account_password_policy resource, set the require_symbols
      argument to true.
  resource_type:
  - iam
  rule_id: non_car_aws_iam_password_policy_symbol_required
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '8.2'
  description: Cloudrail will review your AWS account password policy. If your account
    password policy does not enforce at least one upper case letter this violation
    will trigger.
  human_readable_logic:
    params:
    - If the policy does not require the use of uppercase characters this rule will
      trigger.
    template: iam_account_password_policy_rule_human_readable_logic_template
  name: Ensure IAM password policy requires at least one uppercase letter
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_account-policy.html#IAMPasswordPolicy>
      to set a proper password policy.
    terraform: For the aws_iam_account_password_policy resource, set the require_uppercase_characters
      argument to true.
  resource_type:
  - iam
  rule_id: non_car_aws_iam_password_policy_upper_required
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Workspaces being created in your environment.
    If a workspace is not set to encrypt root volume at rest, Cloudrail will highlight
    it as a violation. This rule will only flag a violation for resources that are
    not yet created.
  human_readable_logic: Cloudrail will identify all Workspaces in the Terraform plan
    that are going to be created and are not configured to encrypt root volume at
    rest.
  name: Ensure Workspaces being created are set to encrypt root volume at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/workspaces/latest/adminguide/encrypt-workspaces.html>
      to encrypt root volumes of Workspaces.
    terraform: For the aws_workspaces_workspace resource, set the root_volume_encryption_enabled
      argument to true and set a KMS key in volume_encryption_key argument.
  resource_type:
  - compute
  rule_id: non_car_workspace_root_volume_encrypt_at_rest_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the Workspaces being created in your environment.
    If a workspace is not set to encrypt root volume at rest using a customer-managed
    CMK, Cloudrail will highlight it as a violation. This rule will only flag a violation
    for resources that are not yet created.
  human_readable_logic: Cloudrail will identify all Workspaces in the Terraform plan
    that are going to be created and are not configured to encrypt root volume at
    rest using a customer-managed CMK.
  name: Ensure Workspaces being created are set to encrypt root volume at rest with
    customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/workspaces/latest/adminguide/encrypt-workspaces.html>
      to encrypt root volumes of Workspaces using a customer-managed CMK.
    terraform: For the aws_workspaces_workspace resource, set the root_volume_encryption_enabled
      argument to true and set the volume_encryption_key argument to use a customer-managed
      CMK ARN.
  resource_type:
  - compute
  rule_id: non_car_workspace_root_volume_encrypt_at_rest_with_customer_managed_CMK_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the Workspaces being created in your environment.
    If a workspace is not set to encrypt user volume at rest using a customer-managed
    CMK, Cloudrail will highlight it as a violation. This rule will only flag a violation
    for resources that are not yet created.
  human_readable_logic: Cloudrail will identify all Workspaces in the Terraform plan
    that are going to be created and are not configured to encrypt user volume at
    rest using a customer-managed CMK.
  name: Ensure Workspaces being created are set to encrypt user volume at rest with
    customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/workspaces/latest/adminguide/encrypt-workspaces.html#encrypt_workspace>
      to enable user volume encryption at rest using a customer-managed CMK.
    terraform: For the aws_workspaces_workspace resource, set volume_encryption_key
      argument to use a customer-managed CMK ARN.
  resource_type:
  - compute
  rule_id: non_car_workspace_user_volume_encrypt_at_rest_with_customer_managed_cmk_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the Codebuild report groups in your environment.
    If a Report Group is not set to encrypt at rest using a customer-managed CMK,
    Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify CodeBuild report groups within your
    AWS account and Terraform plan that are not configured to encrypt at rest using
    a customer-managed CMK.
  name: Ensure Codebuild report groups being created are set to be encrypted at rest
    with customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/codebuild/latest/userguide/test-report-group-create-console.html>
      to enable report group encryption at rest using a customer-managed CMK.
    terraform: For the aws_codebuild_report_group resource, in export_config, s3_destination
      block, set encryption_key argument to use a customer-managed CMK ARN.
  resource_type:
  - code
  rule_id: not_car_codebuild_report_groups_encrypted_at_rest_with_customer_managed_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Workspaces being created in your environment.
    If a workspace is not set to encrypt user volume at rest, Cloudrail will highlight
    it as a violation. This rule will only flag a violation for resources that are
    not yet created.
  human_readable_logic: Cloudrail will identify all Workspaces in the Terraform plan
    that are going to be created and are not configured to encrypt user volume at
    rest.
  name: Ensure Workspaces being created are set to encrypt user volume at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/workspaces/latest/adminguide/encrypt-workspaces.html>
      to encrypt user volumes of Workspaces.
    terraform: For the aws_workspaces_workspace resource, set the user_volume_encryption_enabled
      argument to true and set a KMS key in volume_encryption_key argument.
  resource_type:
  - compute
  rule_id: non_car_workspace_user_volume_encrypt_at_rest_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - 2.1.2
    PCI DSS:
      3.2.1:
      - '4.1'
  description: "Access to objects in S3 should only be done via HTTPS. Blocking HTTP\
    \ can be done by including a SecureTransport condition in the S3 bucket\u2019\
    s policy."
  human_readable_logic: "For each S3 bucket, Cloudrail will look at the policy. If\
    \ a policy is missing, or there is one but there\u2019s no denial of insecure\
    \ traffic (aws:SecureTransport == false), a violation will be highlighted."
  name: Enforce use of HTTPS in S3 bucket policy
  remediation_steps:
    console: Follow the guide at <https://aws.amazon.com/premiumsupport/knowledge-center/s3-bucket-policy-for-config-rule/>
      to create an S3 bucket policy that enforces the use of HTTPS.
    terraform: For the aws_s3_bucket_policy resource, ensure the policy denies all
      actions on the bucket and objects when the request meets the condition (aws:SecureTransport
      == false).
  resource_type:
  - iam
  rule_id: non_car_s3_bucket_policy_secure_transport
  rule_type: non_context_aware
  security_layer: storage
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '3.2'
    PCI DSS:
      3.2.1:
      - '10.5'
  description: Log validation is important for CloudTrail trails to make sure logs
    are not invalid nor tampered with. Cloudrail will identify if log validation is
    not set.
  human_readable_logic: Cloudrail will identify all cloudtrail trails within your
    AWS account. If we detect a trail, we will look to see if log validation is set
    on the trail, if there is no validation enabled, this rule will fire.
  name: Ensure CloudTrail trails have log validation enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-log-file-validation-enabling.html>
      to enable log file integrity validation.
    terraform: For the aws_cloudtrail resource, set the enable_log_file_validation
      argument to true.
  resource_type:
  - logging
  rule_id: non_car_aws_cloudtrail_log_validation_disabled
  rule_type: non_context_aware
  security_layer: logging
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.1'
  description: Having a retention policy on CloudWatch groups is advisable to make
    sure logs are kept for as long as needed, but not longer. Cloudrail will identify
    if a retention policy is not set.
  human_readable_logic: "Cloudrail will identify all cloudwatch log groups in your\
    \ AWS account and Terraform plan. For each one, we will look to see if there \u201C\
    retentionInDays\u201D key exists in each of the responses. If this key does not\
    \ exist, that means there is no retention policy set. This would allow logs to\
    \ be delivered and stored in this log group forever."
  name: Ensure CloudWatch log groups have a retention policy
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html>
      to set a log data retention policy.
    terraform: For the aws_cloudwatch_log_group resource, set the retention_in_days
      argument to the number of days you want to retain log events.
  resource_type:
  - logging
  rule_id: non_car_cw_log_group_no_retention
  rule_type: non_context_aware
  security_layer: logging
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.1'
  description: Cloudrail will review your security groups. If a security group is
    using a default description, or has a rule which does not include a description,
    this rule will trigger.
  human_readable_logic: "Cloudrail will review all security groups within your AWS\
    \ account. If we find a security group we will check to see if it has a non-default\
    \ description (for example, \u201CManaged by Terraform\u201D is considered default).\
    \ If there\u2019s a default description, this rule will trigger. In addition,\
    \ Cloudrail will check that each inbound rule contains a description, if there\
    \ is no description this rule will trigger. We will also check all outbound rules.\
    \ If we find an outbound rule that does not have a target CIDR of \u20180.0.0.0/0\u2019\
    \ (default), we will check to see if there is no description set. If there is\
    \ no description, this rule will trigger."
  name: Ensure all security groups and rules have a description detailing the rule
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html>
      to update the security group or security group rules description field.
    terraform: For the aws_security_group and aws_security_group_rule resources, set
      description argument with a proper value. Note, this will force the re-creation
      of the security group and all resources that depend on it. This is an AWS limitation.
  resource_type:
  - network
  rule_id: non_car_aws_ec2_security_group_rule_no_desc
  rule_type: non_context_aware
  security_layer: networking
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description: Using wildcard actions may inadvertently allow users to take actions
    you do not want to allow them to do. It is a best practice to give specific permissions
    only.
  human_readable_logic: Cloudrail will review the Lambda function policies being created
    in your environment or currently in use. If a policy is using wildcard actions,
    Cloudrail will highlight it as a violation.
  name:
    params:
    - Lambda function
    template: policy_wildcard_violation_rule_name_template
  remediation_steps:
    console:
      params:
      - <https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html>
      - Lambda function
      template: policy_wildcard_violation_rule_console_remediation_steps
    terraform:
      params:
      - aws_lambda_permission
      template: policy_wildcard_violation_rule_iac_remediation_steps
  resource_type:
  - compute
  rule_id: non_car_aws_lambda_func_policy_wildcard
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Some 3rd party vendors may ask for the ReadOnlyAccess policy to be
    granted. This is now considered a dangerous policy, giving vendors access to confidential
    S3 bucket contents, secrets, and other sensitive items. This policy should be
    avoided and Cloudrail will flag its use as a violation.
  human_readable_logic: For each IAM entity, check if it is assigned the ReadOnlyAccess
    policy. Only look at IAM entities that are either a user with credentials (console
    login or access keys) or a role with a trust policy (meaning - someone can assume
    the role). This means you ignore users that no one can login as, or roles that
    are only internal to the account (can be used by EC2 for example).
  name: Ensure ReadOnlyAccess policy is not being used by users who can login or roles
    that can be assumed
  remediation_steps:
    console: Find the specific user, group or role in the IAM tab and change the policies
      assigned to it. Choose a more restrictive policy or create a custom one.
    terraform: 'For role: review the aws_iam_role_policy_attachment and switch to
      a policy that is more restrictive. For user: review aws_iam_user_policy_attachment,
      and for a group aws_iam_group_policy_attachment.'
  resource_type:
  - iam
  rule_id: non_car_iam_readonlyaccess_policy
  rule_type: non_context_aware
  security_layer: iam
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: "When defining a new IAM entity in infrastructure-as-code (such as\
    \ Terraform), and assigning policies to it in the same set of code, a user has\
    \ the expectation that no other policies will be assigned to the same entity through\
    \ other means. For example, a user\u2019s expectation is that no one will assign\
    \ an additional policy to the same entity through the AWS console. This rule allows\
    \ you to ensure that indeed, policy assignment to an IAM entity created in infrastructure-as-code\
    \ is only done via infrastructure-as-code, and not external means. Thereby ensuring\
    \ that the IAM entity only has the permissions declared for it in the code."
  human_readable_logic: Cloudrail will review all IAM entities (role, user, group)
    created through Terraform and that have at least one policy attached via the Terraform
    code. For each entity, it will determine if there are additional policies attached
    to it, not through the Terraform code. For example, a policy attachment done in
    the AWS console directly. If such a case occurs, a violation will be flagged.
  name: Ensure IAM entities policies are managed solely in infrastructure-as-code
  remediation_steps:
    console: Find the IAM entity within the AWS console and remove any policies attached
      that were not added originally through the infrastructure-as-code.
    terraform: Consider updating the code to reflect the policy attachments that were
      not originally done through the Terraform code. Adding the needed aws_iam_<user|role|group>_policy_attachment
      resources that are missing would resolve this.
  resource_type:
  - iam
  rule_id: car_iam_policy_control_in_iac_only
  rule_type: context_aware
  security_layer: iam
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '4.1'
  description: Cloudrail will review the ECS task definitions being created in your
    environment. If a task definition is not set to encrypt in transit with EFS volumes,
    Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all ECS task definitions in the Terraform
    plan. It will check if the task definition is using an EFS volume, and if so,
    it will check if it is enabled to perform encryption in transit.
  name: Ensure ECS task definitions being created are set to encrypt in transit with
    EFS volumes
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html>
      to enable encryption for Amazon EFS data in transit between ECS host and EFS
      server.
    terraform: For the aws_ecs_task_definition resource, in volume, efs_volume_configuration
      block, set transit_encryption argument to ENABLED.
  resource_type:
  - compute
  rule_id: non_car_ecs_task_definition_encrypt_in_transit_with_EFS
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
  description: Databases should not be publicly accessible. If a database is serving
    content to be consumed by external users, it's best to go through an API gateway
    or some other control point.
  human_readable_logic: Cloudrail will review all of the Neptune databases configured
    in your environment. For each database, it will review the security groups in
    use (where VPC or not), the subnets in use, the public IP configured (on or off)
    and other aspects. It will then attempt to determine if the database can be accessed
    from the Internet. This determination will take into account the security groups,
    subnet information, routing and other information, instead of relying solely on
    the existence of a public IP address. By doing this context-based analysis, Cloudrail
    ensures that only databases which can truly be accessed from the Internet are
    highlighted.
  name: Ensure Neptune database is not publicly accessible
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/neptune/latest/userguide/security-vpc-security-group.html>
      to modify Neptune database Security Groups to block traffic from publicly-accessible
      AWS resources.
    terraform: For the aws_neptune_cluster resource, set vpc_security_group_ids or
      cluster_security_groups arguments to use a Security Group that blocks traffic
      from publicly-accessible AWS resources.
  resource_type:
  - database
  rule_id: public_access_db_neptune
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the SSM Parameter Store SecureString parameters
    in your environment. If a SecureString is not set to be encrypted at rest using
    a customer-managed CMK, Cloudrail will highlight it as a violation. Cloudrail
    DOES NOT access the contents of the secrets themselves.
  human_readable_logic: "Cloudrail will identify SSM Parameter Store SecureString\
    \ parameters secrets within your AWS account and Terraform plan that are not configured\
    \ to be encrypted at rest using a customer-managed CMK. Cloudrail DOES NOT access\
    \ the secret\u2019s contents themselves."
  name: Ensure SSM Parameter Store SecureString strings are encrypted at rest with
    customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/systems-manager/latest/userguide/parameter-create-console.html>
      to provide a customer-managed CMK ARN for the SecureString parameter.
    terraform: For the aws_ssm_parameter resource, set key_id argument to a customer-managed
      CMK ARN.
  resource_type:
  - key_mgmt
  rule_id: non_car_ssm_parameter_store_securestring_encrypted_at_rest_with_customer_managed_CMK
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.3'
  description:
    params:
    - SQS
    template: vpc_endpoint_exposure_description_template
  human_readable_logic:
    params:
    - SQS
    - queue
    template: vpc_endpoint_exposure_human_readable_logic_template
  name:
    params:
    - SQS
    template: vpc_endpoint_exposure_name_template
  remediation_steps:
    console:
      params:
      - SQS
      template: vpc_endpoint_exposure_console_remediation_steps_template
    terraform:
      params:
      - SQS
      template: vpc_endpoint_exposure_iac_remediation_steps_template
  resource_type:
  - service_endpoint
  - queuing
  rule_id: vpc_endpoint_sqs_exposure
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Some organizations require that all resources have at least one tag
    set. This rule will review the resources that can be tagged, and make sure each
    one has a tag that is not the Name tag. Resources that are not tagged will be
    flagged.
  human_readable_logic: Cloudrail will iterate over all resources in the cloud account
    and Terraform code, and for those that support tags, will check to see if they
    have any tags set other than the Name tag.
  name: Ensure all resources that can be tagged have at least one tag
  remediation_steps:
    console: Access the specific resource in the AWS console and add tags.
    terraform: Add a tags section to the resource with at least one tag beyond the
      Name tag.
  resource_type:
  - all
  rule_id: non_car_all_resources_tagged
  rule_type: non_context_aware
  security_layer: tagging
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: "By default, Lambda functions have log groups created for them (either\
    \ explicitly by the user, or by AWS). It\u2019s important to set a retention period\
    \ on logs, and not use the default of AWS."
  human_readable_logic: "Cloudrail will look through all Lambda functions in both\
    \ AWS and Terraform. For each function, it will try to find a matching log group,\
    \ or will assume AWS will create one automatically if a specific one is not provided.\
    \ It will then review the matching log group\u2019s retention settings."
  name: Ensure each Lambda function has a non-infinite log retention
  remediation_steps:
    console: Find the specific log group for the Lambda function, and change its retention
      by following <https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Working-with-log-groups-and-streams.html#SettingLogRetention>.
    terraform: Update the retention_in_days field in the aws_cloudwatch_log_group
      resource. If you haven't specified one explicitly, create an aws_cloudwatch_log_group
      resource for the Lambda function as part of the Terraform code.
  resource_type:
  - logging
  rule_id: non_car_lambda_logging_not_infinite
  rule_type: context_aware
  security_layer: logging
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
  description:
    params:
    - SQS
    - sqs
    template: vpc_endpoint_subnet_exposure_description_template
  human_readable_logic:
    params:
    - SQS
    - queue
    template: vpc_endpoint_subnet_exposure_human_readable_logic_template
  name:
    params:
    - SQS
    template: vpc_endpoint_subnet_exposure_name_template
  remediation_steps:
    console:
      params:
      - SQS
      template: vpc_endpoint_subnet_exposure_console_remediation_steps_template
    terraform:
      params:
      - SQS
      template: vpc_endpoint_subnet_exposure_iac_remediation_steps_template
  resource_type:
  - service_endpoint
  - queuing
  rule_id: vpc_endpoint_sqs_subnet_exposure
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description:
    params:
    - EC2
    template: vpc_endpoint_exposure_description_template
  human_readable_logic:
    params:
    - EC2
    - instance
    template: vpc_endpoint_exposure_human_readable_logic_template
  name:
    params:
    - EC2
    template: vpc_endpoint_exposure_name_template
  remediation_steps:
    console:
      params:
      - EC2
      template: vpc_endpoint_exposure_console_remediation_steps_template
    terraform:
      params:
      - EC2
      template: vpc_endpoint_exposure_iac_remediation_steps_template
  resource_type:
  - service_endpoint
  - queuing
  rule_id: vpc_endpoint_ec2_exposure
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Sagemaker Endpoint Configurations being created
    in your environment. If a configuration is not set to encrypt data on the storage
    volume attached to the ML compute instance that hosts the endpoint, Cloudrail
    will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all Sagemaker Endpoint Configurations
    in the Terraform plan that are going to be created and are not configured to encrypt
    data at rest.
  name: Ensure Sagemaker endpoint configurations being created are set to be encrypted
    data at rest
  remediation_steps:
    console: "In Amazon Sagemaker, Inference, Endpoint configurations, set \u201C\
      Encryption key\u201D to use a Key ARN."
    terraform: For the aws_sagemaker_endpoint_configuration resource, set kms_key_id
      argument to a Key ARN.
  resource_type:
  - compute
  rule_id: not_car_sagemaker_endpoint_configurations_encrypt_data_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the Sagemaker Notebook instances being created
    in your environment. If an instance is not set to encrypt artifacts at rest using
    customer-managed CMK, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all Sagemaker Notebook instances in
    the Terraform plan that are going to be created and are not configured to encrypt
    artifacts at rest using a customer-managed CMK.
  name: Ensure Sagemaker Notebook instances being created are set to encrypt artifacts
    at rest with customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/sagemaker/latest/dg/howitworks-create-ws.html>
      to enable encryption at rest using a customer-managed CMK.
    terraform: For the aws_sagemaker_notebook_instance resource, set kms_key_id argument
      to a customer-managed CMK ARN.
  resource_type:
  - compute
  rule_id: not_car_sagemaker_notebook_instances_encrypt_artifacts_at_rest_with_customer_managed_CMK_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '7.1'
  description: When a role is created, a "trust policy" is used to declare who can
    assume the role. The principal of the trust policy must be specific, and not use
    the "*" value.
  human_readable_logic: Cloudrail will review all IAM roles in the account. For each
    one, it will look at the assume role policy to determine if any of the principals
    are too wide. If a wide principal is found (like "*"), without any conditions,
    the role will be flagged.
  name: Ensure no role uses an overly wide principal for assume role policy
  remediation_steps:
    console: 'Follow AWS''s guidance on how to write secure IAM role trust policies:
      <https://aws.amazon.com/blogs/security/how-to-use-trust-policies-with-iam-roles/>
      iac_remediation_steps: For the aws_sagemaker_endpoint_configuration resource,
      set kms_key_id argument to a Key ARN.'
    terraform: Edit the assume_role_policy under the aws_iam_role, and either make
      the Principal more specific or add the use of a condition in the policy.
  resource_type:
  - iam
  rule_id: non_car_iam_role_assume_role_principal_too_wide
  rule_type: non_context_aware
  security_layer: iam
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the RDS cluster instances being created in your
    environment. If an RDS cluster instance is not set to encrypt the performance
    insights with a customer-managed CMK, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all RDS cluster instances in the Terraform
    plan that are going to be created and are not configured to encrypt the performance
    insights using a customer-managed CMK.
  name: Ensure RDS cluster instances being created are set to encrypt the performance
    insights with customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.Enabling.html>
      to enable Performance Insights encryption using a customer-managed CMK.
    terraform: For the aws_rds_cluster_instance resource, set performance_insights_kms_key_id
      argument to use a customer-managed CMK ARN.
  resource_type:
  - database
  rule_id: non_car_rds_cluster_instance_encrypt_performance_insights_with_customer_managed_cmk_creating
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
  description: Databases should not be publicly accessible. If a database is serving
    content to be consumed by external users, it's best to go through an API gateway
    or some other control point.
  human_readable_logic: Cloudrail will review all of the DMS Replication instances
    configured in your environment. For each instance, it will review the security
    groups in use (where VPC or not), the subnets in use, the public IP configured
    (on or off) and other aspects. It will then attempt to determine if the instance
    can be accessed from the Internet. This determination will take into account the
    security groups, subnet information, routing and other information, instead of
    relying solely on the existence of a public IP address. By doing this context-based
    analysis, Cloudrail ensures that only instances which can truly be accessed from
    the Internet are highlighted.
  name: Ensure DMS Replication instance is not publicly accessible
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Security.html>,
      under the section "Network security for AWS Database Migration Service" to modify
      DMS Replication instances Security Groups to block traffic from publicly-accessible
      AWS resources.
    terraform: For the dms_replication_instance resource, set vpc_security_group_ids
      arguments to use a Security Group that blocks traffic from publicly-accessible
      AWS resources.
  resource_type:
  - database
  rule_id: public_access_dms_replication_instance
  rule_type: context_aware
  security_layer: networking
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Excess of permissions in a Lambda Function can lead to inadvertently
    exposed resources such as S3 buckets. Best practices suggest use of least privileges
    - listing specific S3 buckets the Lambda Function is allowed to access. The Execution
    Role must be least privilege as an attacker can potentially access other S3 buckets
    if the application is exploited.
  human_readable_logic: Cloudrail will check if there is an API Gateway that's publicly
    accesible, if so it will also check for the existence of Lambda Functions that
    can be invoked by any of those API Gateways and if there is any it will check
    the execution role in the Lambda Function to verify if access to S3 is not limited
    to certain buckets, Cloudrail will also consider the bucket policy to flag only
    those buckets that can be accessed by the Lambda Function.
  name: S3 Bucket is exposed via an overly permissive Lambda Execution Role
  remediation_steps:
    console: Limit the actions and resources in the execution role policy of Lambda
      Function to the minimum possible, avoiding the use of wildcards.
    terraform: Locate the aws_iam_policy resource associated to execution role of
      the Lambda Function and set the actions and resources to the minimum possible,
      avoiding the use of wildcards.
  resource_type:
  - iam
  rule_id: s3_lambda_indirect_exposure
  rule_type: context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the Sagemaker Notebook instances in your environment.
    If an instance uses direct internet access, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all Sagemaker Notebook instances which
    use direct internet access.
  name: Ensure no direct internet access is allowed from Sagemaker Notebook instances
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-notebook-and-internet-access.html>
      to configure your instance with some VPC, and disable the "direct internet access"
      option while creating the Sagemaker Notebook instance.
    terraform: For the aws_sagemaker_notebook_instance resource, set direct_internet_access
      argument to "Disabled", and add subnet_id and security_groups argument for the
      resource.
  resource_type:
  - compute
  rule_id: non_car_no_direct_internet_access_allowed_from_sagemaker_notebook_instance_rule
  rule_type: non_context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description:
    params:
    - SECURITY
    - ERROR
    template: not_car_access_analyzer_validation_description_template
  human_readable_logic:
    params:
    - SECURITY
    - ERROR
    template: not_car_access_analyzer_validation_description_template
  name:
    params:
    - SECURITY
    - ERROR
    template: not_car_access_analyzer_validation_name_template
  remediation_steps:
    console:
      template: not_car_access_analyzer_validation_remediation_steps_template
    terraform:
      template: not_car_access_analyzer_validation_remediation_steps_template
  resource_type:
  - iam
  rule_id: not_car_access_analyzer_validation_error_and_security
  rule_type: non_context_aware
  security_layer: iam
  severity: major
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description:
    params:
    - WARNING
    - SUGGESTION
    template: not_car_access_analyzer_validation_description_template
  human_readable_logic:
    params:
    - WARNING
    - SUGGESTION
    template: not_car_access_analyzer_validation_description_template
  name:
    params:
    - WARNING
    - SUGGESTION
    template: not_car_access_analyzer_validation_name_template
  remediation_steps:
    console:
      template: not_car_access_analyzer_validation_remediation_steps_template
    terraform:
      template: not_car_access_analyzer_validation_remediation_steps_template
  resource_type:
  - iam
  rule_id: not_car_access_analyzer_validation_warning_and_suggestion
  rule_type: non_context_aware
  security_layer: iam
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Security Groups should be maintained carefully, in order to provide
    network access for desired entities. Having unused Security Groups is giving the
    oppertunity to accidently assign vulnerbale network access to your resources.
  human_readable_logic: Cloudrail will review all of the Network interfaces in your
    environment, and your Security Groups. Cloudrail will create a list of all used
    Security Groups, based on the Network interfaces in your environment, which are
    attached to AWS resources. It will then compare this list to the actual Security
    Groups in the account. For a Security Group which is present, but not used by
    any attached Network interface, Cloudrail will raise a violation.
  name: Ensure no unused Security Group exists in the account
  remediation_steps:
    console: Delete the unusued Security Group from your AWS Console.
    terraform: Remove the unused aws_security_group resource, from your TF template.
  resource_type:
  - compute
  rule_id: car_unused_security_group
  rule_type: context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '8.1'
  description: Roles should be maintained carefully, in order to provide access for
    desired entities. Having unused Roles may leave open a door to bad actors.
  human_readable_logic: Cloudrail will review all of the IAM Roles in your environment.
    It will utilize AWS's role usage tracking to determine when the role was used
    last. If it wasn't used in over 90 days, or was created over 90 days ago and never
    used, Cloudrail will highlight a violation.
  name: Ensure unused roles are removed
  remediation_steps:
    console: Delete the unusued IAM Roles from your AWS Console.
    terraform: Remove the unused aws_iam_role resource, from your TF template.
  resource_type:
  - iam
  rule_id: non_car_unused_roles
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '3.1'
    PCI DSS:
      3.2.1:
      - '10.1'
      - '10.2'
  description: Cloudrail will review the CloudTrail configuration in your environment.
    If it is not enabled in all regions, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will review the CloudTrail configuration within
    your AWS account and Terraform plan to check if it is enabled in all regions.
  name: Ensure CloudTrail is enabled in all regions
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-create-a-trail-using-the-console-first-time.html>
      to create a trail that logs events in all regions.
    terraform: For the aws_cloudtrail resource, set the is_multi_region_trail parameter
      to true.
  resource_type:
  - logging
  rule_id: non_car_cloudtrail_is_enabled_in_all_regions
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the CloudFront distributions in your environment.
    If a distribution is not using AWS WAF, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will review the CloudFront distributions within
    your AWS account and Terraform plan to check if they are configured to use WAF.
  name: Ensure CloudFront distribution is using WAF
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-awswaf.html>
      in order to assign an AWS WAF Web ACL to the CloudFront distribution.
    terraform: For the aws_cloudfront_distribution resource, set the web_acl_id parameter
      to a WAF Web ACL ARN value.
  resource_type:
  - content_delivery
  rule_id: non_car_cloudfront_distribution_using_waf
  rule_type: non_context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the Load Balancers in your environment. If a
    Load Balancer is not set drop invalid HTTP headers, Cloudrail will highlight it
    as a violation.
  human_readable_logic: Cloudrail will review the Load Balancers within your AWS account
    and Terraform plan to check if they are configured to drop invalid HTTP headers.
  name: Ensure Load Balancer drops invalid HTTP headers
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html>
      to enable the Drop invalid header fields parameter.
    terraform: For the aws_lb resource, set the drop_invalid_header_fields parameter
      to true.
  resource_type:
  - network
  rule_id: non_car_alb_drops_invalid_http_headers
  rule_type: non_context_aware
  security_layer: networking
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the DynamoDB tables in your environment. If a
    table is not set to be encrypted at rest using a customer-managed CMK, Cloudrail
    will highlight it as a violation.
  human_readable_logic: Cloudrail will identify DynamoDB tables within your AWS account
    and Terraform plan that are not configured to be encrypted at rest using a customer-managed
    CMK.
  name: Ensure DynamoDB tables are encrypted at rest with customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/encryption.tutorial.html>
      to set DynamoDB table encryption using a customer-managed CMK.
    terraform: For the aws_dynamodb_table resource, set kms_key_arn argument, in server_side_encryption
      block, to use a customer-managed CMK ARN.
  resource_type:
  - database
  rule_id: non_car_dynamodb_tables_encrypted_at_rest_with_customer_managed_CMK
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
      - '7.1'
  description: Cloudrail will review the ECR repositories being created in your environment.
    If a repository is not set to be encrypted at rest using a customer-managed CMK,
    Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all ECR repositories in the Terraform
    plan that are going to be created and are not configured to be encrypted at rest
    using a customer-managed CMK.
  name: Ensure ECR repositories being created are set to be encrypted at rest using
    customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonECR/latest/userguide/encryption-at-rest.html>
      to create an ECR repository with encryption at rest using a customer-managed
      CMK.
    terraform: For the aws_ecr_repository resource, set kms_key argument, in encryption_configuration
      block, to use a customer-managed CMK ARN.
  resource_type:
  - compute
  rule_id: non_car_ecr_repositories_encrypted_at_rest_with_customer_managed_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the ECR repositories configuration in your environment.
    If a repository is not configured with immutable tags, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will review the ECR repositories configuration within
    your AWS account and Terraform plan to check if image tags are set to immutable.
  name: Ensure ECR repository image tags are immutable
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonECR/latest/userguide/repository-create.html>
      in order to configure Tag immutability for an ECR repository.
    terraform: For the aws_ecr_repository resource, set the image_tag_mutability parameter
      to "IMMUTABLE".
  resource_type:
  - code
  rule_id: non_car_ecr_image_tags_immutable
  rule_type: non_context_aware
  security_layer: storage
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the ElastiCache Redis clusters configuration
    in your environment. If a Redis cluster has automatic backup turned off, Cloudrail
    will highlight it as a violation.
  human_readable_logic: Cloudrail will review the ElastiCache Redis clusters within
    your AWS account and Terraform plan to check if if they have automatic backup
    turned on.
  name: Ensure ElastiCache Redis clusters have automatic backup turned on
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/backups-automatic.html>
      in order to enable automatic backups for a ElastiCache Redis cluster.
    terraform: For the aws_elasticache_cluster resource, set the snapshot_retention_limit
      argument to a value higher than 0.
  resource_type:
  - database
  rule_id: non_car_elasticache_redis_cluster_automatic_backup_turned_on
  rule_type: non_context_aware
  security_layer: disaster_recovery
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the ECR repositories configuration in your environment.
    If a repository is not configured to scan images on push, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will review the ECR repositories configuration within
    your AWS account and Terraform plan to check if image scanning on push is enabled.
  name: Ensure ECR image scanning on push is enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html>
      to configure image scanning on push for an ECR repository.
    terraform: For the aws_ecr_repository resource, in the image_scanning_configuration
      block, set the scan_on_push parameter to true.
  resource_type:
  - code
  rule_id: non_car_ecr_image_scanning_on_push_enabled
  rule_type: non_context_aware
  security_layer: storage
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the ECS clusters configuration in your environment.
    If a cluster is not configured to enable container insights, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will review the ECS clusters configuration within
    your AWS account and Terraform plan to check if container insights is enabled.
  name: Ensure ECS cluster has container insights enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/deploy-container-insights-ECS-cluster.html>
      in order to enable container insights for an ECS cluster.
    terraform: For the aws_ecs_cluster resource, in the setting block, set the name
      argument to containerInsights and the value argument to enabled.
  resource_type:
  - compute
  rule_id: non_car_ecs_cluster_container_insights_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the EC2 instances configuration in your environment.
    If it is not configured to be EBS-optimized, Cloudrail will highlight it as a
    violation.
  human_readable_logic: Cloudrail will review the EC2 instances configuration within
    your AWS account and Terraform plan to check if it is configured to be EBS optimized.
  name: Ensure EC2 instance is EBS optimized
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html>
      to enable EBS optimization for an EC2 instance.
    terraform: For the aws_instance resource, set the ebs_optimized parameter to true.
  resource_type:
  - compute
  rule_id: non_car_ec2_instance_is_ebs_optimized
  rule_type: non_context_aware
  security_layer: storage
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the RDS instances and clusters configuration
    in your environment. If an instance or cluster is not configured with a backup
    retention policy, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will review the RDS instances and clusters within
    your AWS account and Terraform plan to check if if they have a backup retention
    policy.
  name: Ensure RDS instances and clusters have a backup retention policy
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupRetention>
      in order to set the backup retention period to a positive nonzero value for
      RDS instances. Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html>
      in order to set the backup retention period to a positive nonzero value for
      RDS clusters.
    terraform: For the aws_db_instance or aws_rds_cluster resource, set the backup_retention_period
      argument to a value higher than 0.
  resource_type:
  - database
  rule_id: non_car_rds_instance_and_cluster_backup_retention_policy
  rule_type: non_context_aware
  security_layer: disaster_recovery
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the API Gateway methods configuration in your
    environment. If a method is not configured to require authorization, Cloudrail
    will highlight it as a violation.
  human_readable_logic: Cloudrail will review the API Gateway methods configuration
    within your AWS account and Terraform plan to check if authorization has been
    enabled.
  name: Ensure API Gateway methods use authentication
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-method-settings-method-request.html#setup-method-request-authorization>
      in order to configure the authorization type on the REST API methods.
    terraform: "For the aws_api_gateway_method resource, set the authorization argument\
      \ to a value other than \u201CNONE\u201D."
  resource_type:
  - content_delivery
  rule_id: non_car_api_gateway_methods_use_authentication
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review RDS instances and clusters configuration in your
    environment. If IAM authentication is not enabled, Cloudrail will highlight it
    as a violation.
  human_readable_logic: Cloudrail will review the configuration of RDS instances and
    clusters within your AWS account and Terraform plan to check if IAM authentication
    is enabled.
  name: Ensure RDS database has IAM authentication enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.Enabling.html>
      in order to enable IAM database authentication for the RDS instance or cluster.
    terraform: For the aws_db_instance or aws_rds_cluster resources, set the iam_database_authentication_enabled
      argument to true.
  resource_type:
  - database
  rule_id: non_car_rds_database_iam_authentication_enabled
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the Config aggregator configuration in your environment.
    If it is not enabled in all regions, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will review the Config aggregator configuration
    within your AWS account and Terraform plan to check if it is enabled in all regions
    either at account level or at organization level.
  name: Ensure Config aggregator is enabled in all regions
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/config/latest/developerguide/setup-aggregator-console.html>
      to enable Config aggregator in all regions.
    terraform: For the aws_config_configuration_aggregator resource, in the account_aggregation_source
      or organization_aggregation_source blocks, set the all_regions parameter to
      true.
  resource_type:
  - logging
  rule_id: non_car_config_aggregator_is_enabled_in_all_regions
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review API Gateway stages configuration in your environment.
    If a stage is not configured to have X-Ray tracing enabled, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will review the API Gateway stages configuration
    within your AWS account and Terraform plan to check X-Ray tracing is enabled.
  name: Ensure API Gateway has X-Ray tracing enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-enabling-xray.html>
      in order to enable X-Ray tracing for the API Gateway.
    terraform: For the aws_api_gateway_stage resource, set the xray_tracing_enabled
      argument to true.
  resource_type:
  - content_delivery
  rule_id: non_car_api_gateway_xray_tracing_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.3'
  description: Cloudrail will review the CloudFront distributions configuration in
    your environment. If a distribution has access logging disabled, Cloudrail will
    highlight it as a violation.
  human_readable_logic: Cloudrail will review the CloudFront distributions configuration
    within your AWS account and Terraform plan to check if access logging is enabled.
  name: Ensure CloudFront distribution has access logging enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html>
      in order to enabled access logs for the CloudFront distribution.
    terraform: For the aws_cloudfront_distribution resource, configure the logging_config
      block with bucket argument set to the S3 bucket name for storing access logs.
  resource_type:
  - content_delivery
  rule_id: non_car_cloudfront_distribution_access_logging_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.1'
  description: Cloudrail will review the DocDB clusters configuration in your environment.
    If a cluster is not configured to export logs to CloudWatch, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will review the DocDB clusters configuration within
    your AWS account and Terraform plan to check if logging is enabled.
  name: Ensure DocDB logging is enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html>
      in order to enable audit and profiler logs export to CloudWatch.
    terraform: "For the aws_docdb_cluster resource, set the enabled_cloudwatch_logs_exports\
      \ argument to a list containing the values \u201Caudit\u201D and \u201Cprofiler\u201D\
      ."
  resource_type:
  - database
  rule_id: non_car_docdb_logging_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the EC2 instances configuration in your environment.
    If an instance does not have detailed monitoring configured, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will review the EC2 instances configuration within
    your AWS account and Terraform plan to check if detailed monitoring is enabled.
  name: Ensure EC2 instance has detailed monitoring enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch-new.html>
      in order to enable detailed monitoring for an EC2 instance.
    terraform: For the aws_instance resource, set the monitoring argument to true.
  resource_type:
  - compute
  rule_id: non_car_ec2_instance_detailed_monitoring_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.1'
  description: Cloudrail will review the Elasticsearch Domains configuration in your
    environment. If a domain does not have logging enabled, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will review the Elasticsearch Domains configuration
    within your AWS account and Terraform plan to check if logging is enabled.
  name: Ensure Elasticsearch Domain has logging enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createdomain-configure-slow-logs.html>
      in order to configure log publishing for the Elasticsearch domain.
    terraform: For the aws_elasticsearch_domain resource, set the log_publishing_options
      block with enabled argument set to true, log_type argument set to any of the
      valid values, and cloudwatch_log_group_arn argument set to the ARN of the CloudWatch
      Log Group.
  resource_type:
  - database
  rule_id: non_car_elasticsearch_domain_logging_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.3'
  description: Cloudrail will review the Elastic Load Balancers configuration in your
    environment. If a load balancer does not have logging enabled, Cloudrail will
    highlight it as a violation.
  human_readable_logic: Cloudrail will review the Elasticsearch Domains configuration
    within your AWS account and Terraform plan to check if logging is enabled.
  name: Ensure ELB has logging enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html>
      or <https://docs.aws.amazon.com/elasticloadbalancing/latest/network/load-balancer-access-logs.html>
      in order to enable access logs for the load balancer.
    terraform: For the aws_lb resource, set the access_logs block with enabled argument
      set to true and the bucket argument set to the S3 bucket name.
  resource_type:
  - network
  rule_id: non_car_elb_logging_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.3'
  description: Cloudrail will review Global Accelerator accelerators configuration
    in your environment. If an accelerator does not have flow logs enabled, Cloudrail
    will highlight it as a violation.
  human_readable_logic: Cloudrail will review the configuration of Global Accelerator
    accelerators within your AWS account and Terraform plan to check if flow logs
    are enabled.
  name: Ensure Global Accelerator accelerator has flow logs enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/global-accelerator/latest/dg/monitoring-global-accelerator.flow-logs.html>
      in order to enable flow logs for an accelerator.
    terraform: For the aws_globalaccelerator_accelerator resource, set the attributes
      block with flow_logs_enabled argument set to true, flow_logs_s3_bucket argument
      set to the S3 bucket name, and flow_logs_s3_prefix argument to the prefix used
      for flow logs.
  resource_type:
  - network
  rule_id: non_car_global_accelerator_flow_logs_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  description: Cloudrail will review the Lambda functions configuration in your environment.
    If a function does not have tracing in Active mode, Cloudrail will highlight it
    as a violation.
  human_readable_logic: Cloudrail will review the configuration of Lambda functions
    within your AWS account and Terraform plan to check if X-Ray tracing is enabled.
  name: Ensure Lambda function has X-Ray tracing enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/xray/latest/devguide/xray-services-lambda.html>
      in order to enable X-Ray tracing for a Lambda function.
    terraform: "For the aws_lambda_function resource, set the tracing_config block\
      \ with mode argument set to \u201CActive\u201D."
  resource_type:
  - compute
  rule_id: non_car_lambda_function_xray_tracing_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.2'
      - '10.3'
  description: Cloudrail will review the Neptune clusters configuration in your environment.
    If a cluster is not configured to export logs to Cloudwatch, Cloudrail will highlight
    it as a violation.
  human_readable_logic: Cloudrail will review the configuration of Neptune clusters
    within your AWS account and Terraform plan to check if Cloudwatch log export is
    enabled.
  name: Ensure Neptune cluster has logging enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/neptune/latest/userguide/cloudwatch-logs.html>
      in order to enable log export to Cloudwatch for Neptune cluster.
    terraform: "For the aws_neptune_cluster resource, set enable_cloudwatch_logs_exports\
      \ argument to a list containing the element \u201Caudit\u201D."
  resource_type:
  - database
  rule_id: non_car_neptune_cluster_logging_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.2'
      - '10.3'
  description: Cloudrail will review the RDS instances and clusters configuration
    in your environment. If an instance or cluster is not configured to export logs
    to Cloudwatch, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will review the configuration of RDS instances and
    clusters within your AWS account and Terraform plan to check if Cloudwatch log
    export is enabled.
  name: Ensure RDS instances and clusters have logging enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch>
      in order to enable log export to Cloudwatch for RDS instances and clusters.
    terraform: For the aws_db_instance or aws_rds_cluster resource, set enabled_cloudwatch_logs_exports
      argument to a list containing at least one of the supported log types.
  resource_type:
  - database
  rule_id: non_car_rds_instance_and_cluster_logging_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.2'
      - '10.3'
  description: Cloudrail will review the Redshift clusters configuration in your environment.
    If a cluster does not have logging enabled, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will review the configuration of Redshift clusters
    within your AWS account and Terraform plan to check if logging is enabled.
  name: Ensure Redshift clusters have logging enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html>
      in order to enable logging to an S3 bucket.
    terraform: For the aws_redshift_cluster resource, set the logging block with enable
      argument set to true and bucket_name argument to the S3 bucket name to store
      the logs.
  resource_type:
  - database
  rule_id: non_car_redshift_cluster_logging_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.2'
  description: Cloudrail will review the REST API Gateways configuration in your environment.
    If a stage does not have access logging enabled, Cloudrail will highlight it as
    a violation.
  human_readable_logic: Cloudrail will review the configuration of REST API Gateways
    within your AWS account and Terraform plan to check if logging is enabled for
    all stages.
  name: Ensure REST API Gateway has access logging enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html>
      in order to enable logging for a REST API Gateway stage.
    terraform: For the aws_api_gateway_stage resource, set the access_log_settings
      block with destination_arn argument set to the ARN of a CloudWatch Log Group
      and set the format argument to a valid log format.
  resource_type:
  - content_delivery
  rule_id: non_car_rest_api_gateway_access_logging_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    CIS:
      1.3.0:
      - '3.6'
    PCI DSS:
      3.2.1:
      - '10.2'
  description: Cloudrail will review the S3 buckets configuration in your environment.
    If a bucket does not have access logging enabled, Cloudrail will highlight it
    as a violation.
  human_readable_logic: Cloudrail will review the configuration of S3 buckets within
    your AWS account and Terraform plan to check if access logging is enabled.
  name: Ensure S3 bucket has access logging enabled
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html>
      in order to enable server access logging for an S3 bucket.
    terraform: For the aws_s3_bucket resource, set the logging block with target_bucket
      argument set to the name of an S3 bucket that will receive the log objects.
  resource_type:
  - storage
  rule_id: non_car_s3_bucket_access_logging_enabled
  rule_type: non_context_aware
  security_layer: logging
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the Athena database configuration. If a database
    is not configured to be encrypted at rest, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will review the Athena databases configuration in
    your Terraform plan to check if encryption at rest is enabled.
  name: Ensure Athena database is encrypted at rest
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/athena/latest/ug/creating-tables-based-on-encrypted-datasets-in-s3.html>
      in order to encrypt the Athena database.
    terraform: "For the aws_athena_database resource, set the encryption_configuration\
      \ block with the encryption_option argument set to either \u201CSSE_S3\u201D\
      , \u201CSSE_KMS\u201D, or \u201CCSE_KMS\u201D."
  resource_type:
  - database
  rule_id: non_car_athena_database_encrypted_at_rest
  rule_type: non_context_aware
  security_layer: encryption
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '1.2'
      - '1.3'
      - '7.2'
  description: Broad permissions in a Lambda function are dangerous and also are potentially
    expensive as anyone can invoke the function. Best practices suggest use the approach
    of least privilege. Generally, the correct approach is not to use public Lambda
    functions but to put them behind an API Gateway.
  human_readable_logic: "Cloudrail will review all Lambda functions, both those defined\
    \ in the AWS account, and those included in a Terraform plan, to determine if\
    \ any of the permissions they grant include a \u201C*\u201D or similar principal\
    \ who can InvokeFunction."
  name: Ensure Lambda functions cannot be invoked by anonymous or all AWS authenticated
    users
  remediation_steps:
    console: Follow the steps in <https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html#permissions-resource-serviceinvoke>
      Avoid using wildcards in the principal.
    terraform: In resource aws_lambda_permission avoid using wildcards in the principal.
  resource_type:
  - compute
  rule_id: non_car_lambda_public_exposure
  rule_type: non_context_aware
  security_layer: iam
  severity: medium
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '3.4'
  description: Cloudrail will review the FSx Windows File Systems being created in
    your environment. If a file system is not set to be encrypted at rest using a
    customer-managed CMK, Cloudrail will highlight it as a violation.
  human_readable_logic: Cloudrail will identify all FSx Windows File Systems in the
    Terraform plan that are going to be created and are not configured to be encrypted
    at rest using a customer-managed CMK.
  name: Ensure FSx Windows File Systems being created are set to be encrypted at rest
    using customer-managed CMK
  remediation_steps:
    console: Follow the guide at <https://docs.aws.amazon.com/fsx/latest/WindowsGuide/getting-started-step1.html>
      to enable file system encryption using a customer-managed CMK.
    terraform: For the aws_fsx_windows_file_system resource, set kms_key_id argument
      to use a customer-managed CMK ARN.
  resource_type:
  - storage
  rule_id: non_car_fsx_windows_file_system_encrypted_at_rest_with_customer_managed_cmk
  rule_type: non_context_aware
  security_layer: encryption
  severity: low
  supported_iac_types:
  - terraform
- cloud_provider: amazon_web_services
  compliance:
    PCI DSS:
      3.2.1:
      - '10.1'
      - '10.2'
  description: It is critical to enable Cloudtrail and store it in a bucket for logging
    and incident response.
  human_readable_logic: Cloudrail will ensure that there is at least one trail enabled
    in the account.
  name: Ensure there is at least one trail enabled in Cloudtrail
  remediation_steps:
    console: Go to Cloudtrail and in the Dashboard click on Create trail, make sure
      multi-region is enabled.
    terraform: Create terraform resource aws_cloudtrail and send logs to an S3 bucket.
  resource_type:
  - logging
  rule_id: ensure_cloudtrail_trail_exists
  rule_type: non_context_aware
  security_layer: logging
  severity: major
  supported_iac_types:
  - terraform
