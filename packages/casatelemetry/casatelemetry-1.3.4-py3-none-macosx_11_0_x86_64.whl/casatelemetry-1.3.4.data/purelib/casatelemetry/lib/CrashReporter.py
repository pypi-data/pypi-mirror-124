# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _CrashReporter
else:
    import _CrashReporter

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class CrashReporter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def initialize(crashDumpDirectory, crashDumpPosterApplication, crashPostingUrl, logFile):
        return _CrashReporter.CrashReporter_initialize(crashDumpDirectory, crashDumpPosterApplication, crashPostingUrl, logFile)

    @staticmethod
    def initializeFromApplication(applicationArg0):
        return _CrashReporter.CrashReporter_initializeFromApplication(applicationArg0)

    def _trigger_segfault(self, *args):
        return _CrashReporter.CrashReporter__trigger_segfault(self, *args)

    def __init__(self):
        _CrashReporter.CrashReporter_swiginit(self, _CrashReporter.new_CrashReporter())
    __swig_destroy__ = _CrashReporter.delete_CrashReporter

# Register CrashReporter in _CrashReporter:
_CrashReporter.CrashReporter_swigregister(CrashReporter)

def CrashReporter_initialize(crashDumpDirectory, crashDumpPosterApplication, crashPostingUrl, logFile):
    return _CrashReporter.CrashReporter_initialize(crashDumpDirectory, crashDumpPosterApplication, crashPostingUrl, logFile)

def CrashReporter_initializeFromApplication(applicationArg0):
    return _CrashReporter.CrashReporter_initializeFromApplication(applicationArg0)

class CrashReportHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getUniqueId(self):
        return _CrashReporter.CrashReportHelper_getUniqueId(self)

    def __init__(self):
        _CrashReporter.CrashReportHelper_swiginit(self, _CrashReporter.new_CrashReportHelper())
    __swig_destroy__ = _CrashReporter.delete_CrashReportHelper

# Register CrashReportHelper in _CrashReporter:
_CrashReporter.CrashReportHelper_swigregister(CrashReportHelper)



