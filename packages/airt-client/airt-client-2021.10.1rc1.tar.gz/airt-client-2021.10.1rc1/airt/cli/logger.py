# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/CLI_Logger.ipynb (unless otherwise specified).

__all__ = ["logger"]

# Cell

import logging

# Internal Cell

from typer import echo

# Internal Cell

logging_level = logging.WARNING

# Internal Cell


# Logger Levels
# CRITICAL = 50
# ERROR = 40
# WARNING = 30
# INFO = 20
# DEBUG = 10
# NOTSET = 0

# Create a custom logger and set the configuration to echo the logging messages
# Reference: https://github.com/tiangolo/typer/issues/203


class TyperLoggerHandler(logging.Handler):
    """A custom logger handler class that use Typer echo to log results."""

    def emit(self, record: logging.LogRecord) -> None:
        """A function to channel logger outout to Typer echo."""
        echo(self.format(record))

    @staticmethod
    def get_logger() -> logging.Logger:
        """An internal function to set the default logger configuration

        Returns:
            An instance of Logger with custom configuration that can be used across the CLI for logging
        """
        # Logger Configuration
        fmt = "%(asctime)s.%(msecs)03d [%(levelname)s] %(name)s: %(message)s"
        datefmt = "%y-%m-%d %H:%M:%S"

        formatter = logging.Formatter(fmt=fmt, datefmt=datefmt)
        handler = TyperLoggerHandler()
        handler.setFormatter(formatter)

        logger = logging.getLogger(__name__)
        logger.addHandler(handler)
        return logger


# Cell

logger = TyperLoggerHandler.get_logger()
logger.setLevel(logging_level)
