# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/CLI.ipynb (unless otherwise specified).

__all__ = ["logger", "app"]

# Cell

from typing import *
import logging

# Internal Cell

import typer

from . import ds, model, pred, token
from ..logger import get_logger, set_level

# Cell

logger = get_logger(__name__)

set_level(logging.WARNING)

# Cell

app = typer.Typer(help="airt CLI for accessing airt services.")

# Internal Cell

# token root command


@app.command(
    name="token",
    short_help="Get application token for airt service from a username/password pair.",
)
def get_token(
    username: Optional[str] = typer.Option(
        None,
        "--username",
        "-u",
        help="""Username for your developer account. If not set (default value None),
            it will try to use the value from environment variable AIRT_SERVICE_USERNAME.""",
    ),
    password: Optional[str] = typer.Option(
        None,
        "--password",
        "-p",
        help="""Password for your developer account. If not set (default value None),
            it will try to use the value from environment variable AIRT_SERVICE_PASSWORD.""",
    ),
    quiet: Optional[bool] = typer.Option(
        False,
        "--quiet",
        "-q",
        help="Output authentication token only.",
    ),
    debug: Optional[bool] = typer.Option(
        False, "--debug", "-d", help="Enable logger output with DEBUG level."
    ),
) -> None:
    """Get application token for airt service from a username/password pair.

    Before you can use the service, you must acquire a username and password for your developer account.
    Please contact us by email info@airt.ai to get one.

    The username, and password can be passed explicitly while calling this command or stored
    permanently in environment variables AIRT_SERVICE_USERNAME and AIRT_SERVICE_PASSWORD respectively.

    Upon successful authentication, the airt services will be available to access.
    """
    token.get_token(username, password, quiet, debug)


# Internal Cell

# Datasource root command

app.add_typer(
    ds.app,
    name="ds",
    short_help="A command for encapsulating the data from sources like AWS S3 bucket or a database.",
    help="""A class for encapsulating the data from sources like AWS S3 bucket or a database.
            Currently, we support reading and pushing the data to a MySql database, and to an
            AWS S3 bucket in the Parquet file format. We plan to add other databases and storage
            mediums in the future.""",
)

# Internal Cell

# Model root command

app.add_typer(
    model.app,
    name="model",
    short_help="Query the status of the model training, evaluation, and prediction on the remote server.",
    help="Query the status of the model training, evaluation, and prediction on the remote server.",
)

# Internal Cell

# Pred root command

app.add_typer(
    pred.app,
    name="pred",
    short_help="Run predictions on the data source.",
    help="Run predictions on the data source.",
)
