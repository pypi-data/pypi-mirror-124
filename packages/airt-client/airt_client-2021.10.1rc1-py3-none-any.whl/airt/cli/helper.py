# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/CLI_Helper.ipynb (unless otherwise specified).

__all__ = [
    "set_airt_service_token_envvar",
    "authenicate_user",
    "requires_auth_token",
    "mask",
    "humanize_date",
    "humanize_number",
    "humanize_size",
]

# Internal Cell

import os
from contextlib import contextmanager
import functools

import typer
import humanize
import datetime as dt
import pandas as pd

from ..client import Client
from .logger import logger

# Cell

_airt_service_token = None


@contextmanager
def set_airt_service_token_envvar():
    global _airt_service_token
    if _airt_service_token is None:
        print("_airt_service_token is None, getting a token...")

        username = os.environ["AIRT_SERVICE_USERNAME"]
        password = os.environ["AIRT_SERVICE_PASSWORD"]

        Client.authenticate(username=username, password=password)
        _airt_service_token = Client.auth_token

    try:
        os.environ["AIRT_SERVICE_TOKEN"] = _airt_service_token

        yield
    finally:
        del os.environ["AIRT_SERVICE_TOKEN"]


# Cell


@contextmanager
def authenicate_user():
    Client(
        auth_token=os.environ["AIRT_SERVICE_TOKEN"],
        server=os.environ["AIRT_SERVER_URL"],
    )

    yield


def requires_auth_token(func):
    @functools.wraps(func)
    def wrapper_decorator(*args, **kwargs):
        try:
            if ("debug" in kwargs) and kwargs["debug"]:
                logger.setLevel(logging.DEBUG)
            with authenicate_user():
                # Do something before
                value = func(*args, **kwargs)
                # Do something after
        except Exception as e:
            typer.secho(message=f"Error: {e}", err=True, fg=typer.colors.BRIGHT_RED)
            raise typer.Exit(code=1)
        return value

    return wrapper_decorator


# Cell


def mask(s: str) -> str:
    return "*" * len(s)


# Cell


def humanize_date(s: pd.Series) -> pd.Series:
    return s.apply(
        lambda date: humanize.naturaltime(
            dt.datetime.now() - dt.datetime.strptime(date, "%Y-%m-%dT%H:%M:%S")
        )
    )


# Cell


def humanize_number(s: pd.Series) -> pd.Series:
    return s.apply(
        lambda num: humanize.intcomma(int(num)) if pd.notna(num) else "unknown"
    )


# Cell


def humanize_size(s: pd.Series) -> pd.Series:
    return s.apply(
        lambda size: humanize.naturalsize(size) if pd.notna(size) else "unknown"
    )
