# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/CLI_Token.ipynb (unless otherwise specified).

__all__ = ["app"]

# Cell

from typing import *
import logging

# Internal Cell

import os
import typer

from ..client import Client
from .logger import logger
from .helper import mask

# Cell

app = typer.Typer()

# Internal Cell


@app.command(
    name="token",
    short_help="Get application token for airt service from a username/password pair.",
)
def get_token(
    username: Optional[str] = typer.Option(
        None,
        "--username",
        "-u",
        help="""Username for your developer account. If not set (default value None),
            it will try to use the value from environment variable AIRT_SERVICE_USERNAME.""",
    ),
    password: Optional[str] = typer.Option(
        None,
        "--password",
        "-p",
        help="""Password for your developer account. If not set (default value None),
            it will try to use the value from environment variable AIRT_SERVICE_PASSWORD.""",
    ),
    quiet: Optional[bool] = typer.Option(
        False,
        "--quiet",
        "-q",
        help="Output authentication token only.",
    ),
    debug: Optional[bool] = typer.Option(
        False, "--debug", "-d", help="Enable logger output with DEBUG level."
    ),
) -> None:
    """Get application token for airt service from a username/password pair.

    Before you can use the service, you must acquire a username and password for your developer account.
    Please contact us by email info@airt.ai to get one.

    The username, and password can be passed explicitly while calling this command or stored
    permanently in environment variables AIRT_SERVICE_USERNAME and AIRT_SERVICE_PASSWORD respectively.

    Upon successful authentication, the airt services will be available to access.
    """
    try:
        if debug:
            logger.setLevel(logging.DEBUG)

        Client.authenticate(username=username, password=password)

        if quiet:
            typer.echo(Client.auth_token)
        else:
            typer.echo(f"token: {Client.auth_token}")

    except Exception as e:
        typer.secho(message=f"Error: {e}", err=True, fg=typer.colors.BRIGHT_RED)
        raise typer.Exit(code=1)
