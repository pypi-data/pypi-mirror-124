# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['gradient_utils', 'gradient_utils.metrics']

package_data = \
{'': ['*']}

install_requires = \
['prometheus-client>=0.8,<0.10',
 'pymongo>=3.11.0,<4.0.0',
 'wheel>=0.35.1,<0.36.0']

setup_kwargs = {
    'name': 'gradient-utils',
    'version': '0.5.0',
    'description': 'This is an SDK for performing Machine Learning with Gradient.',
    'long_description': '![GitHubSplash](https://user-images.githubusercontent.com/585865/65443342-e630d300-ddfb-11e9-9bcd-de1d2033ea60.png)\n\n# Gradient Utils\n\n![PyPI](https://img.shields.io/pypi/v/gradient-utils)\n[![codecov](https://codecov.io/gh/Paperspace/gradient-utils/branch/master/graph/badge.svg)](https://codecov.io/gh/Paperspace/gradient-utils)\n\n<br>\n\n**Get started:** [Create Account](https://www.paperspace.com/account/signup?gradient=true) • [Install CLI](https://docs.paperspace.com/gradient/get-started/install-the-cli) • [Tutorials](https://docs.paperspace.com/gradient/tutorials) • [Docs](https://docs.paperspace.com/gradient)\n\n**Resources:** [Website](https://gradient.paperspace.com/) • [Blog](https://blog.paperspace.com/) • [Support](https://support.paperspace.com/hc/en-us) • [Contact Sales](https://use.paperspace.com/contact-sales)\n\n<br>\n\nGradient is an an end-to-end MLOps platform that enables individuals and organizations to quickly develop, train, and deploy Deep Learning models. The Gradient software stack runs on any infrastructure e.g. AWS, GCP, on-premise and low-cost [Paperspace GPUs](https://gradient.paperspace.com/instances). Leverage automatic versioning, distributed training, built-in graphs & metrics, hyperparameter search, GradientCI, 1-click Jupyter Notebooks, our Python SDK, and more.\n\nThis is an SDK for performing Machine Learning with Gradientº, it can be installed in addition to [gradient-cli](https://github.com/Paperspace/gradient-cli).\n\n# Requirements\n\nThis SDK requires Python 3.6+.\n\nTo install it, run:\n\n```bash\npip install gradient-utils\n```\n\n# Usage\n\n## Metrics\n\nLibrary for logging custom and framework metrics in Gradient.\n\nUsage example:\n\n```python\nfrom gradient_utils.metrics import init, add_metrics, MetricsLogger\n\n# Initialize metrics logging\nwith init():\n    # do work here\n    pass\n\n# Capture metrics produced by tensorboard\nwith init(sync_tensorboard=True):\n    # do work here\n    pass\n\n# Log metrics with a single command\nadd_metrics({"loss": 0.25, "accuracy": 0.99})\n\n# Insert metrics with a step value\n# Note: add_metrics should be called once for a step.\n#       Multiple calls with the same step may result in loss of metrics.\nadd_metrics({"loss": 0.25, "accuracy": 0.99}, step=0)\n\n# For more advanced use cases use the MetricsLogger\nlogger = MetricsLogger()\nlogger.add_gauge("loss") # add a specific gauge\nlogger["loss"].set(0.25)\nlogger["loss"].inc()\nlogger.add_gauge("accuracy")\nlogger["accuracy"].set(0.99)\nlogger.push_metrics() # you must explicitly push metrics each time you mutate values when using MetricsLogger\n\n# You can also use steps with the MetricsLogger\nlogger = MetricsLogger(step=0)\nlogger.add_gauge("loss")\nlogger["loss"].set(0.25)\nlogger.push_metrics()\nlogger.set_step(1) # update step explicitly\nlogger["loss"].set(0.25)\nlogger.push_metrics()\n```\n\n## Multinode Helper Functions\n\n### Multinode GRPC Tensorflow\n\n**Set the TF_CONFIG environment variable**\nFor multi-worker training, you need to set the `TF_CONFIG` environment variable for each binary running in your cluster. Set the value of `TF_CONFIG` to a JSON string that specifies each task within the cluster, including each task\'s address and role within the cluster. We\'ve provided a Kubernetes template in the tensorflow/ecosystem repo which sets `TF_CONFIG` for your training tasks.\n\n**get_tf_config()**\n\nFunction to set value of `TF_CONFIG` when run on machines within Paperspace infrastructure.\n\nIt can raise a `ConfigError` exception with message if there\'s a problem with its configuration in a particular machine.\n\n**_Usage example:_**\n\n```python\nfrom gradient_utils import get_tf_config\n\nget_tf_config()\n```\n\n## Utility Functions\n\n**get_mongo_conn_str()**\n\nFunction to check and construct MongoDB connection string.\n\nIt returns a connection string to MongoDB.\n\nIt can raise a `ConfigError` exception with message if there\'s a problem with any values used to prepare the MongoDB connection string.\n\nUsage example:\n\n```python\nfrom gradient_utils import get_mongo_conn_str\n\nconn_str = get_mongo_conn_str()\n```\n\n**data_dir()**\n\nFunction to retrieve path to job space.\n\nUsage example:\n\n```python\nfrom gradient_utils import data_dir\n\njob_space = data_dir()\n```\n\n**model_dir()**\n\nFunction to retrieve path to model space.\n\nUsage example:\n\n```python\nfrom gradient_utils import model_dir\n\nmodel_path = model_dir(model_name)\n```\n\n**export_dir()**\n\nFunction to retrieve path for model export.\n\nUsage example:\n\n```python\nfrom gradient_utils import export_dir\n\nmodel_path = export_dir(model_name)\n```\n\n**worker_hosts()**\n\nFunction to retrieve information about worker hosts.\n\nUsage example:\n\n```python\nfrom gradient_utils import worker_hosts\n\nmodel_path = worker_hosts()\n```\n\n**ps_hosts()**\n\nFunction to retrieve information about Paperspace hosts.\n\nUsage example:\n\n```python\nfrom gradient_utils import ps_hosts\n\nmodel_path = ps_hosts()\n```\n\n**task_index()**\n\nFunction to retrieve information about task index.\n\nUsage example:\n\n```python\nfrom gradient_utils import task_index\n\nmodel_path = task_index()\n```\n\n**job_name()**\n\nFunction to retrieve information about job name.\n\nUsage example:\n\n```python\nfrom gradient_utils import job_name\n\nmodel_path = job_name()\n```\n\n# Contributing\n\n## Setup\n\nWe use Docker and Docker-compose to run the tests locally.\n\n```\n# To setup the integration test framework\ndocker-compose up --remove-orphans -d pushgateway\ndocker-compose build utils\n\n# To run tests\ndocker-compose -f docker-compose.ci.yml run utils poetry run pytest\n\n# To autoformat\ndocker-compose run utils poetry run autopep8 --in-place --aggressive --aggressive --recursive .\n```\n',
    'author': 'Paperspace Co.',
    'author_email': 'info@paperspace.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/Paperspace/gradient-utils',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
