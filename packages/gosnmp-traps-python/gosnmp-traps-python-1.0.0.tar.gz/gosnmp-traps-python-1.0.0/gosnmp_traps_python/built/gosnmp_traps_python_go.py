
# python wrapper for package gosnmp_traps_python_go/gosnmp_traps_python_go within overall package gosnmp_traps_python_go
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=gosnmp_traps_python/built -symbols=true -vm=/Users/edwardbeech/.venv/gosnmp-traps-python/bin/python ./gosnmp_traps_python_go

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from gosnmp_traps_python.built import _gosnmp_traps_python_go
os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from gosnmp_traps_python_go from gosnmp_traps_python.built import gosnmp_traps_python_go
# and then refer to everything using gosnmp_traps_python_go. prefix
# packages imported by this package listed below:

from gosnmp_traps_python.built import go



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def NewRPCSession(hostname, port, timeout, paramsJSON):
	"""NewRPCSession(str hostname, int port, int timeout, str paramsJSON) long, str
	
	NewRPCSession creates a new Session and returns the sessionID
	"""
	return _gosnmp_traps_python_go.gosnmp_traps_python_go_NewRPCSession(hostname, port, timeout, paramsJSON)
def RPCClose(sessionID, goRun=False):
	"""RPCClose(long sessionID) 
	
	RPCClose calls .close on the Session identified by the sessionID
	"""
	_gosnmp_traps_python_go.gosnmp_traps_python_go_RPCClose(sessionID, goRun)
def RPCConnect(sessionID):
	"""RPCConnect(long sessionID) str
	
	RPCConnect calls .connect on the Session identified by the sessionID
	"""
	return _gosnmp_traps_python_go.gosnmp_traps_python_go_RPCConnect(sessionID)
def RPCGetNoWait(sessionID):
	"""RPCGetNoWait(long sessionID) str, str
	
	RPCGetNoWait calls .get on the Session identified by the sessionID
	"""
	return _gosnmp_traps_python_go.gosnmp_traps_python_go_RPCGetNoWait(sessionID)


