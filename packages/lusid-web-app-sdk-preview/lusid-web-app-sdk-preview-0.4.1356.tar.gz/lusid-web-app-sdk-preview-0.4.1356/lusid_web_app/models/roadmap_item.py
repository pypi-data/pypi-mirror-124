# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1356
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class RoadmapItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'description': 'str',
        'long_description': 'str',
        'product': 'list[str]',
        'application': 'list[str]',
        'is_starred': 'bool',
        'category': 'RoadmapItemCategory',
        'release_date': 'str',
        'documentation_link': 'str'
    }

    attribute_map = {
        'description': 'description',
        'long_description': 'longDescription',
        'product': 'product',
        'application': 'application',
        'is_starred': 'isStarred',
        'category': 'category',
        'release_date': 'releaseDate',
        'documentation_link': 'documentationLink'
    }

    required_map = {
        'description': 'optional',
        'long_description': 'optional',
        'product': 'optional',
        'application': 'optional',
        'is_starred': 'optional',
        'category': 'optional',
        'release_date': 'optional',
        'documentation_link': 'optional'
    }

    def __init__(self, description=None, long_description=None, product=None, application=None, is_starred=None, category=None, release_date=None, documentation_link=None, local_vars_configuration=None):  # noqa: E501
        """RoadmapItem - a model defined in OpenAPI"
        
        :param description:  Item description.
        :type description: str
        :param long_description:  Item long description.
        :type long_description: str
        :param product:  List of products assigned to item.
        :type product: list[str]
        :param application:  List of applications.
        :type application: list[str]
        :param is_starred:  Indicates if item starred.
        :type is_starred: bool
        :param category: 
        :type category: lusid_web_app.RoadmapItemCategory
        :param release_date:  Release date in format \"2020 Q1\".
        :type release_date: str
        :param documentation_link:  Link to documentation
        :type documentation_link: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._long_description = None
        self._product = None
        self._application = None
        self._is_starred = None
        self._category = None
        self._release_date = None
        self._documentation_link = None
        self.discriminator = None

        self.description = description
        self.long_description = long_description
        self.product = product
        self.application = application
        if is_starred is not None:
            self.is_starred = is_starred
        if category is not None:
            self.category = category
        self.release_date = release_date
        self.documentation_link = documentation_link

    @property
    def description(self):
        """Gets the description of this RoadmapItem.  # noqa: E501

        Item description.  # noqa: E501

        :return: The description of this RoadmapItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RoadmapItem.

        Item description.  # noqa: E501

        :param description: The description of this RoadmapItem.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def long_description(self):
        """Gets the long_description of this RoadmapItem.  # noqa: E501

        Item long description.  # noqa: E501

        :return: The long_description of this RoadmapItem.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this RoadmapItem.

        Item long description.  # noqa: E501

        :param long_description: The long_description of this RoadmapItem.  # noqa: E501
        :type long_description: str
        """

        self._long_description = long_description

    @property
    def product(self):
        """Gets the product of this RoadmapItem.  # noqa: E501

        List of products assigned to item.  # noqa: E501

        :return: The product of this RoadmapItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this RoadmapItem.

        List of products assigned to item.  # noqa: E501

        :param product: The product of this RoadmapItem.  # noqa: E501
        :type product: list[str]
        """

        self._product = product

    @property
    def application(self):
        """Gets the application of this RoadmapItem.  # noqa: E501

        List of applications.  # noqa: E501

        :return: The application of this RoadmapItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this RoadmapItem.

        List of applications.  # noqa: E501

        :param application: The application of this RoadmapItem.  # noqa: E501
        :type application: list[str]
        """

        self._application = application

    @property
    def is_starred(self):
        """Gets the is_starred of this RoadmapItem.  # noqa: E501

        Indicates if item starred.  # noqa: E501

        :return: The is_starred of this RoadmapItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_starred

    @is_starred.setter
    def is_starred(self, is_starred):
        """Sets the is_starred of this RoadmapItem.

        Indicates if item starred.  # noqa: E501

        :param is_starred: The is_starred of this RoadmapItem.  # noqa: E501
        :type is_starred: bool
        """

        self._is_starred = is_starred

    @property
    def category(self):
        """Gets the category of this RoadmapItem.  # noqa: E501


        :return: The category of this RoadmapItem.  # noqa: E501
        :rtype: lusid_web_app.RoadmapItemCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this RoadmapItem.


        :param category: The category of this RoadmapItem.  # noqa: E501
        :type category: lusid_web_app.RoadmapItemCategory
        """

        self._category = category

    @property
    def release_date(self):
        """Gets the release_date of this RoadmapItem.  # noqa: E501

        Release date in format \"2020 Q1\".  # noqa: E501

        :return: The release_date of this RoadmapItem.  # noqa: E501
        :rtype: str
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this RoadmapItem.

        Release date in format \"2020 Q1\".  # noqa: E501

        :param release_date: The release_date of this RoadmapItem.  # noqa: E501
        :type release_date: str
        """

        self._release_date = release_date

    @property
    def documentation_link(self):
        """Gets the documentation_link of this RoadmapItem.  # noqa: E501

        Link to documentation  # noqa: E501

        :return: The documentation_link of this RoadmapItem.  # noqa: E501
        :rtype: str
        """
        return self._documentation_link

    @documentation_link.setter
    def documentation_link(self, documentation_link):
        """Sets the documentation_link of this RoadmapItem.

        Link to documentation  # noqa: E501

        :param documentation_link: The documentation_link of this RoadmapItem.  # noqa: E501
        :type documentation_link: str
        """

        self._documentation_link = documentation_link

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoadmapItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RoadmapItem):
            return True

        return self.to_dict() != other.to_dict()
