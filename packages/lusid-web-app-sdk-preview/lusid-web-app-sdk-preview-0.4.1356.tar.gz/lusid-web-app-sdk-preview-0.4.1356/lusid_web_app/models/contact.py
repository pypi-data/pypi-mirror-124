# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1356
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class Contact(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone_number': 'str',
        'job_title': 'str',
        'feature_requirements': 'list[str]',
        'subscribe_to_marketing_email': 'bool'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'phone_number': 'phoneNumber',
        'job_title': 'jobTitle',
        'feature_requirements': 'featureRequirements',
        'subscribe_to_marketing_email': 'subscribeToMarketingEmail'
    }

    required_map = {
        'email': 'required',
        'first_name': 'required',
        'last_name': 'required',
        'phone_number': 'optional',
        'job_title': 'required',
        'feature_requirements': 'required',
        'subscribe_to_marketing_email': 'required'
    }

    def __init__(self, email=None, first_name=None, last_name=None, phone_number=None, job_title=None, feature_requirements=None, subscribe_to_marketing_email=None, local_vars_configuration=None):  # noqa: E501
        """Contact - a model defined in OpenAPI"
        
        :param email:  The email address of the contact (required)
        :type email: str
        :param first_name:  The contacts first name (required)
        :type first_name: str
        :param last_name:  The contacts last name (required)
        :type last_name: str
        :param phone_number:  The contacts phone number
        :type phone_number: str
        :param job_title:  The contacts job title. (required)
        :type job_title: str
        :param feature_requirements:  The LUSID features that the contact is interested in. (required)
        :type feature_requirements: list[str]
        :param subscribe_to_marketing_email:  Does this user want to recieve marketing material (required)
        :type subscribe_to_marketing_email: bool

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._first_name = None
        self._last_name = None
        self._phone_number = None
        self._job_title = None
        self._feature_requirements = None
        self._subscribe_to_marketing_email = None
        self.discriminator = None

        self.email = email
        self.first_name = first_name
        self.last_name = last_name
        self.phone_number = phone_number
        self.job_title = job_title
        self.feature_requirements = feature_requirements
        self.subscribe_to_marketing_email = subscribe_to_marketing_email

    @property
    def email(self):
        """Gets the email of this Contact.  # noqa: E501

        The email address of the contact  # noqa: E501

        :return: The email of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.

        The email address of the contact  # noqa: E501

        :param email: The email of this Contact.  # noqa: E501
        :type email: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Contact.  # noqa: E501

        The contacts first name  # noqa: E501

        :return: The first_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.

        The contacts first name  # noqa: E501

        :param first_name: The first_name of this Contact.  # noqa: E501
        :type first_name: str
        """
        if self.local_vars_configuration.client_side_validation and first_name is None:  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Contact.  # noqa: E501

        The contacts last name  # noqa: E501

        :return: The last_name of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.

        The contacts last name  # noqa: E501

        :param last_name: The last_name of this Contact.  # noqa: E501
        :type last_name: str
        """
        if self.local_vars_configuration.client_side_validation and last_name is None:  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this Contact.  # noqa: E501

        The contacts phone number  # noqa: E501

        :return: The phone_number of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Contact.

        The contacts phone number  # noqa: E501

        :param phone_number: The phone_number of this Contact.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def job_title(self):
        """Gets the job_title of this Contact.  # noqa: E501

        The contacts job title.  # noqa: E501

        :return: The job_title of this Contact.  # noqa: E501
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Contact.

        The contacts job title.  # noqa: E501

        :param job_title: The job_title of this Contact.  # noqa: E501
        :type job_title: str
        """
        if self.local_vars_configuration.client_side_validation and job_title is None:  # noqa: E501
            raise ValueError("Invalid value for `job_title`, must not be `None`")  # noqa: E501

        self._job_title = job_title

    @property
    def feature_requirements(self):
        """Gets the feature_requirements of this Contact.  # noqa: E501

        The LUSID features that the contact is interested in.  # noqa: E501

        :return: The feature_requirements of this Contact.  # noqa: E501
        :rtype: list[str]
        """
        return self._feature_requirements

    @feature_requirements.setter
    def feature_requirements(self, feature_requirements):
        """Sets the feature_requirements of this Contact.

        The LUSID features that the contact is interested in.  # noqa: E501

        :param feature_requirements: The feature_requirements of this Contact.  # noqa: E501
        :type feature_requirements: list[str]
        """
        if self.local_vars_configuration.client_side_validation and feature_requirements is None:  # noqa: E501
            raise ValueError("Invalid value for `feature_requirements`, must not be `None`")  # noqa: E501

        self._feature_requirements = feature_requirements

    @property
    def subscribe_to_marketing_email(self):
        """Gets the subscribe_to_marketing_email of this Contact.  # noqa: E501

        Does this user want to recieve marketing material  # noqa: E501

        :return: The subscribe_to_marketing_email of this Contact.  # noqa: E501
        :rtype: bool
        """
        return self._subscribe_to_marketing_email

    @subscribe_to_marketing_email.setter
    def subscribe_to_marketing_email(self, subscribe_to_marketing_email):
        """Sets the subscribe_to_marketing_email of this Contact.

        Does this user want to recieve marketing material  # noqa: E501

        :param subscribe_to_marketing_email: The subscribe_to_marketing_email of this Contact.  # noqa: E501
        :type subscribe_to_marketing_email: bool
        """
        if self.local_vars_configuration.client_side_validation and subscribe_to_marketing_email is None:  # noqa: E501
            raise ValueError("Invalid value for `subscribe_to_marketing_email`, must not be `None`")  # noqa: E501

        self._subscribe_to_marketing_email = subscribe_to_marketing_email

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contact):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Contact):
            return True

        return self.to_dict() != other.to_dict()
