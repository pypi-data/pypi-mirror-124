# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1356
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class HubspotSupportArticleList(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'offset': 'int',
        'total': 'int',
        'page': 'int',
        'results': 'list[HubspotSupportArticle]',
        'search_term': 'str'
    }

    attribute_map = {
        'offset': 'offset',
        'total': 'total',
        'page': 'page',
        'results': 'results',
        'search_term': 'searchTerm'
    }

    required_map = {
        'offset': 'optional',
        'total': 'optional',
        'page': 'optional',
        'results': 'optional',
        'search_term': 'optional'
    }

    def __init__(self, offset=None, total=None, page=None, results=None, search_term=None, local_vars_configuration=None):  # noqa: E501
        """HubspotSupportArticleList - a model defined in OpenAPI"
        
        :param offset: 
        :type offset: int
        :param total: 
        :type total: int
        :param page: 
        :type page: int
        :param results: 
        :type results: list[lusid_web_app.HubspotSupportArticle]
        :param search_term: 
        :type search_term: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._offset = None
        self._total = None
        self._page = None
        self._results = None
        self._search_term = None
        self.discriminator = None

        if offset is not None:
            self.offset = offset
        if total is not None:
            self.total = total
        if page is not None:
            self.page = page
        self.results = results
        self.search_term = search_term

    @property
    def offset(self):
        """Gets the offset of this HubspotSupportArticleList.  # noqa: E501


        :return: The offset of this HubspotSupportArticleList.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this HubspotSupportArticleList.


        :param offset: The offset of this HubspotSupportArticleList.  # noqa: E501
        :type offset: int
        """

        self._offset = offset

    @property
    def total(self):
        """Gets the total of this HubspotSupportArticleList.  # noqa: E501


        :return: The total of this HubspotSupportArticleList.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this HubspotSupportArticleList.


        :param total: The total of this HubspotSupportArticleList.  # noqa: E501
        :type total: int
        """

        self._total = total

    @property
    def page(self):
        """Gets the page of this HubspotSupportArticleList.  # noqa: E501


        :return: The page of this HubspotSupportArticleList.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this HubspotSupportArticleList.


        :param page: The page of this HubspotSupportArticleList.  # noqa: E501
        :type page: int
        """

        self._page = page

    @property
    def results(self):
        """Gets the results of this HubspotSupportArticleList.  # noqa: E501


        :return: The results of this HubspotSupportArticleList.  # noqa: E501
        :rtype: list[lusid_web_app.HubspotSupportArticle]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this HubspotSupportArticleList.


        :param results: The results of this HubspotSupportArticleList.  # noqa: E501
        :type results: list[lusid_web_app.HubspotSupportArticle]
        """

        self._results = results

    @property
    def search_term(self):
        """Gets the search_term of this HubspotSupportArticleList.  # noqa: E501


        :return: The search_term of this HubspotSupportArticleList.  # noqa: E501
        :rtype: str
        """
        return self._search_term

    @search_term.setter
    def search_term(self, search_term):
        """Sets the search_term of this HubspotSupportArticleList.


        :param search_term: The search_term of this HubspotSupportArticleList.  # noqa: E501
        :type search_term: str
        """

        self._search_term = search_term

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HubspotSupportArticleList):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HubspotSupportArticleList):
            return True

        return self.to_dict() != other.to_dict()
