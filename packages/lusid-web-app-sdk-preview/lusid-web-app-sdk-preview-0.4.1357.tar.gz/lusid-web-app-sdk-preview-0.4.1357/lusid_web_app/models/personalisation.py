# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1357
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class Personalisation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'scope': 'PersonalisationScope',
        'scope_value': 'str',
        'setting_key': 'str',
        'setting_value': 'str'
    }

    attribute_map = {
        'scope': 'scope',
        'scope_value': 'scopeValue',
        'setting_key': 'settingKey',
        'setting_value': 'settingValue'
    }

    required_map = {
        'scope': 'required',
        'scope_value': 'optional',
        'setting_key': 'required',
        'setting_value': 'optional'
    }

    def __init__(self, scope=None, scope_value=None, setting_key=None, setting_value=None, local_vars_configuration=None):  # noqa: E501
        """Personalisation - a model defined in OpenAPI"
        
        :param scope:  (required)
        :type scope: lusid_web_app.PersonalisationScope
        :param scope_value:  The value for the scope, required if Finbourne.Lusid.Web.Models.Personalisation.Scope is Finbourne.Lusid.Web.Models.PersonalisationScope.User.
        :type scope_value: str
        :param setting_key:  The key for the data. This should be a multi-part string with parts separated by '/' (required)
        :type setting_key: str
        :param setting_value:  The value of the data. This must be valid JSON.
        :type setting_value: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._scope = None
        self._scope_value = None
        self._setting_key = None
        self._setting_value = None
        self.discriminator = None

        self.scope = scope
        self.scope_value = scope_value
        self.setting_key = setting_key
        self.setting_value = setting_value

    @property
    def scope(self):
        """Gets the scope of this Personalisation.  # noqa: E501


        :return: The scope of this Personalisation.  # noqa: E501
        :rtype: lusid_web_app.PersonalisationScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Personalisation.


        :param scope: The scope of this Personalisation.  # noqa: E501
        :type scope: lusid_web_app.PersonalisationScope
        """
        if self.local_vars_configuration.client_side_validation and scope is None:  # noqa: E501
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def scope_value(self):
        """Gets the scope_value of this Personalisation.  # noqa: E501

        The value for the scope, required if Finbourne.Lusid.Web.Models.Personalisation.Scope is Finbourne.Lusid.Web.Models.PersonalisationScope.User.  # noqa: E501

        :return: The scope_value of this Personalisation.  # noqa: E501
        :rtype: str
        """
        return self._scope_value

    @scope_value.setter
    def scope_value(self, scope_value):
        """Sets the scope_value of this Personalisation.

        The value for the scope, required if Finbourne.Lusid.Web.Models.Personalisation.Scope is Finbourne.Lusid.Web.Models.PersonalisationScope.User.  # noqa: E501

        :param scope_value: The scope_value of this Personalisation.  # noqa: E501
        :type scope_value: str
        """

        self._scope_value = scope_value

    @property
    def setting_key(self):
        """Gets the setting_key of this Personalisation.  # noqa: E501

        The key for the data. This should be a multi-part string with parts separated by '/'  # noqa: E501

        :return: The setting_key of this Personalisation.  # noqa: E501
        :rtype: str
        """
        return self._setting_key

    @setting_key.setter
    def setting_key(self, setting_key):
        """Sets the setting_key of this Personalisation.

        The key for the data. This should be a multi-part string with parts separated by '/'  # noqa: E501

        :param setting_key: The setting_key of this Personalisation.  # noqa: E501
        :type setting_key: str
        """
        if self.local_vars_configuration.client_side_validation and setting_key is None:  # noqa: E501
            raise ValueError("Invalid value for `setting_key`, must not be `None`")  # noqa: E501

        self._setting_key = setting_key

    @property
    def setting_value(self):
        """Gets the setting_value of this Personalisation.  # noqa: E501

        The value of the data. This must be valid JSON.  # noqa: E501

        :return: The setting_value of this Personalisation.  # noqa: E501
        :rtype: str
        """
        return self._setting_value

    @setting_value.setter
    def setting_value(self, setting_value):
        """Sets the setting_value of this Personalisation.

        The value of the data. This must be valid JSON.  # noqa: E501

        :param setting_value: The setting_value of this Personalisation.  # noqa: E501
        :type setting_value: str
        """

        self._setting_value = setting_value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Personalisation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Personalisation):
            return True

        return self.to_dict() != other.to_dict()
