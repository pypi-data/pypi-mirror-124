# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1356
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class TaskizeConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'client_id': 'str',
        'base_url': 'str',
        'auth_url': 'str',
        'access_token_url': 'str'
    }

    attribute_map = {
        'client_id': 'clientId',
        'base_url': 'baseUrl',
        'auth_url': 'authUrl',
        'access_token_url': 'accessTokenUrl'
    }

    required_map = {
        'client_id': 'optional',
        'base_url': 'optional',
        'auth_url': 'optional',
        'access_token_url': 'optional'
    }

    def __init__(self, client_id=None, base_url=None, auth_url=None, access_token_url=None, local_vars_configuration=None):  # noqa: E501
        """TaskizeConfig - a model defined in OpenAPI"
        
        :param client_id: 
        :type client_id: str
        :param base_url: 
        :type base_url: str
        :param auth_url: 
        :type auth_url: str
        :param access_token_url: 
        :type access_token_url: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._client_id = None
        self._base_url = None
        self._auth_url = None
        self._access_token_url = None
        self.discriminator = None

        self.client_id = client_id
        self.base_url = base_url
        self.auth_url = auth_url
        self.access_token_url = access_token_url

    @property
    def client_id(self):
        """Gets the client_id of this TaskizeConfig.  # noqa: E501


        :return: The client_id of this TaskizeConfig.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TaskizeConfig.


        :param client_id: The client_id of this TaskizeConfig.  # noqa: E501
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def base_url(self):
        """Gets the base_url of this TaskizeConfig.  # noqa: E501


        :return: The base_url of this TaskizeConfig.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this TaskizeConfig.


        :param base_url: The base_url of this TaskizeConfig.  # noqa: E501
        :type base_url: str
        """

        self._base_url = base_url

    @property
    def auth_url(self):
        """Gets the auth_url of this TaskizeConfig.  # noqa: E501


        :return: The auth_url of this TaskizeConfig.  # noqa: E501
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this TaskizeConfig.


        :param auth_url: The auth_url of this TaskizeConfig.  # noqa: E501
        :type auth_url: str
        """

        self._auth_url = auth_url

    @property
    def access_token_url(self):
        """Gets the access_token_url of this TaskizeConfig.  # noqa: E501


        :return: The access_token_url of this TaskizeConfig.  # noqa: E501
        :rtype: str
        """
        return self._access_token_url

    @access_token_url.setter
    def access_token_url(self, access_token_url):
        """Sets the access_token_url of this TaskizeConfig.


        :param access_token_url: The access_token_url of this TaskizeConfig.  # noqa: E501
        :type access_token_url: str
        """

        self._access_token_url = access_token_url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskizeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskizeConfig):
            return True

        return self.to_dict() != other.to_dict()
