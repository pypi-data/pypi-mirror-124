# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1356
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class TicketBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'problem_overview': 'str',
        'business_impact': 'str',
        'description': 'str',
        'source': 'str',
        'phone_number': 'str'
    }

    attribute_map = {
        'problem_overview': 'problemOverview',
        'business_impact': 'businessImpact',
        'description': 'description',
        'source': 'source',
        'phone_number': 'phoneNumber'
    }

    required_map = {
        'problem_overview': 'required',
        'business_impact': 'required',
        'description': 'required',
        'source': 'required',
        'phone_number': 'optional'
    }

    def __init__(self, problem_overview=None, business_impact=None, description=None, source=None, phone_number=None, local_vars_configuration=None):  # noqa: E501
        """TicketBase - a model defined in OpenAPI"
        
        :param problem_overview:  (required)
        :type problem_overview: str
        :param business_impact:  (required)
        :type business_impact: str
        :param description:  (required)
        :type description: str
        :param source:  (required)
        :type source: str
        :param phone_number: 
        :type phone_number: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._problem_overview = None
        self._business_impact = None
        self._description = None
        self._source = None
        self._phone_number = None
        self.discriminator = None

        self.problem_overview = problem_overview
        self.business_impact = business_impact
        self.description = description
        self.source = source
        self.phone_number = phone_number

    @property
    def problem_overview(self):
        """Gets the problem_overview of this TicketBase.  # noqa: E501


        :return: The problem_overview of this TicketBase.  # noqa: E501
        :rtype: str
        """
        return self._problem_overview

    @problem_overview.setter
    def problem_overview(self, problem_overview):
        """Sets the problem_overview of this TicketBase.


        :param problem_overview: The problem_overview of this TicketBase.  # noqa: E501
        :type problem_overview: str
        """
        if self.local_vars_configuration.client_side_validation and problem_overview is None:  # noqa: E501
            raise ValueError("Invalid value for `problem_overview`, must not be `None`")  # noqa: E501

        self._problem_overview = problem_overview

    @property
    def business_impact(self):
        """Gets the business_impact of this TicketBase.  # noqa: E501


        :return: The business_impact of this TicketBase.  # noqa: E501
        :rtype: str
        """
        return self._business_impact

    @business_impact.setter
    def business_impact(self, business_impact):
        """Sets the business_impact of this TicketBase.


        :param business_impact: The business_impact of this TicketBase.  # noqa: E501
        :type business_impact: str
        """
        if self.local_vars_configuration.client_side_validation and business_impact is None:  # noqa: E501
            raise ValueError("Invalid value for `business_impact`, must not be `None`")  # noqa: E501

        self._business_impact = business_impact

    @property
    def description(self):
        """Gets the description of this TicketBase.  # noqa: E501


        :return: The description of this TicketBase.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TicketBase.


        :param description: The description of this TicketBase.  # noqa: E501
        :type description: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def source(self):
        """Gets the source of this TicketBase.  # noqa: E501


        :return: The source of this TicketBase.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TicketBase.


        :param source: The source of this TicketBase.  # noqa: E501
        :type source: str
        """
        if self.local_vars_configuration.client_side_validation and source is None:  # noqa: E501
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def phone_number(self):
        """Gets the phone_number of this TicketBase.  # noqa: E501


        :return: The phone_number of this TicketBase.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this TicketBase.


        :param phone_number: The phone_number of this TicketBase.  # noqa: E501
        :type phone_number: str
        """

        self._phone_number = phone_number

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TicketBase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TicketBase):
            return True

        return self.to_dict() != other.to_dict()
