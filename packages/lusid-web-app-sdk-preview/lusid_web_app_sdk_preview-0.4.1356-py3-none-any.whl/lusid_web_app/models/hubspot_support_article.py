# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1356
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class HubspotSupportArticle(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'category': 'str',
        'description': 'str',
        'domain': 'str',
        'id': 'int',
        'score': 'float',
        'subcategory': 'str',
        'title': 'str',
        'type': 'str',
        'url': 'str'
    }

    attribute_map = {
        'category': 'category',
        'description': 'description',
        'domain': 'domain',
        'id': 'id',
        'score': 'score',
        'subcategory': 'subcategory',
        'title': 'title',
        'type': 'type',
        'url': 'url'
    }

    required_map = {
        'category': 'optional',
        'description': 'optional',
        'domain': 'optional',
        'id': 'optional',
        'score': 'optional',
        'subcategory': 'optional',
        'title': 'optional',
        'type': 'optional',
        'url': 'optional'
    }

    def __init__(self, category=None, description=None, domain=None, id=None, score=None, subcategory=None, title=None, type=None, url=None, local_vars_configuration=None):  # noqa: E501
        """HubspotSupportArticle - a model defined in OpenAPI"
        
        :param category: 
        :type category: str
        :param description: 
        :type description: str
        :param domain: 
        :type domain: str
        :param id: 
        :type id: int
        :param score: 
        :type score: float
        :param subcategory: 
        :type subcategory: str
        :param title: 
        :type title: str
        :param type: 
        :type type: str
        :param url: 
        :type url: str

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._category = None
        self._description = None
        self._domain = None
        self._id = None
        self._score = None
        self._subcategory = None
        self._title = None
        self._type = None
        self._url = None
        self.discriminator = None

        self.category = category
        self.description = description
        self.domain = domain
        if id is not None:
            self.id = id
        if score is not None:
            self.score = score
        self.subcategory = subcategory
        self.title = title
        self.type = type
        self.url = url

    @property
    def category(self):
        """Gets the category of this HubspotSupportArticle.  # noqa: E501


        :return: The category of this HubspotSupportArticle.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HubspotSupportArticle.


        :param category: The category of this HubspotSupportArticle.  # noqa: E501
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this HubspotSupportArticle.  # noqa: E501


        :return: The description of this HubspotSupportArticle.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this HubspotSupportArticle.


        :param description: The description of this HubspotSupportArticle.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this HubspotSupportArticle.  # noqa: E501


        :return: The domain of this HubspotSupportArticle.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this HubspotSupportArticle.


        :param domain: The domain of this HubspotSupportArticle.  # noqa: E501
        :type domain: str
        """

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this HubspotSupportArticle.  # noqa: E501


        :return: The id of this HubspotSupportArticle.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HubspotSupportArticle.


        :param id: The id of this HubspotSupportArticle.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def score(self):
        """Gets the score of this HubspotSupportArticle.  # noqa: E501


        :return: The score of this HubspotSupportArticle.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this HubspotSupportArticle.


        :param score: The score of this HubspotSupportArticle.  # noqa: E501
        :type score: float
        """

        self._score = score

    @property
    def subcategory(self):
        """Gets the subcategory of this HubspotSupportArticle.  # noqa: E501


        :return: The subcategory of this HubspotSupportArticle.  # noqa: E501
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this HubspotSupportArticle.


        :param subcategory: The subcategory of this HubspotSupportArticle.  # noqa: E501
        :type subcategory: str
        """

        self._subcategory = subcategory

    @property
    def title(self):
        """Gets the title of this HubspotSupportArticle.  # noqa: E501


        :return: The title of this HubspotSupportArticle.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this HubspotSupportArticle.


        :param title: The title of this HubspotSupportArticle.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this HubspotSupportArticle.  # noqa: E501


        :return: The type of this HubspotSupportArticle.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HubspotSupportArticle.


        :param type: The type of this HubspotSupportArticle.  # noqa: E501
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this HubspotSupportArticle.  # noqa: E501


        :return: The url of this HubspotSupportArticle.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HubspotSupportArticle.


        :param url: The url of this HubspotSupportArticle.  # noqa: E501
        :type url: str
        """

        self._url = url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HubspotSupportArticle):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HubspotSupportArticle):
            return True

        return self.to_dict() != other.to_dict()
