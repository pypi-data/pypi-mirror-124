# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1356
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class MappingRule(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'source': 'str',
        'target': 'str',
        'comparison_type': 'MappingComparisonType',
        'comparison_value': 'str',
        'weight': 'float'
    }

    attribute_map = {
        'source': 'source',
        'target': 'target',
        'comparison_type': 'comparisonType',
        'comparison_value': 'comparisonValue',
        'weight': 'weight'
    }

    required_map = {
        'source': 'optional',
        'target': 'optional',
        'comparison_type': 'optional',
        'comparison_value': 'optional',
        'weight': 'optional'
    }

    def __init__(self, source=None, target=None, comparison_type=None, comparison_value=None, weight=None, local_vars_configuration=None):  # noqa: E501
        """MappingRule - a model defined in OpenAPI"
        
        :param source:  The name of the field/property in the source resource (e.g. a transaction)
        :type source: str
        :param target:  The name of the field/property in the target resource (e.g. a transaction)
        :type target: str
        :param comparison_type: 
        :type comparison_type: lusid_web_app.MappingComparisonType
        :param comparison_value:  The (optional) value used with the Finbourne.Lusid.Web.Models.Reconciliations.MappingRule.ComparisonType
        :type comparison_value: str
        :param weight:  A factor used to influence the importance of this item.
        :type weight: float

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._source = None
        self._target = None
        self._comparison_type = None
        self._comparison_value = None
        self._weight = None
        self.discriminator = None

        self.source = source
        self.target = target
        if comparison_type is not None:
            self.comparison_type = comparison_type
        self.comparison_value = comparison_value
        if weight is not None:
            self.weight = weight

    @property
    def source(self):
        """Gets the source of this MappingRule.  # noqa: E501

        The name of the field/property in the source resource (e.g. a transaction)  # noqa: E501

        :return: The source of this MappingRule.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this MappingRule.

        The name of the field/property in the source resource (e.g. a transaction)  # noqa: E501

        :param source: The source of this MappingRule.  # noqa: E501
        :type source: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this MappingRule.  # noqa: E501

        The name of the field/property in the target resource (e.g. a transaction)  # noqa: E501

        :return: The target of this MappingRule.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this MappingRule.

        The name of the field/property in the target resource (e.g. a transaction)  # noqa: E501

        :param target: The target of this MappingRule.  # noqa: E501
        :type target: str
        """

        self._target = target

    @property
    def comparison_type(self):
        """Gets the comparison_type of this MappingRule.  # noqa: E501


        :return: The comparison_type of this MappingRule.  # noqa: E501
        :rtype: lusid_web_app.MappingComparisonType
        """
        return self._comparison_type

    @comparison_type.setter
    def comparison_type(self, comparison_type):
        """Sets the comparison_type of this MappingRule.


        :param comparison_type: The comparison_type of this MappingRule.  # noqa: E501
        :type comparison_type: lusid_web_app.MappingComparisonType
        """

        self._comparison_type = comparison_type

    @property
    def comparison_value(self):
        """Gets the comparison_value of this MappingRule.  # noqa: E501

        The (optional) value used with the Finbourne.Lusid.Web.Models.Reconciliations.MappingRule.ComparisonType  # noqa: E501

        :return: The comparison_value of this MappingRule.  # noqa: E501
        :rtype: str
        """
        return self._comparison_value

    @comparison_value.setter
    def comparison_value(self, comparison_value):
        """Sets the comparison_value of this MappingRule.

        The (optional) value used with the Finbourne.Lusid.Web.Models.Reconciliations.MappingRule.ComparisonType  # noqa: E501

        :param comparison_value: The comparison_value of this MappingRule.  # noqa: E501
        :type comparison_value: str
        """

        self._comparison_value = comparison_value

    @property
    def weight(self):
        """Gets the weight of this MappingRule.  # noqa: E501

        A factor used to influence the importance of this item.  # noqa: E501

        :return: The weight of this MappingRule.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this MappingRule.

        A factor used to influence the importance of this item.  # noqa: E501

        :param weight: The weight of this MappingRule.  # noqa: E501
        :type weight: float
        """

        self._weight = weight

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MappingRule):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MappingRule):
            return True

        return self.to_dict() != other.to_dict()
