# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1357
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class ClientConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'version': 'str',
        'api_url': 'str',
        'identity_url': 'str',
        'access_url': 'str',
        'insights_url': 'str',
        'scheduler_url': 'str',
        'drive_url': 'str',
        'marketplace_url': 'str',
        'honeycomb_url': 'str',
        'configuration_url': 'str',
        'notifications_url': 'str',
        'okta': 'OktaConfig',
        'mixpanel': 'Mixpanel',
        're_captcha': 'ReCaptcha',
        'taskize': 'TaskizeConfig',
        'can_create_domains': 'bool',
        'features': 'list[str]'
    }

    attribute_map = {
        'version': 'version',
        'api_url': 'apiUrl',
        'identity_url': 'identityUrl',
        'access_url': 'accessUrl',
        'insights_url': 'insightsUrl',
        'scheduler_url': 'schedulerUrl',
        'drive_url': 'driveUrl',
        'marketplace_url': 'marketplaceUrl',
        'honeycomb_url': 'honeycombUrl',
        'configuration_url': 'configurationUrl',
        'notifications_url': 'notificationsUrl',
        'okta': 'okta',
        'mixpanel': 'mixpanel',
        're_captcha': 'reCaptcha',
        'taskize': 'taskize',
        'can_create_domains': 'canCreateDomains',
        'features': 'features'
    }

    required_map = {
        'version': 'optional',
        'api_url': 'optional',
        'identity_url': 'optional',
        'access_url': 'optional',
        'insights_url': 'optional',
        'scheduler_url': 'optional',
        'drive_url': 'optional',
        'marketplace_url': 'optional',
        'honeycomb_url': 'optional',
        'configuration_url': 'optional',
        'notifications_url': 'optional',
        'okta': 'optional',
        'mixpanel': 'optional',
        're_captcha': 'optional',
        'taskize': 'optional',
        'can_create_domains': 'optional',
        'features': 'optional'
    }

    def __init__(self, version=None, api_url=None, identity_url=None, access_url=None, insights_url=None, scheduler_url=None, drive_url=None, marketplace_url=None, honeycomb_url=None, configuration_url=None, notifications_url=None, okta=None, mixpanel=None, re_captcha=None, taskize=None, can_create_domains=None, features=None, local_vars_configuration=None):  # noqa: E501
        """ClientConfig - a model defined in OpenAPI"
        
        :param version: 
        :type version: str
        :param api_url: 
        :type api_url: str
        :param identity_url: 
        :type identity_url: str
        :param access_url: 
        :type access_url: str
        :param insights_url: 
        :type insights_url: str
        :param scheduler_url: 
        :type scheduler_url: str
        :param drive_url: 
        :type drive_url: str
        :param marketplace_url: 
        :type marketplace_url: str
        :param honeycomb_url: 
        :type honeycomb_url: str
        :param configuration_url: 
        :type configuration_url: str
        :param notifications_url: 
        :type notifications_url: str
        :param okta: 
        :type okta: lusid_web_app.OktaConfig
        :param mixpanel: 
        :type mixpanel: lusid_web_app.Mixpanel
        :param re_captcha: 
        :type re_captcha: lusid_web_app.ReCaptcha
        :param taskize: 
        :type taskize: lusid_web_app.TaskizeConfig
        :param can_create_domains: 
        :type can_create_domains: bool
        :param features: 
        :type features: list[str]

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._version = None
        self._api_url = None
        self._identity_url = None
        self._access_url = None
        self._insights_url = None
        self._scheduler_url = None
        self._drive_url = None
        self._marketplace_url = None
        self._honeycomb_url = None
        self._configuration_url = None
        self._notifications_url = None
        self._okta = None
        self._mixpanel = None
        self._re_captcha = None
        self._taskize = None
        self._can_create_domains = None
        self._features = None
        self.discriminator = None

        self.version = version
        self.api_url = api_url
        self.identity_url = identity_url
        self.access_url = access_url
        self.insights_url = insights_url
        self.scheduler_url = scheduler_url
        self.drive_url = drive_url
        self.marketplace_url = marketplace_url
        self.honeycomb_url = honeycomb_url
        self.configuration_url = configuration_url
        self.notifications_url = notifications_url
        if okta is not None:
            self.okta = okta
        if mixpanel is not None:
            self.mixpanel = mixpanel
        if re_captcha is not None:
            self.re_captcha = re_captcha
        if taskize is not None:
            self.taskize = taskize
        if can_create_domains is not None:
            self.can_create_domains = can_create_domains
        self.features = features

    @property
    def version(self):
        """Gets the version of this ClientConfig.  # noqa: E501


        :return: The version of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ClientConfig.


        :param version: The version of this ClientConfig.  # noqa: E501
        :type version: str
        """

        self._version = version

    @property
    def api_url(self):
        """Gets the api_url of this ClientConfig.  # noqa: E501


        :return: The api_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._api_url

    @api_url.setter
    def api_url(self, api_url):
        """Sets the api_url of this ClientConfig.


        :param api_url: The api_url of this ClientConfig.  # noqa: E501
        :type api_url: str
        """

        self._api_url = api_url

    @property
    def identity_url(self):
        """Gets the identity_url of this ClientConfig.  # noqa: E501


        :return: The identity_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._identity_url

    @identity_url.setter
    def identity_url(self, identity_url):
        """Sets the identity_url of this ClientConfig.


        :param identity_url: The identity_url of this ClientConfig.  # noqa: E501
        :type identity_url: str
        """

        self._identity_url = identity_url

    @property
    def access_url(self):
        """Gets the access_url of this ClientConfig.  # noqa: E501


        :return: The access_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._access_url

    @access_url.setter
    def access_url(self, access_url):
        """Sets the access_url of this ClientConfig.


        :param access_url: The access_url of this ClientConfig.  # noqa: E501
        :type access_url: str
        """

        self._access_url = access_url

    @property
    def insights_url(self):
        """Gets the insights_url of this ClientConfig.  # noqa: E501


        :return: The insights_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._insights_url

    @insights_url.setter
    def insights_url(self, insights_url):
        """Sets the insights_url of this ClientConfig.


        :param insights_url: The insights_url of this ClientConfig.  # noqa: E501
        :type insights_url: str
        """

        self._insights_url = insights_url

    @property
    def scheduler_url(self):
        """Gets the scheduler_url of this ClientConfig.  # noqa: E501


        :return: The scheduler_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._scheduler_url

    @scheduler_url.setter
    def scheduler_url(self, scheduler_url):
        """Sets the scheduler_url of this ClientConfig.


        :param scheduler_url: The scheduler_url of this ClientConfig.  # noqa: E501
        :type scheduler_url: str
        """

        self._scheduler_url = scheduler_url

    @property
    def drive_url(self):
        """Gets the drive_url of this ClientConfig.  # noqa: E501


        :return: The drive_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._drive_url

    @drive_url.setter
    def drive_url(self, drive_url):
        """Sets the drive_url of this ClientConfig.


        :param drive_url: The drive_url of this ClientConfig.  # noqa: E501
        :type drive_url: str
        """

        self._drive_url = drive_url

    @property
    def marketplace_url(self):
        """Gets the marketplace_url of this ClientConfig.  # noqa: E501


        :return: The marketplace_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._marketplace_url

    @marketplace_url.setter
    def marketplace_url(self, marketplace_url):
        """Sets the marketplace_url of this ClientConfig.


        :param marketplace_url: The marketplace_url of this ClientConfig.  # noqa: E501
        :type marketplace_url: str
        """

        self._marketplace_url = marketplace_url

    @property
    def honeycomb_url(self):
        """Gets the honeycomb_url of this ClientConfig.  # noqa: E501


        :return: The honeycomb_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._honeycomb_url

    @honeycomb_url.setter
    def honeycomb_url(self, honeycomb_url):
        """Sets the honeycomb_url of this ClientConfig.


        :param honeycomb_url: The honeycomb_url of this ClientConfig.  # noqa: E501
        :type honeycomb_url: str
        """

        self._honeycomb_url = honeycomb_url

    @property
    def configuration_url(self):
        """Gets the configuration_url of this ClientConfig.  # noqa: E501


        :return: The configuration_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._configuration_url

    @configuration_url.setter
    def configuration_url(self, configuration_url):
        """Sets the configuration_url of this ClientConfig.


        :param configuration_url: The configuration_url of this ClientConfig.  # noqa: E501
        :type configuration_url: str
        """

        self._configuration_url = configuration_url

    @property
    def notifications_url(self):
        """Gets the notifications_url of this ClientConfig.  # noqa: E501


        :return: The notifications_url of this ClientConfig.  # noqa: E501
        :rtype: str
        """
        return self._notifications_url

    @notifications_url.setter
    def notifications_url(self, notifications_url):
        """Sets the notifications_url of this ClientConfig.


        :param notifications_url: The notifications_url of this ClientConfig.  # noqa: E501
        :type notifications_url: str
        """

        self._notifications_url = notifications_url

    @property
    def okta(self):
        """Gets the okta of this ClientConfig.  # noqa: E501


        :return: The okta of this ClientConfig.  # noqa: E501
        :rtype: lusid_web_app.OktaConfig
        """
        return self._okta

    @okta.setter
    def okta(self, okta):
        """Sets the okta of this ClientConfig.


        :param okta: The okta of this ClientConfig.  # noqa: E501
        :type okta: lusid_web_app.OktaConfig
        """

        self._okta = okta

    @property
    def mixpanel(self):
        """Gets the mixpanel of this ClientConfig.  # noqa: E501


        :return: The mixpanel of this ClientConfig.  # noqa: E501
        :rtype: lusid_web_app.Mixpanel
        """
        return self._mixpanel

    @mixpanel.setter
    def mixpanel(self, mixpanel):
        """Sets the mixpanel of this ClientConfig.


        :param mixpanel: The mixpanel of this ClientConfig.  # noqa: E501
        :type mixpanel: lusid_web_app.Mixpanel
        """

        self._mixpanel = mixpanel

    @property
    def re_captcha(self):
        """Gets the re_captcha of this ClientConfig.  # noqa: E501


        :return: The re_captcha of this ClientConfig.  # noqa: E501
        :rtype: lusid_web_app.ReCaptcha
        """
        return self._re_captcha

    @re_captcha.setter
    def re_captcha(self, re_captcha):
        """Sets the re_captcha of this ClientConfig.


        :param re_captcha: The re_captcha of this ClientConfig.  # noqa: E501
        :type re_captcha: lusid_web_app.ReCaptcha
        """

        self._re_captcha = re_captcha

    @property
    def taskize(self):
        """Gets the taskize of this ClientConfig.  # noqa: E501


        :return: The taskize of this ClientConfig.  # noqa: E501
        :rtype: lusid_web_app.TaskizeConfig
        """
        return self._taskize

    @taskize.setter
    def taskize(self, taskize):
        """Sets the taskize of this ClientConfig.


        :param taskize: The taskize of this ClientConfig.  # noqa: E501
        :type taskize: lusid_web_app.TaskizeConfig
        """

        self._taskize = taskize

    @property
    def can_create_domains(self):
        """Gets the can_create_domains of this ClientConfig.  # noqa: E501


        :return: The can_create_domains of this ClientConfig.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_domains

    @can_create_domains.setter
    def can_create_domains(self, can_create_domains):
        """Sets the can_create_domains of this ClientConfig.


        :param can_create_domains: The can_create_domains of this ClientConfig.  # noqa: E501
        :type can_create_domains: bool
        """

        self._can_create_domains = can_create_domains

    @property
    def features(self):
        """Gets the features of this ClientConfig.  # noqa: E501


        :return: The features of this ClientConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ClientConfig.


        :param features: The features of this ClientConfig.  # noqa: E501
        :type features: list[str]
        """

        self._features = features

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClientConfig):
            return True

        return self.to_dict() != other.to_dict()
