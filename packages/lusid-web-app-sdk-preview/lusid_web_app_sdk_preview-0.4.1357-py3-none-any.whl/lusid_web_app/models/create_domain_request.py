# coding: utf-8

"""
    LUSID Website API

    FINBOURNE Technology  # noqa: E501

    The version of the OpenAPI document: 0.4.1357
    Contact: info@finbourne.com
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from lusid_web_app.configuration import Configuration


class CreateDomainRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
      required_map (dict): The key is attribute name
                           and the value is whether it is 'required' or 'optional'.
    """
    openapi_types = {
        'domain_name': 'str',
        'company_name': 'str',
        'investment_company_type': 'str',
        'owner': 'Contact'
    }

    attribute_map = {
        'domain_name': 'domainName',
        'company_name': 'companyName',
        'investment_company_type': 'investmentCompanyType',
        'owner': 'owner'
    }

    required_map = {
        'domain_name': 'required',
        'company_name': 'required',
        'investment_company_type': 'optional',
        'owner': 'required'
    }

    def __init__(self, domain_name=None, company_name=None, investment_company_type=None, owner=None, local_vars_configuration=None):  # noqa: E501
        """CreateDomainRequest - a model defined in OpenAPI"
        
        :param domain_name:  The name of this domain (is the sub-domain in this clients LUSID url) (required)
        :type domain_name: str
        :param company_name:  The name of the company that is taking this domain (required)
        :type company_name: str
        :param investment_company_type:  What type of investment company is this
        :type investment_company_type: str
        :param owner:  (required)
        :type owner: lusid_web_app.Contact

        """  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._domain_name = None
        self._company_name = None
        self._investment_company_type = None
        self._owner = None
        self.discriminator = None

        self.domain_name = domain_name
        self.company_name = company_name
        self.investment_company_type = investment_company_type
        self.owner = owner

    @property
    def domain_name(self):
        """Gets the domain_name of this CreateDomainRequest.  # noqa: E501

        The name of this domain (is the sub-domain in this clients LUSID url)  # noqa: E501

        :return: The domain_name of this CreateDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this CreateDomainRequest.

        The name of this domain (is the sub-domain in this clients LUSID url)  # noqa: E501

        :param domain_name: The domain_name of this CreateDomainRequest.  # noqa: E501
        :type domain_name: str
        """
        if self.local_vars_configuration.client_side_validation and domain_name is None:  # noqa: E501
            raise ValueError("Invalid value for `domain_name`, must not be `None`")  # noqa: E501

        self._domain_name = domain_name

    @property
    def company_name(self):
        """Gets the company_name of this CreateDomainRequest.  # noqa: E501

        The name of the company that is taking this domain  # noqa: E501

        :return: The company_name of this CreateDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this CreateDomainRequest.

        The name of the company that is taking this domain  # noqa: E501

        :param company_name: The company_name of this CreateDomainRequest.  # noqa: E501
        :type company_name: str
        """
        if self.local_vars_configuration.client_side_validation and company_name is None:  # noqa: E501
            raise ValueError("Invalid value for `company_name`, must not be `None`")  # noqa: E501

        self._company_name = company_name

    @property
    def investment_company_type(self):
        """Gets the investment_company_type of this CreateDomainRequest.  # noqa: E501

        What type of investment company is this  # noqa: E501

        :return: The investment_company_type of this CreateDomainRequest.  # noqa: E501
        :rtype: str
        """
        return self._investment_company_type

    @investment_company_type.setter
    def investment_company_type(self, investment_company_type):
        """Sets the investment_company_type of this CreateDomainRequest.

        What type of investment company is this  # noqa: E501

        :param investment_company_type: The investment_company_type of this CreateDomainRequest.  # noqa: E501
        :type investment_company_type: str
        """

        self._investment_company_type = investment_company_type

    @property
    def owner(self):
        """Gets the owner of this CreateDomainRequest.  # noqa: E501


        :return: The owner of this CreateDomainRequest.  # noqa: E501
        :rtype: lusid_web_app.Contact
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CreateDomainRequest.


        :param owner: The owner of this CreateDomainRequest.  # noqa: E501
        :type owner: lusid_web_app.Contact
        """
        if self.local_vars_configuration.client_side_validation and owner is None:  # noqa: E501
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateDomainRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateDomainRequest):
            return True

        return self.to_dict() != other.to_dict()
