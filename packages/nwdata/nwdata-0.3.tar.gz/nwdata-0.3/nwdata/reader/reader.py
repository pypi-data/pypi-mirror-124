from __future__ import annotations
import numpy as np
from abc import ABC, abstractmethod
from typing import Dict, List, Callable, Any, Iterator, Union, Tuple
from copy import deepcopy
from prefetch_generator import BackgroundGenerator

from .schema import Schema, DataBucketsType, DimGetterType, DimTransformType

class Reader(ABC):
	def __init__(self, dataBuckets:DataBucketsType, dimGetter:DimGetterType={}, dimTransform:DimTransformType={}):
		self.datasetFormat = Schema(dataBuckets, dimGetter, dimTransform)
		self.isBatched = False
		self.isCacheable = False

	@abstractmethod
	def getDataset(self) -> Any:
		pass

	@abstractmethod
	def __len__(self) -> int:
		pass

	# Public interface

	# @brief The main iterator of a dataset. It will run over the data for one logical epoch.
	def iterateOneEpoch(self, maxPrefetch=0) -> Iterator[Dict[str, Any]]:
		from .epoch_iterator import EpochIterator
		iterator = EpochIterator(self)
		return iterator if maxPrefetch == 0 else BackgroundGenerator(iterator, max_prefetch=maxPrefetch)

	# Generic infinite generator, that simply does a while True over the iterate_once method, which only goes one epoch
	# @param[in] type The type of processing that is generated by the generator (typicall train/test/validation)
	# @param[in] maxPrefetch How many items in advance to be generated and stored before they are consumed. If 0, the
	#  thread API is not used at all. If 1, the thread API is used with a queue of length 1 (still works better than
	#  normal in most cases, due to the multi-threaded nature. For length > 1, the queue size is just increased.
	def iterateForever(self, maxPrefetch:int=0) -> Iterator[Dict[str, np.ndarray]]:
		assert maxPrefetch >= 0
		from .generator import Generator
		return Generator(self, maxPrefetch)

	def iterate(self, maxPrefetch:int=0) -> Iterator[Dict[str, np.ndarray]]:
		return self.iterateForever(maxPrefetch)

	def __cache__(self):
		assert False, "Should implement this if you want to cache your dataset!"

	# We just love to reinvent the wheel. But also let's reuse the existing wheels just in case.
	def __str__(self) -> str:
		summaryStr = "[Dataset Reader]"
		summaryStr += "\n - Type: %s" % type(self)
		summaryStr += "\n - Data buckets:"
		for dataBucket in self.datasetFormat.dataBuckets:
			summaryStr += "\n   - %s => %s" % (dataBucket, self.datasetFormat.dataBuckets[dataBucket])
		summaryStr += "\n - Len: %d" % len(self)
		return summaryStr

	# @brief Returns the item at index i. Basically g(i) -> Item(i). Item(i) will follow dataBuckets schema,
	#  and will call dimGetter for each dimension for this index.
	# @return The item at index i
	def __getitem__(self, index):
		dataBuckets = self.datasetFormat.dataBuckets
		allDims = self.datasetFormat.allDims
		dimGetter = self.datasetFormat.dimGetter
		dimTransforms = self.datasetFormat.dimTransform
		dimToDataBuckets = self.datasetFormat.dimToDataBuckets
		dataset = self.getDataset()

		# The result is simply a dictionary that follows the (shallow, for now) dataBuckets of format.
		result = {k : {k2 : None for k2 in dataBuckets[k]} for k in dataBuckets}
		# rawItems = {k : None for k in allDims}
		for dim in allDims:
			getterFn = dimGetter[dim]
			# Call the getter only once for efficiency
			rawItem = getterFn(dataset, index)
			# Call the transformer for each data bucket independently (labels and data may use same
			#  dim but do a different transformation (such as normalized in data and unnormalized in
			#  labels for metrics or plotting or w/e.
			for bucket in dimToDataBuckets[dim]:
				transformFn = dimTransforms[bucket][dim]
				item = transformFn(deepcopy(rawItem))
				result[bucket][dim] = item
		return result

	def __iter__(self):
		return self.iterateOneEpoch()