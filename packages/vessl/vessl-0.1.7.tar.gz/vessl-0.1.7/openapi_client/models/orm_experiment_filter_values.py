# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmExperimentFilterValues(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'datetime_values': 'list[float]',
        'duration_values': 'list[int]',
        'enum_values': 'list[str]',
        'number_values': 'list[float]',
        'object_values': 'list[int]',
        'string_values': 'list[str]',
        'tag_values': 'list[int]'
    }

    attribute_map = {
        'datetime_values': 'datetime_values',
        'duration_values': 'duration_values',
        'enum_values': 'enum_values',
        'number_values': 'number_values',
        'object_values': 'object_values',
        'string_values': 'string_values',
        'tag_values': 'tag_values'
    }

    def __init__(self, datetime_values=None, duration_values=None, enum_values=None, number_values=None, object_values=None, string_values=None, tag_values=None, local_vars_configuration=None):  # noqa: E501
        """OrmExperimentFilterValues - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._datetime_values = None
        self._duration_values = None
        self._enum_values = None
        self._number_values = None
        self._object_values = None
        self._string_values = None
        self._tag_values = None
        self.discriminator = None

        if datetime_values is not None:
            self.datetime_values = datetime_values
        if duration_values is not None:
            self.duration_values = duration_values
        if enum_values is not None:
            self.enum_values = enum_values
        if number_values is not None:
            self.number_values = number_values
        if object_values is not None:
            self.object_values = object_values
        if string_values is not None:
            self.string_values = string_values
        if tag_values is not None:
            self.tag_values = tag_values

    @property
    def datetime_values(self):
        """Gets the datetime_values of this OrmExperimentFilterValues.  # noqa: E501


        :return: The datetime_values of this OrmExperimentFilterValues.  # noqa: E501
        :rtype: list[float]
        """
        return self._datetime_values

    @datetime_values.setter
    def datetime_values(self, datetime_values):
        """Sets the datetime_values of this OrmExperimentFilterValues.


        :param datetime_values: The datetime_values of this OrmExperimentFilterValues.  # noqa: E501
        :type datetime_values: list[float]
        """

        self._datetime_values = datetime_values

    @property
    def duration_values(self):
        """Gets the duration_values of this OrmExperimentFilterValues.  # noqa: E501


        :return: The duration_values of this OrmExperimentFilterValues.  # noqa: E501
        :rtype: list[int]
        """
        return self._duration_values

    @duration_values.setter
    def duration_values(self, duration_values):
        """Sets the duration_values of this OrmExperimentFilterValues.


        :param duration_values: The duration_values of this OrmExperimentFilterValues.  # noqa: E501
        :type duration_values: list[int]
        """

        self._duration_values = duration_values

    @property
    def enum_values(self):
        """Gets the enum_values of this OrmExperimentFilterValues.  # noqa: E501


        :return: The enum_values of this OrmExperimentFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._enum_values

    @enum_values.setter
    def enum_values(self, enum_values):
        """Sets the enum_values of this OrmExperimentFilterValues.


        :param enum_values: The enum_values of this OrmExperimentFilterValues.  # noqa: E501
        :type enum_values: list[str]
        """

        self._enum_values = enum_values

    @property
    def number_values(self):
        """Gets the number_values of this OrmExperimentFilterValues.  # noqa: E501


        :return: The number_values of this OrmExperimentFilterValues.  # noqa: E501
        :rtype: list[float]
        """
        return self._number_values

    @number_values.setter
    def number_values(self, number_values):
        """Sets the number_values of this OrmExperimentFilterValues.


        :param number_values: The number_values of this OrmExperimentFilterValues.  # noqa: E501
        :type number_values: list[float]
        """

        self._number_values = number_values

    @property
    def object_values(self):
        """Gets the object_values of this OrmExperimentFilterValues.  # noqa: E501


        :return: The object_values of this OrmExperimentFilterValues.  # noqa: E501
        :rtype: list[int]
        """
        return self._object_values

    @object_values.setter
    def object_values(self, object_values):
        """Sets the object_values of this OrmExperimentFilterValues.


        :param object_values: The object_values of this OrmExperimentFilterValues.  # noqa: E501
        :type object_values: list[int]
        """

        self._object_values = object_values

    @property
    def string_values(self):
        """Gets the string_values of this OrmExperimentFilterValues.  # noqa: E501


        :return: The string_values of this OrmExperimentFilterValues.  # noqa: E501
        :rtype: list[str]
        """
        return self._string_values

    @string_values.setter
    def string_values(self, string_values):
        """Sets the string_values of this OrmExperimentFilterValues.


        :param string_values: The string_values of this OrmExperimentFilterValues.  # noqa: E501
        :type string_values: list[str]
        """

        self._string_values = string_values

    @property
    def tag_values(self):
        """Gets the tag_values of this OrmExperimentFilterValues.  # noqa: E501


        :return: The tag_values of this OrmExperimentFilterValues.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_values

    @tag_values.setter
    def tag_values(self, tag_values):
        """Sets the tag_values of this OrmExperimentFilterValues.


        :param tag_values: The tag_values of this OrmExperimentFilterValues.  # noqa: E501
        :type tag_values: list[int]
        """

        self._tag_values = tag_values

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmExperimentFilterValues):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmExperimentFilterValues):
            return True

        return self.to_dict() != other.to_dict()
