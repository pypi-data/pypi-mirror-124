# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: update setuptools version
          command: pip install --user setuptools==41.0.1

      - run:
          name: update ray version
          command: pip install --user ray==0.6.5

      - run:
          name: install onnxruntime
          command: pip install --user onnxruntime==0.4.0

      - run:
          name: run build
          command: python setup.py build

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: python setup.py test

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: dev

# Original CircleCI config
# # Python CircleCI 2.0 configuration file
# #
# # Check https://circleci.com/docs/2.0/language-python/ for more details
# #
# version: 2
# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#       # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
#       - image: circleci/python:3.6.1

#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # - image: circleci/postgres:9.4

#     working_directory: ~/repo

#     steps:
#       - checkout

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#             - v1-dependencies-{{ checksum "requirements.txt" }}
#             # fallback to using the latest cache if no exact match is found
#             - v1-dependencies-

#       - run:
#           name: install dependencies
#           command: |
#             python3 -m venv venv
#             . venv/bin/activate
#             pip install -r requirements.txt

#       - save_cache:
#           paths:
#             - ./venv
#           key: v1-dependencies-{{ checksum "requirements.txt" }}

#       # run tests!
#       # this example uses Django's built-in test-runner
#       # other common Python testing frameworks include pytest and nose
#       # https://pytest.org
#       # https://nose.readthedocs.io
#       - run:
#           name: run tests
#           command: |
#             . venv/bin/activate
#             python manage.py test

#       - store_artifacts:
#           path: test-reports
#           destination: test-reports